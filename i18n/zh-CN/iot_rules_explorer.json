{
  "title": "⚙️ AWS IoT 规则引擎探索器",
  "separator": "============================================================",
  "aws_context_info": "🌍 AWS 上下文信息:",
  "account_id": "账户 ID",
  "region": "区域",
  "aws_context_error": "⚠️ 无法检索 AWS 上下文:",
  "aws_credentials_reminder": "   确保已配置 AWS 凭证",
  "description_intro": "此脚本教您 AWS IoT 规则引擎概念:",
  "rules_concepts": [
    "• IoT 规则引擎 SQL 语法和消息路由",
    "• 使用 SELECT、FROM 和 WHERE 子句进行主题过滤", 
    "• 重新发布操作和 IAM 角色配置",
    "• 规则生命周期管理（创建、启用、禁用、删除）",
    "• 实时规则测试和验证",
    "• 每个操作的完整 API 详细信息"
  ],
  "debug_enabled": "🔍 调试模式已启用",
  "debug_features": [
    "• 增强的 AWS IoT API 日志记录",
    "• 详细的规则负载和 IAM 操作", 
    "• 扩展的错误诊断"
  ],
  "tip": "💡 提示: 使用 --debug 或 -d 标志进行增强日志记录",
  "press_enter": "按 Enter 继续...",
  "goodbye": "👋 再见！",
  "main_menu": "📋 IoT 规则引擎菜单:",
  "menu_options": [
    "1. 列出所有 IoT 规则",
    "2. 描述特定 IoT 规则",
    "3. 创建新的 IoT 规则", 
    "4. 使用示例消息测试 IoT 规则",
    "5. 管理 IoT 规则（启用/禁用/删除）",
    "6. 退出"
  ],
  "select_option": "选择选项 (1-6): ",
  "invalid_choice": "❌ 无效选择。请选择 1-6。",
  "learning_moments": {
    "rules_foundation": {
      "title": "📚 学习要点: IoT 规则引擎",
      "content": "AWS IoT 规则引擎使用类似 SQL 的查询处理和路由来自设备的消息。规则可以过滤、转换消息并将其路由到各种 AWS 服务，如 Lambda、DynamoDB 或 S3。这使得无需更改设备端逻辑即可实现实时数据处理、警报和与更广泛的 AWS 架构集成。",
      "next": "我们将创建和管理用于消息处理的 IoT 规则"
    },
    "rules_inventory": {
      "title": "📚 学习要点: 规则清单和管理", 
      "content": "列出 IoT 规则显示您账户中当前活跃的所有消息处理逻辑。每个规则都有名称、SQL 语句和操作。此清单帮助您了解数据流、识别未使用的规则并有效管理 IoT 消息处理管道。",
      "next": "我们将列出您账户中的所有 IoT 规则"
    },
    "rule_analysis": {
      "title": "📚 学习要点: 规则分析和故障排除",
      "content": "描述规则会显示其完整配置，包括 SQL 查询、操作和元数据。此详细视图对于排除消息路由问题、理解规则逻辑以及验证规则是否为您的用例正确配置至关重要。",
      "next": "我们将检查特定规则的配置"
    },
    "rule_creation": {
      "title": "📚 学习要点: 规则创建和消息路由",
      "content": "创建 IoT 规则定义如何处理和路由来自设备的消息。规则使用类似 SQL 的语法过滤和转换消息，然后触发存储数据、调用函数或发送通知等操作。这使得无需设备端更改即可实现实时数据处理。",
      "next": "我们将使用 SQL 和操作创建新的 IoT 规则"
    },
    "rule_testing": {
      "title": "📚 学习要点: 规则测试和验证",
      "content": "使用示例消息测试规则可验证您的 SQL 逻辑，并确保规则在部署到生产环境之前按预期运行。这有助于发现过滤错误、语法问题和可能导致消息处理失败或意外行为的逻辑问题。",
      "next": "我们将使用示例 MQTT 消息测试规则"
    },
    "rule_lifecycle": {
      "title": "📚 学习要点: 规则生命周期操作",
      "content": "管理规则包括启用、禁用和删除它们。禁用规则会停止消息处理而不丢失配置，而删除则永久移除它们。此生命周期管理对于维护、更新和排除 IoT 数据处理管道故障至关重要。",
      "next": "我们将管理规则状态和生命周期"
    }
  },
  "workflow_titles": {
    "list_rules": "📋 列出 IoT 规则工作流",
    "describe_rule": "🔍 描述 IoT 规则工作流", 
    "create_rule": "🔧 创建 IoT 规则工作流",
    "test_rule": "🧪 测试 IoT 规则工作流",
    "manage_rule": "⚙️ 管理 IoT 规则工作流"
  },
  "aws_context_info_label": "🌍 AWS 上下文信息:",
  "account_id_label": "账户 ID",
  "region_label": "区域",
  "aws_context_error_msg": "⚠️ 无法检索 AWS 上下文:",
  "aws_credentials_config": "   确保已配置 AWS 凭证",
  "main_title": "⚙️ AWS IoT 规则引擎探索器",
  "aws_config_title": "📍 AWS 配置:",
  "main_description": "通过实际的规则创建和管理学习 AWS IoT 规则引擎。",
  "main_features": "此工具演示:",
  "feature_sql_syntax": "• IoT 规则引擎 SQL 语法和消息路由",
  "feature_topic_filtering": "• 使用 SELECT、FROM 和 WHERE 子句进行主题过滤",
  "feature_republish_actions": "• 重新发布操作和 IAM 角色配置", 
  "feature_lifecycle": "• 规则生命周期管理（创建、启用、禁用、删除）",
  "learning_moment_title": "📚 学习要点: IoT 规则引擎",
  "learning_moment_description": "AWS IoT 规则引擎使用类似 SQL 的查询处理和路由来自设备的消息。规则可以过滤、转换消息并将其路由到各种 AWS 服务，如 Lambda、DynamoDB 或 S3。这使得无需更改设备端逻辑即可实现实时数据处理、警报和与更广泛的 AWS 架构集成。",
  "next_action": "🔄 下一步: 我们将创建和管理用于消息处理的 IoT 规则",
  "press_enter_continue": "按 Enter 继续...",
  "debug_mode_enabled": "🔍 调试模式已启用",
  "debug_features_list": [
    "• 增强的 AWS IoT API 日志记录",
    "• 详细的规则负载和 IAM 操作",
    "• 扩展的错误诊断"
  ],
  "debug_tip": "💡 提示: 使用 --debug 或 -d 标志进行增强日志记录",
  "menu_title": "📋 IoT 规则引擎菜单:",
  "menu_option_1": "1. 列出所有 IoT 规则",
  "menu_option_2": "2. 描述特定 IoT 规则", 
  "menu_option_3": "3. 创建新的 IoT 规则",
  "menu_option_4": "4. 使用示例消息测试 IoT 规则",
  "menu_option_5": "5. 管理 IoT 规则（启用/禁用/删除）",
  "menu_option_6": "6. 退出",
  "press_enter_menu": "按 Enter 继续...",
  "learning_moment_inventory": "📚 学习要点: 规则清单和管理",
  "learning_moment_inventory_desc": "列出 IoT 规则显示您账户中当前活跃的所有消息处理逻辑。每个规则都有名称、SQL 语句和操作。此清单帮助您了解数据流、识别未使用的规则并有效管理 IoT 消息处理管道。",
  "next_list_rules": "🔄 下一步: 我们将列出您账户中的所有 IoT 规则",
  "learning_moment_analysis": "📚 学习要点: 规则分析和故障排除",
  "learning_moment_analysis_desc": "描述规则会显示其完整配置，包括 SQL 查询、操作和元数据。此详细视图对于排除消息路由问题、理解规则逻辑以及验证规则是否为您的用例正确配置至关重要。",
  "next_examine_rule": "🔄 下一步: 我们将检查特定规则的配置",
  "learning_moment_creation": "📚 学习要点: 规则创建和消息路由",
  "learning_moment_creation_desc": "创建 IoT 规则定义如何处理和路由来自设备的消息。规则使用类似 SQL 的语法过滤和转换消息，然后触发存储数据、调用函数或发送通知等操作。这使得无需设备端更改即可实现实时数据处理。",
  "next_create_rule": "🔄 下一步: 我们将使用 SQL 和操作创建新的 IoT 规则",
  "learning_moment_testing": "📚 学习要点: 规则测试和验证",
  "learning_moment_testing_desc": "使用示例消息测试规则可验证您的 SQL 逻辑，并确保规则在部署到生产环境之前按预期运行。这有助于发现过滤错误、语法问题和可能导致消息处理失败或意外行为的逻辑问题。",
  "next_test_rule": "🔄 下一步: 我们将使用示例 MQTT 消息测试规则",
  "learning_moment_lifecycle": "📚 学习要点: 规则生命周期操作", 
  "learning_moment_lifecycle_desc": "管理规则包括启用、禁用和删除它们。禁用规则会停止消息处理而不丢失配置，而删除则永久移除它们。此生命周期管理对于维护、更新和排除 IoT 数据处理管道故障至关重要。",
  "next_manage_rule": "🔄 下一步: 我们将管理规则状态和生命周期",
  "debug_operation": "🔍 调试: {operation}",
  "debug_input": "📥 输入: {input}",
  "debug_completed": "✅ {operation} 完成",
  "debug_output": "📤 输出: {output}",
  "debug_error_code": "🔍 调试: 错误代码: {code}",
  "list_rules_title": "列出 IoT 规则",
  "no_rules_found": "📋 在您的账户中未找到 IoT 规则",
  "create_first_rule": "💡 使用选项 3 创建您的第一个规则",
  "found_rules": "📋 找到 {count} 个 IoT 规则:",
  "rule_status_disabled": "🔴 已禁用",
  "rule_status_enabled": "🟢 已启用", 
  "created_label": "📅 创建时间: {date}",
  "debug_rule_arn": "🔍 调试: 规则 ARN: {arn}",
  "sql_label": "📝 SQL: {sql}",
  "actions_count": "🎯 操作: 已配置 {count} 个",
  "action_republish": "重新发布到: {topic}",
  "action_s3": "S3 到存储桶: {bucket}",
  "action_lambda": "Lambda: {function}",
  "describe_rule_title": "描述 IoT 规则",
  "list_rules_for_selection": "列出 IoT 规则以供选择",
  "available_rules": "📋 可用规则:",
  "select_rule_describe": "选择要描述的规则 (1-{count}): ",
  "invalid_selection_range": "❌ 无效选择。请输入 1-{count}",
  "enter_valid_number": "❌ 请输入有效数字",
  "rule_details_title": "📋 规则详细信息: {name}",
  "sql_statement_label": "📝 SQL 语句:",
  "sql_breakdown_label": "📖 SQL 分解:",
  "select_clause": "🔍 SELECT: {clause}",
  "from_clause": "📥 FROM: {clause}",
  "where_clause": "🔍 WHERE: {clause}",
  "actions_title": "🎯 操作 ({count}):",
  "action_type": "操作类型: {type}",
  "target_topic": "📤 目标主题: {topic}",
  "role_arn": "🔑 角色 ARN: {arn}",
  "qos_label": "🏷️  QoS: {qos}",
  "bucket_label": "🪣 存储桶: {bucket}",
  "key_label": "📁 键: {key}",
  "function_arn": "⚡ 函数 ARN: {arn}",
  "error_action_title": "❌ 错误操作:",
  "error_action_type": "类型: {type}",
  "error_action_topic": "主题: {topic}",
  "rule_metadata_title": "📊 规则元数据:",
  "rule_status": "🔄 状态: {status}",
  "rule_created": "📅 创建时间: {date}",
  "debug_complete_payload": "🔍 调试: 完整规则负载:",
  "create_rule_title": "创建 IoT 规则",
  "create_learning_objectives": "🎓 学习目标:",
  "objective_sql_syntax": "• 理解 IoT 规则引擎 SQL 语法",
  "objective_topic_filtering": "• 学习主题过滤和消息路由",
  "objective_sql_clauses": "• 练习 SELECT、FROM 和 WHERE 子句",
  "objective_republish_actions": "• 使用适当的 IAM 角色配置重新发布操作",
  "enter_rule_name": "📝 输入规则名称（仅限字母数字和下划线）: ",
  "invalid_rule_name": "❌ 规则名称只能包含字母数字字符和下划线",
  "rule_name_confirmed": "✅ 规则名称: {name}",
  "enter_rule_description": "📖 输入规则描述（可选）: ",
  "default_rule_description": "用于处理 IoT 消息的学习规则",
  "rule_description_confirmed": "✅ 规则描述: {description}",
  "building_sql_title": "📖 为 IoT 规则引擎构建 SQL 语句",
  "sql_template": "💡 模板: SELECT <属性> FROM '<主题模式>' WHERE <条件>",
  "topic_configuration_title": "📡 主题模式配置",
  "topic_option_template": "1. 使用预定义模板: testRulesEngineTopic/<deviceId>/<eventType>",
  "topic_option_custom": "2. 定义自定义主题模式",
  "select_topic_option": "选择主题配置 (1-2): ",
  "available_event_types": "🎯 可用事件类型:",
  "custom_event_type": "自定义事件类型",
  "select_event_type": "选择事件类型 (1-{count}): ",
  "enter_custom_event_type": "输入自定义事件类型: ",
  "event_type_empty": "❌ 事件类型不能为空",
  "invalid_event_selection": "❌ 无效选择",
  "enter_custom_topic": "📝 输入您的自定义主题模式（使用 + 作为通配符）: ",
  "custom_topic_examples": "💡 示例: 'sensors/+/data', 'devices/+/telemetry/+', 'factory/floor1/+/status'",
  "custom_topic_empty": "❌ 主题模式不能为空",
  "topic_pattern_confirmed": "✅ 主题模式: {pattern}",
  "select_clause_title": "🔍 SELECT 子句 - {event_type} 事件的属性:",
  "custom_selection": "自定义选择",
  "select_attributes": "选择属性 (1-{count}): ",
  "enter_custom_select": "输入自定义 SELECT 子句: ",
  "select_clause_empty": "❌ SELECT 子句不能为空",
  "select_clause_confirmed": "✅ SELECT: {clause}",
  "where_clause_title": "🔍 WHERE 子句（可选）- 过滤 {event_type} 消息:",
  "where_examples_title": "💡 {event_type} 的示例:",
  "add_where_condition": "添加 WHERE 条件？ (y/N): ",
  "enter_where_condition": "输入 WHERE 条件: ",
  "where_clause_confirmed": "✅ WHERE: {clause}",
  "empty_where_warning": "⚠️ 空 WHERE 子句，继续进行而不过滤",
  "complete_sql_title": "📝 完整 SQL 语句:",
  "input_validation_error": "❌ 输入验证错误: {error}",
  "validation_tip": "💡 请仅使用字母数字字符、空格和基本运算符",
  "republish_config_title": "📤 重新发布操作配置",
  "enter_target_topic": "输入重新发布的目标主题（例如，'processed/temperature'）: ",
  "default_target_topic": "✅ 使用默认目标主题: {topic}",
  "iam_role_setup": "🔑 为规则操作设置 IAM 角色",
  "iam_role_failed": "❌ 创建/验证 IAM 角色失败。无法创建规则。",
  "creating_rule": "🔧 正在创建 IoT 规则...",
  "debug_rule_payload": "🔍 调试: 规则负载:",
  "create_rule_attempt": "创建 IoT 规则 '{name}'（尝试 {attempt}/{max_attempts}）",
  "iam_propagation_wait": "⏳ IAM 角色可能仍在传播中。重试前等待 10 秒...",
  "create_rule_failed": "❌ 在 {attempts} 次尝试后创建规则失败",
  "rule_created_success": "🎉 规则 '{name}' 创建成功！",
  "rule_summary_title": "📋 规则摘要:",
  "summary_name": "📝 名称: {name}",
  "summary_source_topic": "📥 源主题: {topic}",
  "summary_target_topic": "📤 目标主题: {topic}",
  "summary_sql": "🔍 SQL: {sql}",
  "summary_role": "🔑 角色: {role}",
  "testing_rule_title": "💡 测试您的规则:",
  "testing_step_1": "1. 发布消息到: {source_topic}",
  "testing_step_2": "2. 订阅: {target_topic}",
  "testing_step_3": "3. 检查消息是否正确路由",
  "example_test_message": "📖 示例测试消息:",
  "debug_existing_role": "🔍 调试: 使用现有 IAM 角色: {arn}",
  "using_existing_role": "✅ 使用现有 IAM 角色: {name}",
  "creating_iam_role": "🔧 正在创建 IAM 角色: {name}",
  "error_checking_role": "❌ 检查 IAM 角色时出错: {error}",
  "create_iam_role_operation": "创建 IAM 角色 '{name}'",
  "create_iam_policy_operation": "创建 IAM 策略 '{name}'",
  "attach_policy_operation": "将策略附加到角色",
  "iam_role_created_success": "✅ IAM 角色和策略创建成功",
  "iam_role_propagation": "⏳ 等待 IAM 角色传播（10 秒）...",
  "manage_rule_title": "管理 IoT 规则",
  "list_rules_for_management": "列出用于管理的 IoT 规则",
  "select_rule_manage": "选择要管理的规则 (1-{count}): ",
  "managing_rule": "🔧 正在管理规则: {name}",
  "current_status": "📊 当前状态: {status}",
  "management_options": "📋 管理选项:",
  "enable_rule": "1. 🟢 启用规则",
  "disable_rule": "1. 🔴 禁用规则",
  "delete_rule": "2. 🗑️ 删除规则",
  "cancel_management": "3. ↩️ 取消",
  "select_action": "选择操作 (1-3): ",
  "invalid_action_selection": "❌ 无效选择。请输入 1-3",
  "get_current_rule_settings": "获取当前规则设置",
  "enable_rule_operation": "启用规则 '{name}'",
  "disable_rule_operation": "禁用规则 '{name}'",
  "rule_status_updated": "✅ 规则 '{name}' 现在是 {status}",
  "failed_get_rule_settings": "❌ 获取 '{name}' 的当前规则设置失败",
  "confirm_delete_rule": "⚠️ 您确定要删除规则 '{name}' 吗？ (y/N): ",
  "delete_rule_operation": "删除规则 '{name}'",
  "rule_deleted_success": "✅ 规则 '{name}' 删除成功",
  "rule_deletion_cancelled": "❌ 规则删除已取消",
  "management_cancelled": "↩️ 管理已取消",
  "test_rule_title": "测试 IoT 规则",
  "test_learning_objectives": "🎓 学习目标:",
  "test_objective_1": "• 测试规则主题匹配和 WHERE 条件",
  "test_objective_2": "• 理解消息路由行为",
  "test_objective_3": "• 练习匹配和不匹配的消息",
  "test_objective_4": "• 观察实时规则处理",
  "list_rules_for_testing": "列出用于测试的 IoT 规则",
  "no_rules_for_testing": "📋 未找到 IoT 规则",
  "create_rule_first": "💡 首先使用选项 3 创建规则",
  "select_rule_test": "选择要测试的规则 (1-{count}): ",
  "get_rule_details_testing": "获取用于测试的规则详细信息",
  "testing_rule": "📋 正在测试规则: {name}",
  "sql_display": "📝 SQL: {sql}",
  "source_topic_pattern": "📥 源主题模式: {pattern}",
  "where_condition_display": "🔍 WHERE 条件: {condition}",
  "target_topics_display": "📤 目标主题: {topics}",
  "finding_devices_certificates": "🔍 正在查找具有证书的设备...",
  "no_certificates_directory": "❌ 未找到证书目录。",
  "run_certificate_manager": "💡 首先运行 certificate_manager.py 创建证书",
  "no_devices_certificates": "❌ 未找到具有证书的设备。",
  "found_devices_certificates": "📋 找到 {count} 个具有证书的设备:",
  "using_device": "✅ 使用设备: {name}",
  "selected_device": "✅ 选择的设备: {name}",
  "select_device": "选择设备 (1-{count}): ",
  "invalid_device_selection": "❌ 无效选择",
  "get_iot_endpoint": "获取 IoT 端点",
  "cannot_get_endpoint": "❌ 无法获取 IoT 端点。测试需要 MQTT 连接。",
  "interactive_testing_title": "🧪 交互式规则测试",
  "connecting_to_endpoint": "📡 正在连接到: {endpoint}",
  "using_device_info": "📱 使用设备: {device}",
  "connecting_aws_iot": "🔌 正在连接到 AWS IoT...",
  "connected_aws_iot": "✅ 已连接到 AWS IoT",
  "subscribed_target_topic": "📡 已订阅目标主题: {topic}",
  "rule_testing_instructions": "🎯 规则测试说明:",
  "instruction_1": "• 您将被询问每条消息是否应匹配规则",
  "instruction_2": "• 主题匹配: 主题是否符合模式？",
  "instruction_3": "• WHERE 条件: 消息内容是否匹配过滤器？",
  "instruction_4": "• 观察目标主题上的规则输出消息",
  "instruction_5": "• 输入 'quit' 退出测试",
  "test_message_header": "🧪 测试消息 #{count}",
  "topic_pattern_display": "📥 主题模式: {pattern}",
  "no_specific_pattern": "无特定模式",
  "should_match_topic": "此消息应该匹配主题模式吗？ (y/N/quit): ",
  "generated_topic": "📡 生成的主题: {topic}",
  "where_condition_label": "🔍 WHERE 条件: {condition}",
  "should_match_where": "此消息应该匹配 WHERE 条件吗？ (y/n): ",
  "test_message_display": "📝 测试消息:",
  "topic_label": "📡 主题: {topic}",
  "payload_label": "💬 负载: {payload}",
  "prediction_should_trigger": "🔮 预测: 规则应该触发",
  "prediction_should_not_trigger": "🔮 预测: 规则不应该触发",
  "publishing_test_message": "📤 正在发布测试消息...",
  "waiting_rule_processing": "⏳ 等待 3 秒进行规则处理...",
  "expected_trigger_no_output": "⚠️ 预期规则触发但未收到输出",
  "unexpected_trigger": "⚠️ 规则意外触发",
  "rule_triggered_expected": "✅ 规则按预期触发！",
  "rule_correctly_not_triggered": "✅ 规则正确未触发",
  "press_enter_next_test": "按 Enter 继续下一个测试...",
  "testing_error": "❌ 测试错误: {error}",
  "disconnecting_aws_iot": "🔌 正在断开与 AWS IoT 的连接...",
  "disconnected_aws_iot": "✅ 已断开与 AWS IoT 的连接",
  "rule_output_received": "🔔 收到规则输出 [{timestamp}]",
  "message_topic": "📤 主题: {topic}",
  "message_content": "💬 消息: {message}",
  "rule_processed_forwarded": "✅ 规则 '{name}' 处理并转发了消息！",
  "connection_interrupted": "⚠️ 连接中断: {error}",
  "connection_resumed": "✅ 连接已恢复",
  "operation_failed": "❌ {operation} 失败: {error}",
  "unexpected_error": "❌ 意外错误: {error}",
  "interrupted_by_user": "🛑 被用户中断",
  "invalid_characters_clause": "{clause_type} 子句中的字符无效。仅允许字母数字字符、空格和基本运算符。",
  "dangerous_pattern_detected": "在 {clause_type} 子句中检测到潜在危险模式 '{pattern}'。",
  "invalid_characters_topic": "主题模式中的字符无效。仅允许字母数字字符、连字符、下划线、正斜杠和 + 通配符。",
  "header_separator": "============================================================",
  "step_separator": "----------------------------------------------------",
  "rule_separator": "----------------------------------------"
}