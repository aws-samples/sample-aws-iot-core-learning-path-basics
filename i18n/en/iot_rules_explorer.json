{
  "title": "⚙️ AWS IoT Rules Engine Explorer",
  "separator": "============================================================",
  "aws_context_info": "🌍 AWS Context Information:",
  "account_id": "Account ID",
  "region": "Region",
  "aws_context_error": "⚠️ Could not retrieve AWS context:",
  "aws_credentials_reminder": "   Make sure AWS credentials are configured",
  "description_intro": "This script teaches you AWS IoT Rules Engine concepts:",
  "rules_concepts": [
    "• IoT Rules Engine SQL syntax and message routing",
    "• Topic filtering with SELECT, FROM, and WHERE clauses", 
    "• Republish actions and IAM role configuration",
    "• Rule lifecycle management (create, enable, disable, delete)",
    "• Real-time rule testing and validation",
    "• Complete API details for each operation"
  ],
  "debug_enabled": "🔍 DEBUG MODE ENABLED",
  "debug_features": [
    "• Enhanced AWS IoT API logging",
    "• Detailed rule payload and IAM operations", 
    "• Extended error diagnostics"
  ],
  "tip": "💡 Tip: Use --debug or -d flag for enhanced logging",
  "press_enter": "Press Enter to continue...",
  "goodbye": "👋 Goodbye!",
  "main_menu": "📋 IoT Rules Engine Menu:",
  "menu_options": [
    "1. List all IoT Rules",
    "2. Describe specific IoT Rule",
    "3. Create new IoT Rule", 
    "4. Test IoT Rule with sample messages",
    "5. Manage IoT Rule (enable/disable/delete)",
    "6. Exit"
  ],
  "select_option": "Select option (1-6): ",
  "invalid_choice": "❌ Invalid choice. Please select 1-6.",
  "learning_moments": {
    "rules_foundation": {
      "title": "📚 LEARNING MOMENT: IoT Rules Engine",
      "content": "The AWS IoT Rules Engine processes and routes messages from your devices using SQL-like queries. Rules can filter, transform, and route messages to various AWS services like Lambda, DynamoDB, or S3. This enables real-time data processing, alerting, and integration with your broader AWS architecture without requiring device-side logic changes.",
      "next": "We will create and manage IoT rules for message processing"
    },
    "rules_inventory": {
      "title": "📚 LEARNING MOMENT: Rules Inventory & Management", 
      "content": "Listing IoT rules shows you all the message processing logic currently active in your account. Each rule has a name, SQL statement, and actions. This inventory helps you understand your data flow, identify unused rules, and manage your IoT message processing pipeline effectively.",
      "next": "We will list all IoT rules in your account"
    },
    "rule_analysis": {
      "title": "📚 LEARNING MOMENT: Rule Analysis & Troubleshooting",
      "content": "Describing a rule reveals its complete configuration including SQL query, actions, and metadata. This detailed view is essential for troubleshooting message routing issues, understanding rule logic, and verifying that rules are configured correctly for your use case.",
      "next": "We will examine a specific rule's configuration"
    },
    "rule_creation": {
      "title": "📚 LEARNING MOMENT: Rule Creation & Message Routing",
      "content": "Creating IoT rules defines how messages from your devices are processed and routed. Rules use SQL-like syntax to filter and transform messages, then trigger actions like storing data, invoking functions, or sending notifications. This enables real-time data processing without device-side changes.",
      "next": "We will create a new IoT rule with SQL and actions"
    },
    "rule_testing": {
      "title": "📚 LEARNING MOMENT: Rule Testing & Validation",
      "content": "Testing rules with sample messages validates your SQL logic and ensures rules behave as expected before deploying to production. This helps catch filtering errors, syntax issues, and logic problems that could cause message processing failures or unexpected behavior.",
      "next": "We will test a rule with sample MQTT messages"
    },
    "rule_lifecycle": {
      "title": "📚 LEARNING MOMENT: Rule Lifecycle Operations",
      "content": "Managing rules includes enabling, disabling, and deleting them. Disabling rules stops message processing without losing configuration, while deleting removes them permanently. This lifecycle management is crucial for maintaining, updating, and troubleshooting your IoT data processing pipeline.",
      "next": "We will manage rule status and lifecycle"
    }
  },
  "workflow_titles": {
    "list_rules": "📋 List IoT Rules Workflow",
    "describe_rule": "🔍 Describe IoT Rule Workflow", 
    "create_rule": "🔧 Create IoT Rule Workflow",
    "test_rule": "🧪 Test IoT Rule Workflow",
    "manage_rule": "⚙️ Manage IoT Rule Workflow"
  },
  "aws_context_info_label": "🌍 AWS Context Information:",
  "account_id_label": "Account ID",
  "region_label": "Region",
  "aws_context_error_msg": "⚠️ Could not retrieve AWS context:",
  "aws_credentials_config": "   Make sure AWS credentials are configured",
  "main_title": "⚙️ AWS IoT Rules Engine Explorer",
  "aws_config_title": "📍 AWS Configuration:",
  "main_description": "Learn AWS IoT Rules Engine through hands-on rule creation and management.",
  "main_features": "This tool demonstrates:",
  "feature_sql_syntax": "• IoT Rules Engine SQL syntax and message routing",
  "feature_topic_filtering": "• Topic filtering with SELECT, FROM, and WHERE clauses",
  "feature_republish_actions": "• Republish actions and IAM role configuration", 
  "feature_lifecycle": "• Rule lifecycle management (create, enable, disable, delete)",
  "learning_moment_title": "📚 LEARNING MOMENT: IoT Rules Engine",
  "learning_moment_description": "The AWS IoT Rules Engine processes and routes messages from your devices using SQL-like queries. Rules can filter, transform, and route messages to various AWS services like Lambda, DynamoDB, or S3. This enables real-time data processing, alerting, and integration with your broader AWS architecture without requiring device-side logic changes.",
  "next_action": "🔄 NEXT: We will create and manage IoT rules for message processing",
  "press_enter_continue": "Press Enter to continue...",
  "debug_mode_enabled": "🔍 DEBUG MODE ENABLED",
  "debug_features_list": [
    "• Enhanced AWS IoT API logging",
    "• Detailed rule payload and IAM operations",
    "• Extended error diagnostics"
  ],
  "debug_tip": "💡 Tip: Use --debug or -d flag for enhanced logging",
  "menu_title": "📋 IoT Rules Engine Menu:",
  "menu_option_1": "1. List all IoT Rules",
  "menu_option_2": "2. Describe specific IoT Rule", 
  "menu_option_3": "3. Create new IoT Rule",
  "menu_option_4": "4. Test IoT Rule with sample messages",
  "menu_option_5": "5. Manage IoT Rule (enable/disable/delete)",
  "menu_option_6": "6. Exit",
  "press_enter_menu": "Press Enter to continue...",
  "learning_moment_inventory": "📚 LEARNING MOMENT: Rules Inventory & Management",
  "learning_moment_inventory_desc": "Listing IoT rules shows you all the message processing logic currently active in your account. Each rule has a name, SQL statement, and actions. This inventory helps you understand your data flow, identify unused rules, and manage your IoT message processing pipeline effectively.",
  "next_list_rules": "🔄 NEXT: We will list all IoT rules in your account",
  "learning_moment_analysis": "📚 LEARNING MOMENT: Rule Analysis & Troubleshooting",
  "learning_moment_analysis_desc": "Describing a rule reveals its complete configuration including SQL query, actions, and metadata. This detailed view is essential for troubleshooting message routing issues, understanding rule logic, and verifying that rules are configured correctly for your use case.",
  "next_examine_rule": "🔄 NEXT: We will examine a specific rule's configuration",
  "learning_moment_creation": "📚 LEARNING MOMENT: Rule Creation & Message Routing",
  "learning_moment_creation_desc": "Creating IoT rules defines how messages from your devices are processed and routed. Rules use SQL-like syntax to filter and transform messages, then trigger actions like storing data, invoking functions, or sending notifications. This enables real-time data processing without device-side changes.",
  "next_create_rule": "🔄 NEXT: We will create a new IoT rule with SQL and actions",
  "learning_moment_testing": "📚 LEARNING MOMENT: Rule Testing & Validation",
  "learning_moment_testing_desc": "Testing rules with sample messages validates your SQL logic and ensures rules behave as expected before deploying to production. This helps catch filtering errors, syntax issues, and logic problems that could cause message processing failures or unexpected behavior.",
  "next_test_rule": "🔄 NEXT: We will test a rule with sample MQTT messages",
  "learning_moment_lifecycle": "📚 LEARNING MOMENT: Rule Lifecycle Operations", 
  "learning_moment_lifecycle_desc": "Managing rules includes enabling, disabling, and deleting them. Disabling rules stops message processing without losing configuration, while deleting removes them permanently. This lifecycle management is crucial for maintaining, updating, and troubleshooting your IoT data processing pipeline.",
  "next_manage_rule": "🔄 NEXT: We will manage rule status and lifecycle",
  "debug_operation": "🔍 DEBUG: {operation}",
  "debug_input": "📥 Input: {input}",
  "debug_completed": "✅ {operation} completed",
  "debug_output": "📤 Output: {output}",
  "debug_error_code": "🔍 DEBUG: Error code: {code}",
  "list_rules_title": "List IoT Rules",
  "no_rules_found": "📋 No IoT Rules found in your account",
  "create_first_rule": "💡 Create your first rule using option 3",
  "found_rules": "📋 Found {count} IoT Rules:",
  "rule_status_disabled": "🔴 DISABLED",
  "rule_status_enabled": "🟢 ENABLED", 
  "created_label": "📅 Created: {date}",
  "debug_rule_arn": "🔍 DEBUG: Rule ARN: {arn}",
  "sql_label": "📝 SQL: {sql}",
  "actions_count": "🎯 Actions: {count} configured",
  "action_republish": "Republish to: {topic}",
  "action_s3": "S3 to bucket: {bucket}",
  "action_lambda": "Lambda: {function}",
  "describe_rule_title": "Describe IoT Rule",
  "list_rules_for_selection": "List IoT Rules for selection",
  "available_rules": "📋 Available Rules:",
  "select_rule_describe": "Select rule to describe (1-{count}): ",
  "invalid_selection_range": "❌ Invalid selection. Please enter 1-{count}",
  "enter_valid_number": "❌ Please enter a valid number",
  "rule_details_title": "📋 Rule Details: {name}",
  "sql_statement_label": "📝 SQL Statement:",
  "sql_breakdown_label": "📖 SQL Breakdown:",
  "select_clause": "🔍 SELECT: {clause}",
  "from_clause": "📥 FROM: {clause}",
  "where_clause": "🔍 WHERE: {clause}",
  "actions_title": "🎯 Actions ({count}):",
  "action_type": "Action Type: {type}",
  "target_topic": "📤 Target Topic: {topic}",
  "role_arn": "🔑 Role ARN: {arn}",
  "qos_label": "🏷️  QoS: {qos}",
  "bucket_label": "🪣 Bucket: {bucket}",
  "key_label": "📁 Key: {key}",
  "function_arn": "⚡ Function ARN: {arn}",
  "error_action_title": "❌ Error Action:",
  "error_action_type": "Type: {type}",
  "error_action_topic": "Topic: {topic}",
  "rule_metadata_title": "📊 Rule Metadata:",
  "rule_status": "🔄 Status: {status}",
  "rule_created": "📅 Created: {date}",
  "debug_complete_payload": "🔍 DEBUG: Complete Rule Payload:",
  "create_rule_title": "Create IoT Rule",
  "create_learning_objectives": "🎓 Learning Objectives:",
  "objective_sql_syntax": "• Understand IoT Rules Engine SQL syntax",
  "objective_topic_filtering": "• Learn topic filtering and message routing",
  "objective_sql_clauses": "• Practice SELECT, FROM, and WHERE clauses",
  "objective_republish_actions": "• Configure republish actions with proper IAM roles",
  "enter_rule_name": "📝 Enter rule name (alphanumeric and underscores only): ",
  "invalid_rule_name": "❌ Rule name must contain only alphanumeric characters and underscores",
  "rule_name_confirmed": "✅ Rule name: {name}",
  "enter_rule_description": "📖 Enter rule description (optional): ",
  "default_rule_description": "Learning rule for processing IoT messages",
  "rule_description_confirmed": "✅ Rule description: {description}",
  "building_sql_title": "📖 Building SQL Statement for IoT Rules Engine",
  "sql_template": "💡 Template: SELECT <attributes> FROM '<topic_pattern>' WHERE <condition>",
  "topic_configuration_title": "📡 Topic Pattern Configuration",
  "topic_option_template": "1. Use predefined template: testRulesEngineTopic/<deviceId>/<eventType>",
  "topic_option_custom": "2. Define custom topic pattern",
  "select_topic_option": "Select topic configuration (1-2): ",
  "available_event_types": "🎯 Available Event Types:",
  "custom_event_type": "Custom event type",
  "select_event_type": "Select event type (1-{count}): ",
  "enter_custom_event_type": "Enter custom event type: ",
  "event_type_empty": "❌ Event type cannot be empty",
  "invalid_event_selection": "❌ Invalid selection",
  "enter_custom_topic": "📝 Enter your custom topic pattern (use + for wildcards): ",
  "custom_topic_examples": "💡 Examples: 'sensors/+/data', 'devices/+/telemetry/+', 'factory/floor1/+/status'",
  "custom_topic_empty": "❌ Topic pattern cannot be empty",
  "topic_pattern_confirmed": "✅ Topic pattern: {pattern}",
  "select_clause_title": "🔍 SELECT Clause - Attributes for {event_type} events:",
  "custom_selection": "Custom selection",
  "select_attributes": "Select attributes (1-{count}): ",
  "enter_custom_select": "Enter custom SELECT clause: ",
  "select_clause_empty": "❌ SELECT clause cannot be empty",
  "select_clause_confirmed": "✅ SELECT: {clause}",
  "where_clause_title": "🔍 WHERE Clause (Optional) - Filter {event_type} messages:",
  "where_examples_title": "💡 Examples for {event_type}:",
  "add_where_condition": "Add WHERE condition? (y/N): ",
  "enter_where_condition": "Enter WHERE condition: ",
  "where_clause_confirmed": "✅ WHERE: {clause}",
  "empty_where_warning": "⚠️ Empty WHERE clause, proceeding without filter",
  "complete_sql_title": "📝 Complete SQL Statement:",
  "input_validation_error": "❌ Input validation error: {error}",
  "validation_tip": "💡 Please use only alphanumeric characters, spaces, and basic operators",
  "republish_config_title": "📤 Republish Action Configuration",
  "enter_target_topic": "Enter target topic for republishing (e.g., 'processed/temperature'): ",
  "default_target_topic": "✅ Using default target topic: {topic}",
  "iam_role_setup": "🔑 Setting up IAM Role for Rule Actions",
  "iam_role_failed": "❌ Failed to create/verify IAM role. Cannot create rule.",
  "creating_rule": "🔧 Creating IoT Rule...",
  "debug_rule_payload": "🔍 DEBUG: Rule payload:",
  "create_rule_attempt": "Create IoT Rule '{name}' (attempt {attempt}/{max_attempts})",
  "iam_propagation_wait": "⏳ IAM role may still be propagating. Waiting 10 seconds before retry...",
  "create_rule_failed": "❌ Failed to create rule after {attempts} attempts",
  "rule_created_success": "🎉 Rule '{name}' created successfully!",
  "rule_summary_title": "📋 Rule Summary:",
  "summary_name": "📝 Name: {name}",
  "summary_source_topic": "📥 Source Topic: {topic}",
  "summary_target_topic": "📤 Target Topic: {topic}",
  "summary_sql": "🔍 SQL: {sql}",
  "summary_role": "🔑 Role: {role}",
  "testing_rule_title": "💡 Testing Your Rule:",
  "testing_step_1": "1. Publish a message to: {source_topic}",
  "testing_step_2": "2. Subscribe to: {target_topic}",
  "testing_step_3": "3. Check if the message is routed correctly",
  "example_test_message": "📖 Example test message:",
  "debug_existing_role": "🔍 DEBUG: Using existing IAM role: {arn}",
  "using_existing_role": "✅ Using existing IAM role: {name}",
  "creating_iam_role": "🔧 Creating IAM role: {name}",
  "error_checking_role": "❌ Error checking IAM role: {error}",
  "create_iam_role_operation": "Create IAM role '{name}'",
  "create_iam_policy_operation": "Create IAM policy '{name}'",
  "attach_policy_operation": "Attach policy to role",
  "iam_role_created_success": "✅ IAM role and policy created successfully",
  "iam_role_propagation": "⏳ Waiting for IAM role propagation (10 seconds)...",
  "manage_rule_title": "Manage IoT Rules",
  "list_rules_for_management": "List IoT Rules for management",
  "select_rule_manage": "Select rule to manage (1-{count}): ",
  "managing_rule": "🔧 Managing Rule: {name}",
  "current_status": "📊 Current Status: {status}",
  "management_options": "📋 Management Options:",
  "enable_rule": "1. 🟢 Enable rule",
  "disable_rule": "1. 🔴 Disable rule",
  "delete_rule": "2. 🗑️ Delete rule",
  "cancel_management": "3. ↩️ Cancel",
  "select_action": "Select action (1-3): ",
  "invalid_action_selection": "❌ Invalid selection. Please enter 1-3",
  "get_current_rule_settings": "Get current rule settings",
  "enable_rule_operation": "Enable rule '{name}'",
  "disable_rule_operation": "Disable rule '{name}'",
  "rule_status_updated": "✅ Rule '{name}' is now {status}",
  "failed_get_rule_settings": "❌ Failed to get current rule settings for '{name}'",
  "confirm_delete_rule": "⚠️ Are you sure you want to delete rule '{name}'? (y/N): ",
  "delete_rule_operation": "Delete rule '{name}'",
  "rule_deleted_success": "✅ Rule '{name}' deleted successfully",
  "rule_deletion_cancelled": "❌ Rule deletion cancelled",
  "management_cancelled": "↩️ Management cancelled",
  "test_rule_title": "Test IoT Rule",
  "test_learning_objectives": "🎓 Learning Objectives:",
  "test_objective_1": "• Test rule topic matching and WHERE conditions",
  "test_objective_2": "• Understand message routing behavior",
  "test_objective_3": "• Practice with matching and non-matching messages",
  "test_objective_4": "• Observe real-time rule processing",
  "list_rules_for_testing": "List IoT Rules for testing",
  "no_rules_for_testing": "📋 No IoT Rules found",
  "create_rule_first": "💡 Create a rule first using option 3",
  "select_rule_test": "Select rule to test (1-{count}): ",
  "get_rule_details_testing": "Get rule details for testing",
  "testing_rule": "📋 Testing Rule: {name}",
  "sql_display": "📝 SQL: {sql}",
  "source_topic_pattern": "📥 Source Topic Pattern: {pattern}",
  "where_condition_display": "🔍 WHERE Condition: {condition}",
  "target_topics_display": "📤 Target Topics: {topics}",
  "finding_devices_certificates": "🔍 Finding devices with certificates...",
  "no_certificates_directory": "❌ No certificates directory found.",
  "run_certificate_manager": "💡 Run certificate_manager.py first to create certificates",
  "no_devices_certificates": "❌ No devices with certificates found.",
  "found_devices_certificates": "📋 Found {count} device(s) with certificates:",
  "using_device": "✅ Using device: {name}",
  "selected_device": "✅ Selected device: {name}",
  "select_device": "Select device (1-{count}): ",
  "invalid_device_selection": "❌ Invalid selection",
  "get_iot_endpoint": "Get IoT endpoint",
  "cannot_get_endpoint": "❌ Cannot get IoT endpoint. Testing requires MQTT connection.",
  "interactive_testing_title": "🧪 Interactive Rule Testing",
  "connecting_to_endpoint": "📡 Connecting to: {endpoint}",
  "using_device_info": "📱 Using device: {device}",
  "connecting_aws_iot": "🔌 Connecting to AWS IoT...",
  "connected_aws_iot": "✅ Connected to AWS IoT",
  "subscribed_target_topic": "📡 Subscribed to target topic: {topic}",
  "rule_testing_instructions": "🎯 Rule Testing Instructions:",
  "instruction_1": "• You'll be asked if each message should match the rule",
  "instruction_2": "• Topic matching: Does the topic fit the pattern?",
  "instruction_3": "• WHERE condition: Does the message content match the filter?",
  "instruction_4": "• Watch for rule output messages on target topics",
  "instruction_5": "• Type 'quit' to exit testing",
  "test_message_header": "🧪 Test Message #{count}",
  "topic_pattern_display": "📥 Topic Pattern: {pattern}",
  "no_specific_pattern": "No specific pattern",
  "should_match_topic": "Should this message MATCH the topic pattern? (y/N/quit): ",
  "generated_topic": "📡 Generated Topic: {topic}",
  "where_condition_label": "🔍 WHERE Condition: {condition}",
  "should_match_where": "Should this message MATCH the WHERE condition? (y/n): ",
  "test_message_display": "📝 Test Message:",
  "topic_label": "📡 Topic: {topic}",
  "payload_label": "💬 Payload: {payload}",
  "prediction_should_trigger": "🔮 Prediction: Rule SHOULD trigger",
  "prediction_should_not_trigger": "🔮 Prediction: Rule should NOT trigger",
  "publishing_test_message": "📤 Publishing test message...",
  "waiting_rule_processing": "⏳ Waiting 3 seconds for rule processing...",
  "expected_trigger_no_output": "⚠️ Expected rule to trigger but no output received",
  "unexpected_trigger": "⚠️ Rule triggered unexpectedly",
  "rule_triggered_expected": "✅ Rule triggered as expected!",
  "rule_correctly_not_triggered": "✅ Rule correctly did not trigger",
  "press_enter_next_test": "Press Enter to continue to next test...",
  "testing_error": "❌ Testing error: {error}",
  "disconnecting_aws_iot": "🔌 Disconnecting from AWS IoT...",
  "disconnected_aws_iot": "✅ Disconnected from AWS IoT",
  "rule_output_received": "🔔 RULE OUTPUT RECEIVED [{timestamp}]",
  "message_topic": "📤 Topic: {topic}",
  "message_content": "💬 Message: {message}",
  "rule_processed_forwarded": "✅ Rule '{name}' processed and forwarded the message!",
  "connection_interrupted": "⚠️ Connection interrupted: {error}",
  "connection_resumed": "✅ Connection resumed",
  "operation_failed": "❌ {operation} failed: {error}",
  "unexpected_error": "❌ Unexpected error: {error}",
  "interrupted_by_user": "🛑 Interrupted by user",
  "invalid_characters_clause": "Invalid characters in {clause_type} clause. Only alphanumeric characters, spaces, and basic operators are allowed.",
  "dangerous_pattern_detected": "Potentially dangerous pattern '{pattern}' detected in {clause_type} clause.",
  "invalid_characters_topic": "Invalid characters in topic pattern. Only alphanumeric characters, hyphens, underscores, forward slashes, and + wildcards are allowed.",
  "header_separator": "============================================================",
  "step_separator": "----------------------------------------------------",
  "rule_separator": "----------------------------------------"
}