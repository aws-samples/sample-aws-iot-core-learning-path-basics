{
  "title": "📡 AWS IoT MQTT over WebSocket Explorer",
  "separator": "============================================================",
  "description_intro": "Educational MQTT client using WebSocket connection with SigV4 authentication.",
  "debug_enabled": "🔍 DEBUG MODE ENABLED",
  "debug_features": [
    "• Enhanced API request/response logging",
    "• Full error details and tracebacks",
    "• Extended educational information"
  ],
  "tip": "💡 Tip: Use --debug or -d flag for enhanced API logging",
  "websocket_endpoint_discovery": "🌐 AWS IoT WebSocket Endpoint Discovery",
  "endpoint_type": "Endpoint Type: iot:Data-ATS (recommended)",
  "endpoint_url": "Endpoint URL",
  "port": "Port: 443 (HTTPS/WebSocket)",
  "protocol": "Protocol: MQTT over WebSocket with SigV4",
  "error_getting_endpoint": "❌ Error getting IoT endpoint:",
  "no_aws_credentials": "❌ No AWS credentials found",
  "credentials_help": "💡 Set credentials using one of these methods:",
  "credentials_methods": [
    "• AWS CLI: aws configure",
    "• Environment variables: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY",
    "• IAM roles (if running on EC2)"
  ],
  "aws_credentials_sigv4": "🔐 AWS Credentials for SigV4 Authentication",
  "access_key": "Access Key",
  "region": "Region",
  "session_token": "Session Token",
  "present": "Present",
  "not_present": "Not present",
  "error_getting_credentials": "❌ Error getting AWS credentials:",
  "connection_interrupted": "CONNECTION INTERRUPTED",
  "error": "Error",
  "timestamp": "Timestamp",
  "auto_reconnect": "Auto Reconnect: AWS IoT SDK will attempt to reconnect automatically",
  "connection_resumed": "CONNECTION RESUMED",
  "return_code": "Return Code",
  "session_present": "Session Present",
  "status": "Status: Connection restored successfully",
  "resubscribing_topics": "🔄 Re-subscribing to {} topics after reconnection...",
  "resubscribed_success": "✅ Re-subscribed to {} (QoS {})",
  "resubscribe_failed": "❌ Failed to re-subscribe to {}: {}",
  "incoming_message": "🔔 INCOMING MESSAGE #{} [{}]",
  "topic": "📥 Topic",
  "qos": "🏷️  QoS",
  "qos_descriptions": {
    "0": "At most once",
    "1": "At least once",
    "2": "Exactly once"
  },
  "payload_size": "📊 Payload Size",
  "transport": "🌐 Transport: WebSocket with SigV4",
  "flags": "🚩 Flags",
  "duplicate_flag": "🔄 DUPLICATE (retransmitted)",
  "retain_flag": "📌 RETAIN (stored by broker)",
  "mqtt5_properties": "🔧 MQTT5 Properties:",
  "content_type": "📄 Content-Type",
  "correlation_data": "🔗 Correlation-Data",
  "message_expiry": "⏰ Message-Expiry",
  "response_topic": "↩️  Response-Topic",
  "payload_format": "📝 Payload-Format",
  "user_properties": "🏷️  User-Properties",
  "message_payload": "💬 Message Payload:",
  "json_format": "📋 JSON Format:",
  "text_format": "📝 Text:",
  "message_encoding_error": "❌ Message encoding error:",
  "json_parsing_error": "❌ JSON parsing error in message:",
  "message_attribute_error": "❌ Message attribute error:",
  "unexpected_message_error": "❌ Unexpected error processing received message:",
  "establishing_connection": "Establishing MQTT over WebSocket Connection",
  "websocket_connection_params": "🔗 WebSocket Connection Parameters:",
  "client_id": "Client ID",
  "endpoint": "Endpoint",
  "port_443": "Port: 443",
  "protocol_mqtt311": "Protocol: MQTT 3.1.1 over WebSocket",
  "authentication": "Authentication: AWS SigV4",
  "connecting_websocket": "🔄 Connecting to AWS IoT Core via WebSocket...",
  "websocket_connection_established": "WEBSOCKET CONNECTION ESTABLISHED",
  "connection_status": "Status: Successfully connected to AWS IoT Core",
  "transport_websocket": "Transport: WebSocket over HTTPS (port 443)",
  "clean_session": "Clean Session: True",
  "keep_alive": "Keep Alive: 30 seconds",
  "tls_version": "TLS Version: 1.2",
  "websocket_connection_failed": "❌ WebSocket connection failed:",
  "not_connected": "❌ Not connected to AWS IoT Core",
  "subscribing_topic_websocket": "📥 Subscribing to Topic (WebSocket)",
  "websocket_subscription_established": "WEBSOCKET SUBSCRIPTION ESTABLISHED",
  "qos_requested": "QoS Requested",
  "qos_granted": "QoS Granted",
  "packet_id": "Packet ID",
  "wildcard_support": "Wildcard Support: AWS IoT supports + (single level) and # (multi level)",
  "websocket_subscription_failed": "❌ WebSocket subscription failed:",
  "detailed_error_info": "🔍 Detailed Error Information:",
  "error_type": "Error Type",
  "error_message": "Error Message",
  "troubleshooting_timeout": "💡 Troubleshooting: WebSocket subscription timeout",
  "timeout_causes": [
    "• WebSocket connection may be unstable",
    "• Network connectivity issues",
    "• AWS IoT endpoint may be unreachable"
  ],
  "troubleshooting_auth": "💡 Troubleshooting: Authorization failed",
  "auth_causes": [
    "• AWS credentials may be invalid or expired",
    "• IAM policy may not allow 'iot:Subscribe' action",
    "• Check IAM user/role permissions"
  ],
  "troubleshooting_invalid_topic": "💡 Troubleshooting: Invalid topic format",
  "invalid_topic_causes": [
    "• Topics cannot start with '/' or '$' (unless AWS reserved)",
    "• Use alphanumeric characters, hyphens, and forward slashes",
    "• Maximum topic length is 256 characters"
  ],
  "troubleshooting_connection": "💡 Troubleshooting: Connection issue",
  "connection_causes": [
    "• WebSocket connection may have been lost",
    "• AWS credentials may be invalid",
    "• Endpoint URL may be incorrect"
  ],
  "troubleshooting_unknown": "💡 Troubleshooting: Unknown subscription failure",
  "unknown_causes": [
    "• Run 'debug {}' command for detailed diagnostics",
    "• Check AWS IoT logs in CloudWatch if enabled"
  ],
  "publishing_message_websocket": "📤 Publishing Message (WebSocket)",
  "published_websocket": "✅ [{}] PUBLISHED via WebSocket",
  "delivery_ack_required": "🔄 Delivery: Acknowledgment required (QoS {})",
  "delivery_fire_forget": "🚀 Delivery: Fire-and-forget (QoS 0)",
  "websocket_publish_failed": "❌ WebSocket publish failed:",
  "troubleshooting_publish_timeout": "💡 Troubleshooting: WebSocket publish timeout",
  "troubleshooting_payload_large": "💡 Troubleshooting: Payload size limit exceeded",
  "payload_limit_info": [
    "• AWS IoT message size limit is 128 KB",
    "• Current payload size: {} bytes"
  ],
  "interactive_messaging": "Interactive MQTT over WebSocket Messaging",
  "mqtt_topic_guidelines": "💡 MQTT Topic Guidelines:",
  "topic_guidelines": [
    "• Use forward slashes for hierarchy: device/sensor/temperature",
    "• Avoid leading slashes: ❌ /device/data ✅ device/data",
    "• Keep topics descriptive and organized",
    "• AWS IoT reserved topics start with $aws/"
  ],
  "enter_subscribe_topic": "📥 Enter topic to subscribe to (or 'skip'): ",
  "qos_level_prompt": "QoS level (0=At most once, 1=At least once) [0]: ",
  "invalid_qos": "❌ Please enter 0 or 1",
  "subscription_failed_retry": "❌ Subscription failed, try again",
  "run_diagnostics": "Would you like to run connection diagnostics? (y/N): ",
  "topic_cannot_be_empty": "❌ Topic cannot be empty",
  "interactive_websocket_mode": "🎮 Interactive WebSocket MQTT Messaging Mode",
  "messages_appear_immediately": "💡 Messages will appear immediately when received on subscribed topics!",
  "commands": "Commands:",
  "command_list": [
    "• 'sub <topic>' - Subscribe to topic (QoS 0)",
    "• 'sub1 <topic>' - Subscribe to topic (QoS 1)",
    "• 'unsub <topic>' - Unsubscribe from topic",
    "• 'pub <topic> <message>' - Publish message (QoS 0)",
    "• 'pub1 <topic> <message>' - Publish with QoS 1",
    "• 'json <topic> <key=value> [key=value...]' - Publish JSON",
    "• 'props <topic> <message> [prop=value...]' - Publish with MQTT5 properties",
    "• 'test' - Send test message to subscribed topics",
    "• 'status' - Show connection and subscription status",
    "• 'messages' - Show message history",
    "• 'debug [topic]' - Show connection diagnostics and troubleshooting",
    "• 'clear' - Clear screen",
    "• 'help' - Show this help",
    "• 'quit' - Exit"
  ],
  "mqtt_ws_prompt": "📡 MQTT-WS> ",
  "invalid_command": "❌ Invalid command. Type 'help' for available commands.",
  "goodbye": "👋 Goodbye!",
  "connection_diagnostics": "🔍 Connection Diagnostics",
  "connection_status_label": "Connection Status",
  "connected": "Connected",
  "disconnected": "Disconnected",
  "subscriptions_count": "Active Subscriptions: {}",
  "no_subscriptions": "No active subscriptions",
  "subscription_details": "📋 Subscription Details:",
  "granted_qos": "Granted QoS",
  "subscribed_at": "Subscribed At",
  "message_history": "📊 Message History",
  "received_messages": "Received Messages: {}",
  "sent_messages": "Sent Messages: {}",
  "no_messages": "No messages yet",
  "recent_received": "📥 Recent Received Messages:",
  "recent_sent": "📤 Recent Sent Messages:",
  "direction": "Direction",
  "size": "Size",
  "clear_screen": "🧹 Screen cleared",
  "test_message_sent": "🧪 Test message sent to {} subscribed topic(s)",
  "no_subscribed_topics": "❌ No subscribed topics for test message",
  "unsubscribing_from": "📤 Unsubscribing from: {}",
  "unsubscribed_success": "✅ Unsubscribed from: {}",
  "unsubscribe_failed": "❌ Unsubscribe failed: {}",
  "not_subscribed_to": "❌ Not subscribed to: {}",
  "json_publish_format": "📋 JSON Publish Format: json <topic> key1=value1 key2=value2 ...",
  "json_publish_example": "Example: json sensors/temp temperature=25.5 humidity=60 location=room1",
  "invalid_json_format": "❌ Invalid JSON format. Use: key=value pairs",
  "props_publish_format": "🔧 MQTT5 Properties Format: props <topic> <message> [prop=value...]",
  "props_publish_example": "Example: props alerts/fire 'Fire detected!' content-type=text/plain expiry=300",
  "available_properties": "Available properties: content-type, correlation-data, expiry, response-topic",
  "invalid_props_format": "❌ Invalid properties format. Use: prop=value pairs",
  "unknown_mqtt5_property": "⚠️  Unknown MQTT5 property: {}",
  "bytes": "bytes",
  "client_id_prompt": "Enter custom Client ID (or press Enter for auto-generated): ",
  "client_id_auto_generated": "Auto-generated Client ID",
  "client_id_custom": "Custom Client ID",
  "client_id_invalid": "❌ Invalid Client ID. Must be 1-128 characters, alphanumeric, hyphens, underscores only.",
  "client_id_guidelines": "💡 Client ID Guidelines:",
  "client_id_rules": [
    "• Must be unique per connection",
    "• 1-128 characters allowed",
    "• Use alphanumeric, hyphens (-), and underscores (_)",
    "• Avoid spaces and special characters",
    "• Example: my-device-001, sensor_temp_01"
  ],
  "debug_full_error": "🔍 DEBUG: Full error response:",
  "debug_full_traceback": "🔍 DEBUG: Full traceback:",
  "debug_websocket_setup": "🔍 DEBUG: WebSocket Connection Setup",
  "debug_connection_result": "🔍 DEBUG: Connection result:",
  "debug_testing_stability": "🔍 DEBUG: Testing WebSocket connection stability...",
  "debug_connection_stable": "✅ WebSocket connection appears stable and ready for operations",
  "debug_connection_unstable": "⚠️  Connection established but may be unstable:",
  "debug_mqtt_websocket_subscribe": "🔍 DEBUG: MQTT WebSocket Subscribe Operation",
  "debug_connection_status": "Connection Status",
  "debug_connection_object": "Connection Object",
  "debug_topic_pattern": "Topic Pattern",
  "debug_requested_qos": "Requested QoS",
  "debug_converted_qos": "🔍 DEBUG: Converted QoS:",
  "debug_callback_function": "🔍 DEBUG: Callback function:",
  "debug_subscribe_sent": "🔍 DEBUG: Subscribe request sent, waiting for response...",
  "debug_subscribe_result": "🔍 DEBUG: Subscribe result received:",
  "debug_result": "Result",
  "debug_result_type": "Result type",
  "debug_websocket_publish": "🔍 DEBUG: WebSocket Publish parameters:",
  "debug_payload_length": "Payload length",
  "mqtt_version_selection": "🔧 MQTT Version Selection:",
  "mqtt311_description": "Standard, widely supported",
  "mqtt5_description": "Enhanced features, properties support",
  "select_mqtt_version": "Select MQTT version (1-2): ",
  "selected_mqtt311": "✅ Selected MQTT 3.1.1",
  "selected_mqtt5": "✅ Selected MQTT 5.0",
  "invalid_mqtt_version": "❌ Invalid selection. Please select 1 or 2.",
  "mqtt_version_label": "MQTT Version",
  "falling_back_mqtt311": "🔄 Falling back to MQTT 3.1.1",
  "operation_cancelled": "🛑 Operation cancelled",
  "protocol_label": "Protocol"
}