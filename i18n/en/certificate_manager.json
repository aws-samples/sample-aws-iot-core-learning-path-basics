{
  "title": "🔐 AWS IoT Certificate & Policy Manager",
  "separator": "==================================================",
  "aws_config": "📍 AWS Configuration:",
  "account_id": "Account ID",
  "region": "Region",
  "aws_context_error": "⚠️ Could not retrieve AWS context:",
  "aws_credentials_reminder": "   Make sure AWS credentials are configured",
  "description_intro": "This script teaches you AWS IoT security concepts:",
  "security_concepts": [
    "• X.509 certificates for device authentication",
    "• Certificate-to-Thing attachment",
    "• IoT policies for authorization",
    "• Policy attachment and detachment",
    "• External certificate registration",
    "• Complete API details for each operation"
  ],
  "debug_enabled": "🔍 DEBUG MODE ENABLED",
  "debug_features": [
    "• Enhanced API request/response logging",
    "• Full error details and tracebacks",
    "• Extended educational information"
  ],
  "tip": "💡 Tip: Use --debug or -d flag for enhanced API logging",
  "client_initialized": "✅ AWS IoT client initialized",
  "client_error": "❌ Error initializing AWS IoT client:",
  "no_region_error": "❌ AWS region not configured",
  "region_setup_instructions": [
    "Please configure your AWS region using one of these methods:",
    "1. Set environment variable: export AWS_DEFAULT_REGION=us-east-1",
    "2. Configure AWS CLI: aws configure",
    "3. Set region in AWS credentials file"
  ],
  "invalid_credentials": "❌ Invalid AWS credentials",
  "credentials_check_failed": "❌ Missing required environment variables:",
  "credentials_instructions": [
    "Please export your AWS credentials:",
    "export AWS_ACCESS_KEY_ID=<your-access-key>",
    "export AWS_SECRET_ACCESS_KEY=<your-secret-key>",
    "export AWS_SESSION_TOKEN=<your-session-token>  # Optional for temporary credentials"
  ],
  "press_enter": "Press Enter to continue...",
  "goodbye": "👋 Goodbye!",
  "main_menu": "📋 Main Menu:",
  "menu_options": [
    "1. Create AWS IoT Certificate & Attach to Thing (+ Optional Policy)",
    "2. Register External Certificate & Attach to Thing (+ Optional Policy)",
    "3. Attach Policy to Existing Certificate",
    "4. Detach Policy from Certificate",
    "5. Enable/Disable Certificate",
    "6. Exit"
  ],
  "select_option": "Select option (1-6): ",
  "invalid_choice": "❌ Invalid choice. Please select 1-6.",
  "learning_moments": {
    "security_foundation": {
      "title": "📚 LEARNING MOMENT: IoT Security Foundation",
      "content": "AWS IoT security is built on X.509 certificates for device authentication and IoT policies for authorization. Certificates uniquely identify devices, while policies define what actions devices can perform. Understanding this security model is crucial for building secure IoT solutions.",
      "next": "We will explore certificate and policy management operations"
    },
    "certificate_creation": {
      "title": "📚 LEARNING MOMENT: Certificate Creation & Thing Attachment",
      "content": "Creating an AWS IoT certificate establishes a unique digital identity for your device. The certificate contains a public key that AWS IoT uses to authenticate the device, while the private key stays securely on the device. Attaching the certificate to a Thing creates the binding between the device identity and its logical representation in AWS IoT.",
      "next": "We will create a certificate and attach it to a Thing"
    },
    "external_registration": {
      "title": "📚 LEARNING MOMENT: External Certificate Registration",
      "content": "Sometimes you need to use certificates from your own Certificate Authority (CA) or existing PKI infrastructure. AWS IoT allows you to register external certificates, giving you flexibility in certificate management while maintaining security. This is useful for organizations with established certificate policies.",
      "next": "We will register an external certificate with AWS IoT"
    },
    "policy_attachment": {
      "title": "📚 LEARNING MOMENT: Policy Attachment for Authorization",
      "content": "While certificates handle authentication (who you are), IoT policies handle authorization (what you can do). Policies define which MQTT topics a device can publish to, subscribe to, and what AWS IoT operations it can perform. Attaching policies to certificates grants specific permissions to devices.",
      "next": "We will attach a policy to an existing certificate"
    },
    "policy_detachment": {
      "title": "📚 LEARNING MOMENT: Policy Detachment for Permission Management",
      "content": "Sometimes you need to remove specific permissions from a device without deleting the entire certificate. Policy detachment allows you to revoke specific permissions while keeping the device's identity intact. This is useful for changing device roles, troubleshooting permission issues, or implementing security policies.",
      "next": "We will detach a policy from a certificate"
    },
    "certificate_lifecycle": {
      "title": "📚 LEARNING MOMENT: Certificate Lifecycle Management",
      "content": "Certificate status controls whether a device can connect to AWS IoT. ACTIVE certificates allow connections, while INACTIVE certificates block them. This provides immediate security control - you can instantly disable compromised devices or temporarily suspend access without deleting the certificate entirely.",
      "next": "We will manage certificate status (enable/disable)"
    }
  },
  "workflow_titles": {
    "certificate_creation": "🔐 Certificate Creation Workflow",
    "external_registration": "📜 External Certificate Registration Workflow",
    "policy_attachment": "🔗 Policy Attachment Workflow",
    "policy_detachment": "🔓 Policy Detachment Workflow",
    "certificate_status": "🔄 Certificate Status Management"
  },
  "aws_context_info": "🌍 AWS Context Information:",
  "account_id_label": "Account ID",
  "region_label": "Region",
  "aws_context_error_msg": "⚠️ Could not retrieve AWS context:",
  "aws_credentials_config": "   Make sure AWS credentials are configured",
  "policy_to_be_created": "📄 Policy to be created:",
  "policy_name_label": "Name",
  "policy_document_label": "Document",
  "security_warning": "⚠️  SECURITY WARNING:",
  "security_warning_details": [
    "   This policy uses broad permissions for demonstration purposes.",
    "   In production environments:",
    "   • Use specific resource ARNs instead of '*'",
    "   • Add condition statements (IP restrictions, time-based access)",
    "   • Use policy variables like ${iot:Connection.Thing.ThingName}, not yet in scope for this basic learning session"
  ],
  "policy_validation_issues": "🔍 Policy Validation Issues:",
  "certificate_details": "📋 Certificate Details:",
  "certificate_id_label": "Certificate ID",
  "certificate_arn_label": "Certificate ARN",
  "status_active": "Status: ACTIVE",
  "certificate_files_saved": "💾 Certificate files saved to:",
  "certificate_components_created": "🔑 Certificate Components Created:",
  "certificate_components_list": [
    "   • Public Key (for AWS IoT)",
    "   • Private Key (keep secure on device)",
    "   • Certificate PEM (for device authentication)"
  ],
  "thing_already_has_certificates": "⚠️  Thing '{}' already has {} certificate(s) attached:",
  "certificate_id_item": "   {}. Certificate ID: {}",
  "remove_existing_certificates": "Would you like to remove existing certificates? (y/N): ",
  "proceeding_with_multiple": "Proceeding with multiple certificates attached to the same Thing...",
  "attaching_certificate_to_thing": "🔗 Attaching certificate to Thing: {}",
  "policy_options": "📝 Policy Options:",
  "use_existing_policy": "1. Use existing policy",
  "create_new_policy": "2. Create new policy",
  "select_option_1_2": "Select option (1-2): ",
  "invalid_selection_generic": "❌ Invalid selection",
  "enter_valid_number_generic": "❌ Please enter a valid number",
  "select_1_or_2": "❌ Please select 1 or 2",
  "no_existing_policies": "📝 No existing policies found. Creating new policy...",
  "error_listing_policies": "⚠️  Error listing policies:",
  "proceeding_create_new": "Proceeding to create new policy...",
  "enter_new_policy_name": "Enter new policy name: ",
  "policy_name_required": "❌ Policy name is required",
  "policy_already_exists": "⚠️  Policy '{}' already exists",
  "use_different_name": "Would you like to use a different name? (y/N): ",
  "policy_templates": "📝 Policy Templates:",
  "basic_device_policy": "1. Basic Device Policy (connect, publish, subscribe)",
  "readonly_policy": "2. Read-Only Policy (connect, subscribe only)",
  "custom_policy": "3. Custom Policy (enter your own JSON)",
  "select_template_1_3": "Select template (1-3): ",
  "select_1_2_or_3": "❌ Please select 1, 2, or 3",
  "certificate_options": "📋 Certificate Options:",
  "use_existing_cert_file": "1. Use existing certificate file",
  "generate_sample_cert": "2. Generate sample certificate with OpenSSL",
  "invalid_choice_1_2": "❌ Invalid choice. Please select 1-2.",
  "cert_must_be_pem": "Certificate must be in PEM format (.crt or .pem file)",
  "what_happened": "🔄 What happened:",
  "what_happened_steps": [
    "   1. AWS IoT validated your certificate format",
    "   2. Self-signed certificate registered without CA requirement",
    "   3. Certificate status set to ACTIVE",
    "   4. AWS assigned unique Certificate ID and ARN",
    "   5. Certificate is now ready for Thing attachment"
  ],
  "key_difference": "💡 Key Difference:",
  "cleanup_certificate": "🧹 Cleaning up certificate {}...",
  "error_detaching_policies": "❌ Error detaching policies:",
  "removed_local_file": "🗑️  Removed local file:",
  "certificate_cleaned_up": "✅ Certificate {} cleaned up successfully",
  "error_checking_certificates": "❌ Error checking existing certificates:",
  "skipping_file_cleanup": "⚠️ Skipping file cleanup - invalid thing_name:",
  "fetching_things": "ℹ️ Fetching available Things...",
  "available_things": "📱 Available Things ({} found):",
  "and_more": "... and {} more",
  "options_header": "📋 Options:",
  "select_thing_options": [
    "• Enter number (1-{}) to select Thing",
    "• Type 'all' to see all Things",
    "• Type 'manual' to enter Thing name manually"
  ],
  "your_choice": "Your choice: ",
  "all_things": "📱 All Things:",
  "press_enter_continue": "Press Enter to continue...",
  "enter_thing_name": "Enter Thing name: ",
  "invalid_thing_name": "❌ Invalid Thing name. Only alphanumeric characters, hyphens, and underscores allowed.",
  "thing_found": "✅ Thing '{}' found",
  "thing_not_found": "❌ Thing '{}' not found",
  "thing_name_empty": "❌ Thing name cannot be empty",
  "selected_thing": "✅ Selected Thing: {}",
  "invalid_selection": "❌ Invalid selection",
  "enter_valid_number": "❌ Please enter a valid number",
  "enter_number_all_manual": "❌ Please enter a valid number, 'all', or 'manual'",
  "no_things_found": "❌ No Things found. Please run setup_sample_data.py first",
  "error_listing_things": "❌ Error listing Things:",
  "key_difference_details": [
    "   • Used register_certificate_without_ca API",
    "   • No Certificate Authority (CA) registration required"
  ],
  "cert_must_be_pem_info": "Certificate must be in PEM format (.crt or .pem file)",
  "validating_cert_format": "Validating certificate file format...",
  "choose_cert_provision": "Choose how to provide your X.509 certificate:",
  "pem_format_starts_with": "PEM format starts with '-----BEGIN CERTIFICATE-----'",
  "learning_objectives": "🎓 Learning Objectives:",
  "external_cert_objectives": [
    "• Understand difference between AWS-generated vs external certificates",
    "• Learn certificate registration process",
    "• Practice certificate validation and attachment",
    "• Explore register_certificate API"
  ],
  "select_option_1_2_prompt": "Select option (1-2): ",
  "no_things_found_run_setup": "❌ No Things found. Please run setup_sample_data.py first",
  "options_header_simple": "📋 Options:",
  "enter_number_select_thing": "• Enter number (1-{}) to select Thing",
  "type_all_see_things": "• Type 'all' to see all Things",
  "type_manual_enter_name": "• Type 'manual' to enter Thing name manually",
  "all_things_header": "📱 All Things:",
  "invalid_thing_name_chars": "❌ Invalid Thing name. Only alphanumeric characters, hyphens, and underscores allowed.",
  "thing_name_cannot_be_empty": "❌ Thing name cannot be empty",
  "policy_creation_cancelled": "Policy creation cancelled for security reasons",
  "enter_policy_json": "Enter your policy JSON (press Enter twice when done):",
  "policy_to_be_created_header": "📄 Policy to be created:",
  "available_policies": "📋 Available Policies:",
  "invalid_selection_simple": "❌ Invalid selection",
  "enter_valid_number_simple": "❌ Please enter a valid number",
  "no_policies_found_create": "❌ No policies found. Creating one first...",
  "api_details_header": "🔍 API Details:",
  "operation_label": "Operation",
  "http_method_label": "HTTP Method",
  "certificate_status_management": "🔄 Certificate Status Management",
  "learning_objectives_header": "🎓 Learning Objectives:",
  "cert_lifecycle_objectives": [
    "• Understand certificate lifecycle management",
    "• Learn enable/disable operations",
    "• Practice certificate status control",
    "• Explore update_certificate API"
  ],
  "fetching_all_certificates": "🔍 Fetching all certificates...",
  "failed_to_list_certificates": "❌ Failed to list certificates",
  "no_certificates_found": "📋 No certificates found in your account",
  "create_certificates_first": "💡 Create certificates first using options 1 or 2",
  "invalid_selection_cert": "❌ Invalid selection",
  "enter_valid_number_cert": "❌ Please enter a valid number",
  "selected_certificate": "📝 Selected Certificate:",
  "certificate_id_short": "ID",
  "attached_to_thing": "Attached to Thing",
  "none_label": "None",
  "available_action": "🔄 Available Action:",
  "enable_certificate": "Enable certificate (set status to ACTIVE)",
  "disable_certificate": "Disable certificate (set status to INACTIVE)",
  "operation_cancelled": "❌ Operation cancelled",
  "certificate_action_success": "✅ Certificate {}d successfully!",
  "status_change_summary": "📊 Status Change Summary:",
  "new_status_label": "New Status",
  "what_this_means": "💡 What this means:",
  "active_cert_meanings": [
    "• Certificate can now be used for device authentication",
    "• Devices with this certificate can connect to AWS IoT",
    "• MQTT connections using this certificate will succeed"
  ],
  "inactive_cert_meanings": [
    "• Certificate is now disabled for authentication",
    "• Devices with this certificate cannot connect to AWS IoT",
    "• MQTT connections using this certificate will fail"
  ],
  "next_steps": "🔍 Next Steps:",
  "next_steps_list": [
    "• Use iot_registry_explorer.py to verify the status change",
    "• Test MQTT connection to see the effect"
  ],
  "reenable_when_ready": "• Re-enable when ready to restore device connectivity",
  "failed_to_action_cert": "❌ Failed to {} certificate",
  "policy_attachment_workflow": "🔗 Policy Attachment Workflow",
  "no_certificates_for_thing": "❌ No certificates found for Thing '{}'",
  "tip_run_option_1": "💡 Tip: Run option 1 first to create and attach a certificate",
  "using_certificate": "✅ Using certificate: {}",
  "multiple_certificates_found": "📋 Multiple certificates found:",
  "certificate_successfully_attached": "✅ Certificate successfully attached to {}",
  "thing_can_use_cert": "The Thing can now use this certificate for authentication",
  "certificate_generated_successfully": "✅ Certificate generated successfully",
  "certificate_details_header": "📊 Certificate Details:",
  "cert_type_self_signed": "• Type: Self-signed X.509",
  "cert_algorithm": "• Algorithm: RSA 2048-bit",
  "cert_validity": "• Validity: 365 days",
  "cert_usage": "• Usage: Device authentication only",
  "cert_location": "• Location: {}",
  "proceed_with_policy_warnings": "Proceed with this policy despite security warnings? (y/N): ",
  "confirm_action": "Confirm {} certificate? (y/N): ",
  "available_things_count": "📱 Available Things ({} found):",
  "selected_thing_prefix": "✅ Selected Thing: {}",
  "thing_found_check": "✅ Thing '{}' found",
  "thing_not_found_check": "❌ Thing '{}' not found",
  "learning_moment_cert_process": "📚 LEARNING MOMENT: Certificate Creation Process",
  "cert_creation_explanation": "We will now create an X.509 certificate using AWS IoT's certificate authority. This generates a unique public/private key pair where AWS keeps the public key and provides you with both the certificate and private key for your device.",
  "next_creating_cert": "🔄 NEXT: Creating certificate with AWS IoT",
  "found_existing_policies": "📋 Found {} existing policies:",
  "api_response_found_certs": "📤 API Response: Found {} certificate(s)",
  "found_certificates_count": "📋 Found {} certificate(s):",
  "no_certificates_for_thing_msg": "❌ No certificates found for Thing '{}'",
  "tip_run_option_1_msg": "💡 Tip: Run option 1 first to create and attach a certificate",
  "using_certificate_msg": "✅ Using certificate: {}",
  "multiple_certificates_found_msg": "📋 Multiple certificates found:",
  "no_policies_found_account": "📋 No policies found in your account",
  "create_policies_first": "💡 Create policies first using options 1, 2, or 3",
  "found_policies_count": "📋 Found {} policy(ies):",
  "no_certs_with_policy": "📋 No certificates found with policy '{}' attached",
  "policy_not_attached": "💡 This policy is not currently attached to any certificates",
  "found_certs_with_policy": "📋 Found {} certificate(s) with this policy:",
  "openssl_not_found": "❌ OpenSSL not found. Please install OpenSSL:",
  "install_openssl_macos": "   macOS: brew install openssl",
  "install_openssl_ubuntu": "   Ubuntu: sudo apt-get install openssl",
  "file_not_found": "❌ File not found: {}",
  "multiple_certs_warning": "⚠️  Multiple certificates found. Only the first will be used.",
  "cert_format_validated": "✅ Certificate file format validated",
  "cert_file_not_found": "❌ Certificate file not found",
  "found_private_key": "🔍 Found corresponding private key: {}",
  "private_key_saved": "🔑 Private key saved: {}",
  "private_key_not_found": "⚠️  Private key not found at: {}",
  "enter_key_path": "Enter path to private key file (or press Enter to skip): ",
  "key_file_not_found": "❌ Key file not found: {}",
  "private_key_not_saved": "⚠️  Private key not saved - MQTT client may not work",
  "key_within_working_dir": "⚠️ Key file must be within current working directory",
  "external_cert_registration_moment": "📚 LEARNING MOMENT: External Certificate Registration",
  "external_cert_explanation": "We will now register your external certificate with AWS IoT. Unlike AWS-generated certificates, this process registers your existing certificate without AWS creating new keys. Your private key remains under your control while AWS validates and registers the public certificate.",
  "next_registering_cert": "🔄 NEXT: Registering certificate with AWS IoT",
  "step_creating_certificate": "Creating X.509 Certificate",
  "step_attaching_certificate": "Attaching Certificate to Thing",
  "step_policy_management": "IoT Policy Management",
  "step_attaching_policy": "Attaching Policy to Certificate",
  "certificates_for_auth": "X.509 certificates are used for device authentication in AWS IoT",
  "cert_contains_keypair": "Each certificate contains a public/private key pair",
  "api_description_create_cert": "Creates a new X.509 certificate with public/private key pair",
  "input_params_set_active": "setAsActive: true (activates certificate immediately)",
  "expected_output_cert": "certificateArn, certificateId, certificatePem, keyPair (public/private keys)",
  "learning_moment_cert_attachment": "📚 LEARNING MOMENT: Certificate-Thing Attachment",
  "cert_attachment_explanation": "Now we'll attach the certificate to your selected Thing. This creates the secure binding between the certificate identity and the logical device representation in AWS IoT. Once attached, the device can use this certificate to authenticate with AWS IoT Core.",
  "next_attaching_cert": "🔄 NEXT: Attaching certificate to Thing",
  "press_enter_continue_generic": "Press Enter to continue...",
  "api_path_label": "API Path",
  "description_label": "Description",
  "input_parameters_label": "Input Parameters",
  "expected_output_label": "Expected Output",
  "creating_cert_keypair": "Creating certificate and key pair...",
  "cert_keypair_completed": "Creating certificate and key pair completed successfully",
  "attaching_cert_to_thing": "Attaching certificate to Thing...",
  "cert_attachment_completed": "Attaching certificate to Thing completed successfully",
  "iot_policies_define_actions": "IoT Policies define what actions a certificate can perform",
  "create_new_or_existing": "You can create a new policy or use an existing one",
  "policy_attachment_explanation": "Policy attachment grants specific permissions to certificates",
  "cert_now_has_permissions": "Certificate now has the permissions defined in the policy",
  "operation_completed_successfully": "{} completed successfully",
  "operation_completed": "{} completed",
  "output_label": "Output",
  "api_description_attach_thing": "Attaches a certificate (principal) to a Thing for authentication",
  "empty_response_success": "Empty response on success",
  "attaching_cert_to_thing_name": "Attaching certificate to {}",
  "policies_must_be_attached": "Policies must be attached to certificates to grant permissions",
  "without_policy_no_operations": "Without a policy, the certificate cannot perform any IoT operations",
  "certs_must_be_attached": "Certificates must be attached to Things for device authentication",
  "creates_secure_relationship": "This creates a secure relationship between the certificate and the IoT device",
  "cert_will_be_attached": "Certificate will be attached to: {}",
  "would_like_create_policy": "Would you like to create and attach a policy? (y/N): ",
  "creates_self_signed_cert": "This creates a self-signed certificate for learning purposes",
  "production_use_trusted_ca": "In production, use certificates from a trusted Certificate Authority",
  "registering_external_cert": "Registering external certificate with AWS IoT...",
  "registers_without_new_keys": "This registers your certificate without AWS generating new keys",
  "private_key_stays_with_you": "Your private key stays with you - AWS only gets the public certificate",
  "proceed_despite_warnings": "Proceed with this policy despite security warnings? (y/N): ",
  "do_you_want_to_action_cert": "Do you want to {} this certificate? (y/N): ",
  "detach_policy_from_cert": "Detach policy '{}' from this certificate? (y/N): ",
  "attach_existing_policy": "Would you like to attach an existing policy? (y/N): ",
  "continue_anyway": "Continue anyway? (y/N): ",
  "warning_no_crt_pem": "⚠️  Warning: File doesn't have .crt or .pem extension",
  "certificate_file_label": "Certificate",
  "private_key_file_label": "Private Key",
  "public_key_file_label": "Public Key",
  "press_enter_continue_simple": "Press Enter to continue...",
  "invalid_selection_enter_range": "❌ Invalid selection. Please enter 1-{}",
  "enter_valid_number_all_manual": "❌ Please enter a valid number, 'all', or 'manual'",
  "selected_existing_policy": "✅ Selected existing policy: {}",
  "using_existing_policy": "✅ Using existing policy: {}",
  "policy_name_available": "✅ Policy name '{}' is available",
  "error_checking_policy": "❌ Error checking policy: {}",
  "select_policy_template": "Select policy template (1-3): ",
  "invalid_json_error": "❌ Invalid JSON: {}",
  "name_label_simple": "Name",
  "document_label_simple": "Document",
  "error_listing_policies_simple": "❌ Error listing policies: {}",
  "certificate_id_simple": "Certificate ID",
  "error_simple": "❌ Error: {}",
  "invalid_selection_simple_msg": "❌ Invalid selection",
  "enter_valid_number_simple_msg": "❌ Please enter a valid number",
  "current_status_label": "Current Status",
  "arn_label": "ARN",
  "operation_cancelled_simple": "❌ Operation cancelled",
  "previous_status_label": "Previous Status",
  "new_status_label_simple": "New Status",
  "what_this_means_simple": "💡 What this means:",
  "cert_can_be_used_auth": "• Certificate can now be used for device authentication",
  "devices_can_connect": "• Devices with this certificate can connect to AWS IoT",
  "mqtt_connections_succeed": "• MQTT connections using this certificate will succeed",
  "cert_disabled_auth": "• Certificate is now disabled for authentication",
  "devices_cannot_connect": "• Devices with this certificate cannot connect to AWS IoT",
  "mqtt_connections_fail": "• MQTT connections using this certificate will fail",
  "next_steps_simple": "🔍 Next Steps:",
  "use_registry_explorer": "• Use iot_registry_explorer.py to verify the status change",
  "test_mqtt_connection": "• Test MQTT connection to see the effect",
  "reenable_when_ready_simple": "• Re-enable when ready to restore device connectivity",
  "failed_to_action_certificate": "❌ Failed to {} certificate",
  "policy_attachment_workflow_title": "🔗 Policy Attachment Workflow",
  "checking_certificates_for_thing": "🔍 Checking certificates for Thing: {}",
  "select_certificate_prompt": "Select certificate (1-{}): ",
  "enter_cert_name_default": "\nEnter certificate name [default: sample-device]: ",
  "enter_cert_path": "\nEnter path to certificate file: ",
  "cert_path_required": "❌ Certificate path is required",
  "failed_to_list_policies": "❌ Failed to list policies",
  "failed_to_list_policy_targets": "❌ Failed to list policy targets",
  "failed_to_detach_policy": "❌ Failed to detach policy",
  "failed_to_create_certificate": "❌ Failed to create certificate. Exiting.",
  "failed_to_attach_certificate": "❌ Failed to attach certificate to Thing. Exiting.",
  "cert_name_invalid_chars": "❌ Certificate name can only contain letters, numbers, hyphens, and underscores",
  "invalid_cert_format_start": "❌ Invalid certificate format. Must be PEM format starting with '-----BEGIN CERTIFICATE-----'",
  "tip_convert_der_to_pem": "💡 Tip: Convert DER to PEM using: openssl x509 -inform DER -outform PEM -in cert.der -out cert.pem",
  "invalid_cert_format_end": "❌ Invalid certificate format. Must end with '-----END CERTIFICATE-----'",
  "permission_denied_cert": "❌ Permission denied reading certificate file",
  "cert_encoding_error": "❌ Certificate file encoding error - file may be binary",
  "cert_file_required": "❌ Certificate file required. Exiting workflow.",
  "cert_validation_failed": "❌ Certificate validation failed. Exiting workflow.",
  "thing_selection_required": "❌ Thing selection required. Exiting workflow.",
  "cert_registration_failed": "❌ Certificate registration failed. Exiting workflow.",
  "skipping_file_save_invalid_name": "⚠️ Skipping file save due to invalid thing name: {}",
  "cert_registered_files_not_saved": "❌ Certificate registered but local files not saved due to security validation.",
  "cert_attachment_failed": "❌ Certificate attachment failed. Exiting workflow.",
  "policy_detachment_workflow": "🔓 Policy Detachment Workflow",
  "learning_objectives_header_simple": "🎓 Learning Objectives:",
  "understand_policy_detachment": "• Understand policy detachment process",
  "learn_find_devices_by_policy": "• Learn to find devices by policy",
  "practice_cert_policy_mgmt": "• Practice certificate-policy relationship management",
  "explore_detach_policy_api": "• Explore detach_policy API",
  "fetching_all_policies": "🔍 Fetching all policies...",
  "detachment_summary": "📝 Detachment Summary:",
  "policy_label_simple": "Policy",
  "policy_detached_successfully": "✅ Policy detached successfully!",
  "detachment_results": "📊 Detachment Results:",
  "policy_removed_from_cert": "Policy '{}' removed from certificate {}",
  "thing_cert_no_longer_has_policy": "Thing '{}' certificate no longer has this policy",
  "what_this_means_detach": "💡 What this means:",
  "cert_no_longer_perform_actions": "• Certificate can no longer perform actions defined in '{}'",
  "device_may_lose_permissions": "• Device may lose specific permissions (connect, publish, subscribe)",
  "other_policies_still_apply": "• Other policies attached to this certificate still apply",
  "policy_still_exists": "• Policy still exists and can be attached to other certificates",
  "next_steps_detach": "🔍 Next Steps:",
  "use_registry_explorer_verify": "• Use iot_registry_explorer.py to verify policy detachment",
  "test_device_connectivity": "• Test device connectivity to see permission changes",
  "attach_different_policy": "• Attach different policy if needed using option 3",
  "setup_complete": "Setup Complete! 🎉",
  "summary_created_configured": "📊 Summary of what was created/configured:",
  "certificate_source_label": "🏷️  Certificate Source",
  "attached_to_thing_label": "📱 Attached to Thing",
  "policy_attached_label": "📄 Policy Attached",
  "what_you_can_explore": "🔍 What you can explore now:",
  "use_registry_explorer_view": "• Use iot_registry_explorer.py to view the certificate",
  "check_thing_attached_cert": "• Check the Thing to see its attached certificate",
  "review_policy_permissions": "• Review the policy permissions",
  "compare_external_vs_aws": "• Compare external vs AWS-generated certificate workflows",
  "key_learning_points": "💡 Key Learning Points:",
  "certs_provide_device_identity": "• Certificates provide device identity and authentication",
  "things_represent_iot_devices": "• Things represent your IoT devices in AWS",
  "policies_define_actions": "• Policies define what actions certificates can perform",
  "external_certs_integrate_pki": "• External certificates integrate with existing PKI infrastructure",
  "register_vs_create_api": "• register_certificate API vs create_keys_and_certificate API",
  "all_components_work_together": "• All components work together for secure IoT communication",
  "generating_cert_files": "🔑 Generating certificate files:",
  "private_key_label": "Private Key",
  "certificate_label": "Certificate",
  "running_openssl_command": "🔄 Running OpenSSL command...",
  "command_label": "📥 Command",
  "certificate_information": "🔍 Certificate Information:",
  "windows_openssl_download": "   Windows: Download from https://slproweb.com/products/Win32OpenSSL.html",
  "cert_file_within_working_dir": "⚠️ Certificate file must be within current working directory",
  "cert_file_content_preview": "📥 Certificate file content preview:",
  "cert_validation_results": "📊 Certificate validation results:",
  "format_pem_check": "   • Format: PEM ✅",
  "certificate_count_label": "   • Certificate count",
  "file_size_label": "   • File size",
  "cert_registration_results": "📋 Certificate Registration Results:",
  "source_external": "   Source: External (user-provided)",
  "registration_method": "   Registration Method: register_certificate API",
  "perfect_for_self_signed": "   • Perfect for self-signed certificates and learning",
  "production_use_ca_signed": "   • Production systems typically use CA-signed certificates",
  "saving_cert_files_locally": "💾 Saving certificate files locally for MQTT client...",
  "key_file_within_working_dir": "⚠️ Key file must be within current working directory",
  "listing_all_certificates": "Listing all certificates",
  "no_thing_attached": "(No Thing attached)",
  "created_label": "Created",
  "unknown_label": "Unknown",
  "active_status": "ACTIVE",
  "inactive_status": "INACTIVE",
  "api_desc_create_keys_cert": "Creates a new X.509 certificate with public/private key pair",
  "api_input_set_active": "setAsActive: true (activates certificate immediately)",
  "api_output_cert_keypair": "certificateArn, certificateId, certificatePem, keyPair (public/private keys)",
  "api_desc_attach_thing_principal": "Attaches a certificate (principal) to a Thing for authentication",
  "api_output_empty_success": "Empty response on success",
  "api_desc_create_policy": "Creates an IoT policy with specified permissions",
  "api_input_policy_name_doc": "policyName, policyDocument (JSON permissions)",
  "api_output_policy_details": "policyName, policyArn, policyDocument, policyVersionId",
  "api_desc_attach_policy": "Attaches an IoT policy to a certificate for authorization",
  "api_input_policy_cert": "policyName, target (certificate ARN)",
  "api_desc_list_certificates": "Lists all certificates in the AWS account",
  "api_output_certificates_list": "certificates[] with certificateId, certificateArn, status, creationDate",
  "api_desc_update_certificate": "Updates certificate status (ACTIVE/INACTIVE)",
  "api_input_cert_id_status": "certificateId, newStatus",
  "api_desc_list_policies": "Lists all IoT policies in the AWS account",
  "api_output_policies_list": "policies[] with policyName, policyArn",
  "api_desc_list_targets_for_policy": "Lists all certificates that have a specific policy attached",
  "api_input_policy_name": "policyName",
  "api_output_target_arns": "targetArns[] (certificate ARNs)",
  "api_desc_detach_policy": "Detaches an IoT policy from a certificate",
  "api_desc_register_cert_without_ca": "Registers an external certificate with AWS IoT without CA verification",
  "api_input_optional_pagination": "None (optional: pageSize, marker, ascendingOrder)",
  "api_input_cert_pem_active": "certificatePem (the certificate in PEM format), setAsActive",
  "api_output_cert_arn_id": "certificateArn, certificateId",
  "debug_full_error": "🔍 DEBUG: Full error response:",
  "debug_full_traceback": "🔍 DEBUG: Full traceback:",
  "debug_client_config": "🔍 DEBUG: Client configuration:",
  "debug_session_complete": "🔍 DEBUG: Session completed with detailed API logging",
  "api_error": "❌ AWS API Error in",
  "missing_param_error": "❌ Missing required parameter in",
  "invalid_value_error": "❌ Invalid value in",
  "unexpected_error": "❌ Unexpected error in"
}