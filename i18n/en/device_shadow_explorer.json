{
    "title": "🌟 AWS IoT Device Shadow Explorer",
    "separator": "============================================================",
    "aws_context_info": "🌍 AWS Context Information:",
    "account_id": "Account ID",
    "region": "Region",
    "aws_context_error": "⚠️ Could not retrieve AWS context:",
    "aws_credentials_reminder": "   Make sure AWS credentials are configured",
    "description_intro": "This script teaches you AWS IoT Device Shadow concepts:",
    "shadow_concepts": [
        "• Device Shadow service for state synchronization",
        "• Shadow document structure (desired vs reported)",
        "• MQTT topics for shadow operations",
        "• Delta messages for state differences",
        "• Real-time shadow updates and notifications",
        "• Complete API details for each operation"
    ],
    "debug_enabled": "🔍 DEBUG MODE ENABLED",
    "debug_features": [
        "• Enhanced MQTT message logging",
        "• Full shadow document analysis",
        "• Extended educational information"
    ],
    "tip": "💡 Tip: Use --debug or -d flag for enhanced shadow logging",
    "press_enter": "Press Enter to continue...",
    "goodbye": "👋 Goodbye!",
    "main_menu": "📋 Device Shadow Operations:",
    "menu_options": [
        "1. Connect to Device & Subscribe to Shadow Topics",
        "2. Get Current Shadow Document",
        "3. Update Shadow Reported State (Device → Cloud)",
        "4. Update Shadow Desired State (Cloud → Device)",
        "5. Simulate Device State Changes",
        "6. View Shadow Message History",
        "7. Disconnect and Exit"
    ],
    "select_option": "Select option (1-7): ",
    "invalid_choice": "❌ Invalid choice. Please select 1-7.",
    "learning_moments": {
        "shadow_foundation": {
            "title": "📚 LEARNING MOMENT: Device Shadow Foundation",
            "content": "AWS IoT Device Shadow is a JSON document that stores and retrieves current state information for a device. The shadow acts as an intermediary between devices and applications, enabling reliable communication even when devices are offline. Understanding shadow concepts is essential for building robust IoT applications.",
            "next": "We will explore shadow operations and MQTT communication"
        },
        "shadow_connection": {
            "title": "📚 LEARNING MOMENT: Shadow MQTT Connection",
            "content": "Device Shadows use MQTT topics for communication. Each shadow operation (get, update, delete) has corresponding accepted/rejected response topics. Delta topics notify when desired state differs from reported state. This pub/sub model enables real-time, bidirectional communication between devices and applications.",
            "next": "We will establish MQTT connection and subscribe to shadow topics"
        },
        "shadow_document": {
            "title": "📚 LEARNING MOMENT: Shadow Document Structure",
            "content": "A shadow document contains 'desired' and 'reported' states. Desired state represents what the device should be, typically set by applications. Reported state represents the device's current state. When these differ, AWS IoT generates delta messages to notify the device of required changes.",
            "next": "We will retrieve and analyze the current shadow document"
        },
        "reported_state": {
            "title": "📚 LEARNING MOMENT: Reported State Updates",
            "content": "Devices update their reported state to inform the cloud of their current status. This is typically done after the device changes its physical state (temperature, status, etc.). Reported state updates help keep the shadow synchronized with the actual device state.",
            "next": "We will update the shadow's reported state from device"
        },
        "desired_state": {
            "title": "📚 LEARNING MOMENT: Desired State Updates",
            "content": "Applications set the desired state to request device changes. When desired state differs from reported state, AWS IoT sends delta messages to the device. This mechanism enables remote device control and configuration management through the cloud.",
            "next": "We will update the shadow's desired state from cloud"
        },
        "state_simulation": {
            "title": "📚 LEARNING MOMENT: Device State Simulation",
            "content": "Simulating device state changes helps understand the complete shadow workflow. We'll modify local device state and see how it propagates through the shadow service. This demonstrates the bidirectional nature of shadow communication and state synchronization.",
            "next": "We will simulate realistic device state changes"
        }
    },
    "workflow_titles": {
        "shadow_connection": "🔗 Shadow Connection Workflow",
        "shadow_retrieval": "📥 Shadow Document Retrieval",
        "reported_update": "📡 Reported State Update",
        "desired_update": "🎯 Desired State Update",
        "state_simulation": "🔄 Device State Simulation",
        "message_history": "📜 Shadow Message History"
    },
    "step_establishing_connection": "Establishing MQTT Connection for Shadow Operations",
    "step_subscribing_topics": "Subscribing to Shadow Topics",
    "step_requesting_shadow": "Requesting Shadow Document",
    "step_updating_reported": "Updating Reported State",
    "step_updating_desired": "Updating Desired State",
    "step_simulating_changes": "Simulating Device Changes",
    "shadow_connection_params": "🔗 Shadow Connection Parameters:",
    "client_id": "Client ID",
    "thing_name": "Thing Name",
    "endpoint": "Endpoint",
    "port": "Port",
    "protocol": "Protocol",
    "authentication": "Authentication",
    "shadow_type": "Shadow Type",
    "connecting_to_iot": "🔄 Connecting to AWS IoT Core...",
    "connection_established": "SHADOW CONNECTION ESTABLISHED",
    "connection_status": "Successfully connected to AWS IoT Core",
    "clean_session": "Clean Session",
    "keep_alive": "Keep Alive",
    "tls_version": "TLS Version",
    "certificate_auth": "Certificate Authentication",
    "shadow_connection_failed": "❌ Shadow connection failed:",
    "not_connected": "❌ Not connected to AWS IoT Core",
    "shadow_topics_for_thing": "🌟 Shadow Topics for Thing:",
    "classic_shadow_topics": "📋 Classic Shadow Topics:",
    "subscription_successful": "✅ Successfully subscribed to all {} shadow topics",
    "subscription_partial": "⚠️  Only {}/{} subscriptions successful",
    "shadow_topic_explanations": "📖 Shadow Topic Explanations:",
    "topic_get_accepted": "• get/accepted - Shadow document retrieval success",
    "topic_get_rejected": "• get/rejected - Shadow document retrieval failure",
    "topic_update_accepted": "• update/accepted - Shadow update success",
    "topic_update_rejected": "• update/rejected - Shadow update failure",
    "topic_update_delta": "• update/delta - Desired ≠ Reported (action needed)",
    "requesting_shadow_document": "📥 Requesting Shadow Document",
    "topic": "Topic",
    "thing": "Thing",
    "shadow_type_classic": "Classic",
    "shadow_get_request_sent": "✅ Shadow GET request sent",
    "qos": "QoS",
    "packet_id": "Packet ID",
    "waiting_for_response": "⏳ Waiting for response on get/accepted or get/rejected...",
    "failed_request_shadow": "❌ Failed to request shadow document:",
    "shadow_message_received": "🌟 SHADOW MESSAGE RECEIVED",
    "direction": "Direction",
    "received": "RECEIVED",
    "payload_size": "Payload Size",
    "timestamp": "Timestamp",
    "shadow_data": "Shadow Data",
    "error_processing_message": "❌ Error processing shadow message:",
    "shadow_get_accepted": "✅ SHADOW GET ACCEPTED",
    "shadow_document_retrieved": "📋 Shadow Document Retrieved:",
    "version": "Version",
    "desired_state": "Desired State",
    "reported_state": "Reported State",
    "none": "None",
    "shadow_get_rejected": "❌ SHADOW GET REJECTED",
    "error_code": "Error Code",
    "message": "Message",
    "shadow_doesnt_exist": "Shadow doesn't exist yet - will create one on next update",
    "checking_shadow_exists": "Checking if shadow exists for {}...",
    "shadow_creation_normal": "This is normal for new devices - we'll create the shadow by reporting initial state",
    "creating_initial_shadow": "Shadow doesn't exist yet. Creating initial shadow...",
    "initial_shadow_created": "Initial shadow created successfully!",
    "retrieving_new_shadow": "Retrieving newly created shadow...",
    "shadow_already_exists": "Shadow already exists",
    "shadow_update_accepted": "✅ SHADOW UPDATE ACCEPTED",
    "new_version": "New Version",
    "updated_desired": "Updated Desired",
    "updated_reported": "Updated Reported",
    "shadow_update_rejected": "❌ SHADOW UPDATE REJECTED",
    "shadow_delta_received": "🔄 SHADOW DELTA RECEIVED",
    "description": "Description",
    "desired_differs_reported": "Desired state differs from reported state",
    "changes_needed": "Changes Needed",
    "state_comparison": "🔍 State Comparison:",
    "local_state": "Local State",
    "delta": "Delta",
    "desired": "Desired",
    "differences_found": "⚠️  Differences Found:",
    "apply_changes_prompt": "Apply these changes to local device? (y/N): ",
    "local_state_updated": "✅ Local state updated successfully",
    "failed_update_local": "❌ Failed to update local state",
    "changes_not_applied": "⏭️  Changes not applied to local device",
    "local_matches_desired": "✅ Local state matches desired state - no changes needed",
    "automatically_reporting": "📡 Automatically reporting updated state to shadow...",
    "local_state_saved": "💾 Local state saved to:",
    "created_default_state": "📄 Created default local state file:",
    "default_state": "📊 Default state:",
    "using_existing_state": "📄 Using existing local state file:",
    "current_local_state": "📊 Current local state:",
    "local_state_not_found": "❌ Local state file not found:",
    "invalid_json_state": "❌ Invalid JSON in state file:",
    "permission_denied_state": "❌ Permission denied accessing state file:",
    "unexpected_error_loading": "❌ Unexpected error loading local state:",
    "permission_denied_writing": "❌ Permission denied writing to state file:",
    "filesystem_error_saving": "❌ File system error saving state:",
    "invalid_state_data": "❌ Invalid state data type:",
    "unexpected_error_saving": "❌ Unexpected error saving local state:",
    "connection_interrupted": "CONNECTION INTERRUPTED",
    "error": "Error",
    "auto_reconnect": "Auto Reconnect",
    "sdk_will_reconnect": "AWS IoT SDK will attempt to reconnect automatically",
    "connection_resumed": "CONNECTION RESUMED",
    "return_code": "Return Code",
    "session_present": "Session Present",
    "status": "Status",
    "connection_restored": "Connection restored successfully",
    "iot_endpoint_discovery": "🌐 AWS IoT Endpoint Discovery",
    "endpoint_type": "Endpoint Type",
    "endpoint_type_ats": "iot:Data-ATS (recommended)",
    "endpoint_url": "Endpoint URL",
    "port_mqtt_tls": "Port: 8883 (MQTT over TLS)",
    "protocol_mqtt": "Protocol: MQTT 3.1.1 over TLS",
    "error_getting_endpoint": "❌ Error getting IoT endpoint:",
    "available_devices": "📱 Available Devices ({} found):",
    "type": "Type",
    "selected_device": "✅ Selected device:",
    "invalid_selection": "❌ Invalid selection. Please enter 1-{}",
    "enter_valid_number": "❌ Please enter a valid number",
    "operation_cancelled": "🛑 Operation cancelled",
    "no_things_found": "❌ No Things found. Please run setup_sample_data.py first",
    "error_selecting_device": "❌ Error selecting device:",
    "no_certificates_found": "❌ No certificates found for device '{}'",
    "run_certificate_manager": "💡 Run certificate_manager.py to create and attach a certificate",
    "using_certificate": "✅ Using certificate:",
    "multiple_certificates_found": "🔐 Multiple certificates found:",
    "select_certificate": "Select certificate (1-{}): ",
    "invalid_selection_cert": "❌ Invalid selection",
    "certificate_files_found": "✅ Certificate files found:",
    "certificate": "Certificate",
    "private_key": "Private Key",
    "cert_dir_not_found": "❌ Certificate directory not found:",
    "run_cert_manager_files": "💡 Run certificate_manager.py to create certificate files",
    "cert_files_not_found": "❌ Certificate files not found in {}",
    "looking_for_files": "Looking for: {}.crt and {}.key",
    "invalid_thing_name": "⚠️ Invalid thing name:",
    "unsafe_path_detected": "⚠️ Unsafe path detected:",
    "updating_shadow_reported": "📡 Updating Shadow Reported State",
    "reported_state_update": "📊 Reported State Update:",
    "current_local_state_label": "Current Local State",
    "shadow_update_payload": "Shadow Update Payload",
    "shadow_update_sent": "✅ Shadow UPDATE (reported) sent",
    "failed_update_reported": "❌ Failed to update reported state:",
    "updating_shadow_desired": "🎯 Updating Shadow Desired State",
    "desired_state_update": "📊 Desired State Update:",
    "enter_property_name": "Enter property name: ",
    "property_name_required": "❌ Property name is required",
    "enter_property_value": "Enter property value: ",
    "property_value_required": "❌ Property value is required",
    "desired_state_to_set": "Desired State to Set",
    "property": "Property",
    "value": "Value",
    "shadow_update_desired_sent": "✅ Shadow UPDATE (desired) sent",
    "failed_update_desired": "❌ Failed to update desired state:",
    "simulating_device_changes": "🔄 Simulating Device State Changes",
    "simulation_options": "📋 Simulation Options:",
    "temperature_change": "1. Temperature change (±5°C)",
    "humidity_change": "2. Humidity change (±10%)",
    "status_toggle": "3. Status toggle (online/offline)",
    "firmware_update": "4. Firmware version update",
    "custom_property": "5. Custom property change",
    "select_simulation": "Select simulation (1-5): ",
    "invalid_simulation": "❌ Invalid selection. Please select 1-5.",
    "temperature_changed": "🌡️  Temperature changed: {} → {}°C",
    "humidity_changed": "💧 Humidity changed: {} → {}%",
    "status_changed": "🔄 Status changed: {} → {}",
    "firmware_updated": "🔧 Firmware updated: {} → {}",
    "custom_property_changed": "🔧 Custom property '{}' changed: {} → {}",
    "state_change_summary": "📊 State Change Summary:",
    "previous_value": "Previous Value",
    "new_value": "New Value",
    "local_state_updated_sim": "💾 Local state updated and saved",
    "reporting_to_shadow": "📡 Reporting change to shadow...",
    "simulation_complete": "✅ Simulation complete",
    "viewing_message_history": "📜 Viewing Shadow Message History",
    "message_history": "📊 Shadow Message History ({} messages):",
    "no_messages_received": "📭 No shadow messages received yet",
    "try_other_operations": "💡 Try other operations first to generate shadow messages",
    "message_details": "Message Details:",
    "clear_history_prompt": "Clear message history? (y/N): ",
    "history_cleared": "🗑️  Message history cleared",
    "history_not_cleared": "📜 Message history preserved",
    "disconnecting_from_iot": "🔌 Disconnecting from AWS IoT Core...",
    "disconnection_complete": "✅ Disconnection complete",
    "session_summary": "📊 Session Summary:",
    "total_messages": "Total Messages Received",
    "connection_duration": "Connection Duration",
    "shadow_operations": "Shadow Operations Performed",
    "thank_you_message": "Thank you for exploring AWS IoT Device Shadows!",
    "next_steps_suggestions": "🔍 Next Steps:",
    "explore_iot_rules": "• Explore iot_rules_explorer.py for message processing",
    "try_mqtt_client": "• Try mqtt_client_explorer.py for direct MQTT communication",
    "check_registry": "• Use iot_registry_explorer.py to view device details",
    "edit_local_state_title": "📝 Local State Editor",
    "current_state": "Current state:",
    "options": "Options:",
    "edit_individual_values": "1. Edit individual values",
    "replace_entire_state": "2. Replace entire state with JSON",
    "cancel": "3. Cancel",
    "select_option_1_3": "Select option (1-3): ",
    "current_values": "Current values:",
    "add_new_key": "Add new key",
    "done_editing": "Done editing",
    "select_item_to_edit": "Select item to edit (1-{}): ",
    "editing_key": "Editing '{}' (current: {})",
    "new_value_prompt": "New value (or press Enter to keep current): ",
    "updated_key": "✅ Updated {} = {}",
    "new_key_name": "New key name: ",
    "value_for_key": "Value for '{}': ",
    "added_new_key": "✅ Added new key: {} = {}",
    "enter_json_prompt": "Enter your JSON state (press Enter twice when done):",
    "invalid_json": "❌ Invalid JSON: {}",
    "state_updated_from_json": "✅ State updated from JSON",
    "report_updated_state": "Report updated state to shadow? (y/N): ",
    "shadow_command_prompt": "🌟 Shadow> ",
    "available_commands": "📖 Available Commands:",
    "get_command": "   get                       - Request shadow document",
    "local_command": "   local                     - Show local device state",
    "edit_command": "   edit                      - Edit local device state",
    "report_command": "   report                    - Report local state to shadow",
    "desire_command": "   desire key=val [key=val]  - Set desired state",
    "status_command": "   status                    - Connection status",
    "messages_command": "   messages                  - Shadow message history",
    "debug_command": "   debug                     - Connection diagnostics",
    "quit_command": "   quit                      - Exit",
    "example_desire": "💡 Example: desire temperature=25.0 status=active",
    "current_local_device_state": "📱 Current Local Device State:",
    "usage_desire": "❌ Usage: desire key=value [key=value...]",
    "example_desire_usage": "💡 Example: desire temperature=25.0 status=active",
    "setting_desired_state": "🎯 Setting desired state: {}",
    "no_valid_pairs": "❌ No valid key=value pairs found",
    "shadow_connection_status": "📊 Shadow Connection Status:",
    "connected": "Connected",
    "yes": "✅ Yes",
    "no": "❌ No",
    "shadow_message_history": "📨 Shadow Message History:",
    "unknown_command": "❌ Unknown command: {}. Type 'help' for available commands.",
    "client_id_prompt": "Enter custom Client ID (or press Enter for auto-generated): ",
    "client_id_auto_generated": "Auto-generated Client ID",
    "client_id_custom": "Custom Client ID",
    "client_id_invalid": "❌ Invalid Client ID. Must be 1-128 characters, alphanumeric, hyphens, and underscores only.",
    "client_id_guidelines": "💡 Client ID Guidelines:",
    "client_id_rules": [
        "• Must be unique per connection",
        "• 1-128 characters allowed",
        "• Use alphanumeric, hyphens (-), and underscores (_)",
        "• Avoid spaces and special characters",
        "• Example: my-device-001, sensor_temp_01"
    ],
    "debug_raw_topic": "🔍 DEBUG: Raw topic:",
    "debug_qos_duplicate": "🔍 DEBUG: QoS: {}, Duplicate: {}, Retain: {}",
    "debug_payload_size": "🔍 DEBUG: Payload size: {} bytes",
    "debug_message_count": "🔍 DEBUG: Message count: {}",
    "debug_unrecognized_topic": "🔍 DEBUG: Unrecognized shadow topic pattern",
    "debug_comparing_desired": "🔍 DEBUG: Comparing desired state with local state",
    "debug_desired_keys": "🔍 DEBUG: Desired keys: {}",
    "debug_no_desired_state": "🔍 DEBUG: No desired state in shadow document",
    "debug_normal_for_new": "🔍 DEBUG: This is normal for new devices - shadow created on first update",
    "debug_error_code_indicates": "🔍 DEBUG: Error code {} indicates: {}",
    "debug_processing_delta": "🔍 DEBUG: Processing delta with {} changed properties",
    "debug_delta_keys": "🔍 DEBUG: Delta keys: {}",
    "debug_loaded_local_state": "🔍 DEBUG: Loaded local state with {} properties",
    "debug_comparing_properties": "🔍 DEBUG: Comparing {} desired properties",
    "debug_differences_found": "🔍 DEBUG: Found {} differences out of {} desired properties",
    "debug_type_change": "🔍 DEBUG: Type change: {} → {}",
    "debug_updated_properties": "🔍 DEBUG: Updated {} properties in local state",
    "debug_new_state_size": "🔍 DEBUG: New local state size: {} properties",
    "debug_all_match": "🔍 DEBUG: All {} desired properties match local state",
    "debug_setting_up_state": "🔍 DEBUG: Setting up local state file: {}",
    "debug_cert_directory": "🔍 DEBUG: Certificate directory: {}",
    "debug_file_exists": "🔍 DEBUG: File exists: {}",
    "debug_created_new_state": "🔍 DEBUG: Created new state file with {} properties",
    "debug_loaded_existing_state": "🔍 DEBUG: Loaded existing state file with {} properties",
    "debug_file_size": "🔍 DEBUG: File size: {} bytes",
    "debug_calling_describe_endpoint": "🔍 DEBUG: Calling describe_endpoint API",
    "debug_input_parameters": "📥 Input Parameters: {'endpointType': 'iot:Data-ATS'}",
    "debug_api_response": "📤 API Response: {}",
    "debug_full_traceback": "🔍 DEBUG: Full traceback:",
    "debug_calling_list_things": "🔍 DEBUG: Calling list_things API",
    "debug_input_params_none": "📥 Input Parameters: None",
    "debug_found_things": "📤 API Response: Found {} Things",
    "debug_thing_names": "📊 Thing Names: {}",
    "debug_calling_list_principals": "🔍 DEBUG: Calling list_thing_principals API",
    "debug_input_thing_name": "📥 Input Parameters: {{'thingName': '{}'}}",
    "debug_found_principals": "📤 API Response: Found {} principals, {} certificates",
    "debug_cert_arns": "📊 Certificate ARNs: {}",
    "debug_shadow_connection_setup": "🔍 DEBUG: Shadow MQTT Connection Setup",
    "debug_thing_name": "   Thing Name: {}",
    "debug_cert_file": "   Certificate File: {}",
    "debug_private_key_file": "   Private Key File: {}",
    "debug_endpoint": "   Endpoint: {}",
    "debug_connection_result": "🔍 DEBUG: Connection result: {}",
    "debug_subscribing_topic": "🔍 DEBUG: Subscribing to shadow topic: {}",
    "debug_subscription_successful": "🔍 DEBUG: Subscription successful, packet ID: {}",
    "debug_publishing_shadow_get": "🔍 DEBUG: Publishing shadow get request",
    "debug_topic": "   Topic: {}",
    "debug_payload_empty": "   Payload: Empty (shadow get requests have no payload)",
    "debug_publishing_shadow_update": "🔍 DEBUG: Publishing shadow update request",
    "debug_payload_json": "   Payload: {}",
    "debug_update_type": "   Update Type: {}",
    "debug_simulation_type": "🔍 DEBUG: Simulation type: {}",
    "debug_property_change": "🔍 DEBUG: Property '{}' changed from {} to {}",
    "debug_state_before": "🔍 DEBUG: State before: {}",
    "debug_state_after": "🔍 DEBUG: State after: {}"
}