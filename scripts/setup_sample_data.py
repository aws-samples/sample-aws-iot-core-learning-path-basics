#!/usr/bin/env python3
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

import json
import os
import random
import sys
import time
import traceback
import uuid
from datetime import datetime, timedelta

import boto3
from botocore.exceptions import ClientError, NoCredentialsError, NoRegionError

# Simple translation system for learning content
MESSAGES = {
    "en": {
        "title": "üöÄ AWS IoT Sample Data Setup",
        "separator": "=" * 32,
        "aws_config": "üìç AWS Configuration:",
        "account_id": "Account ID",
        "region": "Region",
        "aws_context_error": "‚ö†Ô∏è Could not retrieve AWS context:",
        "aws_credentials_reminder": "   Make sure AWS credentials are configured",
        "description_intro": "This script will create sample IoT resources for learning:",
        "thing_types_desc": "Thing Types:",
        "thing_groups_desc": "Thing Groups:",
        "things_desc": "Things with random attributes",
        "debug_enabled": "üîç DEBUG MODE ENABLED",
        "debug_features": [
            "‚Ä¢ Will show detailed API requests and responses",
            "‚Ä¢ Slower execution with extended pauses",
            "‚Ä¢ Full error details and tracebacks",
        ],
        "tip": "üí° Tip: Use --debug or -d flag to see detailed API calls",
        "continue_prompt": "Continue? (y/N): ",
        "setup_cancelled": "Setup cancelled",
        "client_initialized": "‚úÖ AWS IoT client initialized",
        "client_error": "‚ùå Error initializing AWS IoT client:",
        "credentials_reminder": "Make sure you have AWS credentials and region configured",
        "no_region_error": "‚ùå AWS region not configured",
        "region_setup_instructions": [
            "Please configure your AWS region using one of these methods:",
            "1. Set environment variable: export AWS_DEFAULT_REGION=us-east-1",
            "2. Configure AWS CLI: aws configure",
            "3. Set region in AWS credentials file",
        ],
        "invalid_credentials": "‚ùå Invalid AWS credentials",
        "credentials_check_failed": "‚ùå Missing required environment variables:",
        "credentials_instructions": [
            "Please export your AWS credentials:",
            "export AWS_ACCESS_KEY_ID=<your-access-key>",
            "export AWS_SECRET_ACCESS_KEY=<your-secret-key>",
            "export AWS_SESSION_TOKEN=<your-session-token>  # Optional for temporary credentials",
        ],
        "step_1_title": "Creating Thing Types",
        "step_2_title": "Creating Thing Groups",
        "step_3_title": "Creating {} Things with attributes",
        "step_4_title": "Adding Things to Thing Groups",
        "step_5_title": "Setup Summary",
        "creating": "Creating",
        "created": "Created",
        "already_exists": "already exists, skipping",
        "deprecated_undeprecating": "is deprecated, undeprecating...",
        "undeprecated": "undeprecated successfully",
        "already_active": "already exists and is active",
        "error_checking": "Error checking",
        "error_creating": "Error creating",
        "creating_thing": "üì± Creating Thing:",
        "customer_id": "Customer ID:",
        "country": "Country:",
        "manufacturing_date": "Manufacturing Date:",
        "thing_type": "Thing Type:",
        "adding_to_group": "Adding {} to group {}",
        "added_to_group": "Added {} to {}",
        "error_adding": "Error adding {} to {}:",
        "resources_created": "üìä Resources Created:",
        "things": "Things:",
        "thing_types": "Thing Types:",
        "thing_groups": "Thing Groups:",
        "sample_thing_names": "üéØ Sample Thing Names:",
        "and_more": "... and {} more",
        "error_summary": "‚ùå Error getting summary:",
        "setup_complete": "üéâ Setup complete! You can now use iot_registry_explorer.py to explore the data.",
        "debug_session_complete": "üîç DEBUG: Session completed with detailed API logging",
        "setup_cancelled_user": "üëã Setup cancelled by user. Goodbye!",
        "debug_creating": "üîç DEBUG: Creating",
        "debug_api_call": "üì§ API Call:",
        "debug_input_params": "üì• Input Parameters:",
        "debug_api_response": "üì§ API Response:",
        "debug_full_error": "üîç DEBUG: Full error response:",
        "debug_full_traceback": "üîç DEBUG: Full traceback:",
        "api_error": "‚ùå AWS API Error in",
        "missing_param_error": "‚ùå Missing required parameter in",
        "invalid_value_error": "‚ùå Invalid value in",
        "unexpected_error": "‚ùå Unexpected error in",
        "press_enter": "Press Enter to continue...",
        "learning_moments": {
            "hierarchy": {
                "title": "üìö LEARNING MOMENT: AWS IoT Resource Hierarchy",
                "content": "AWS IoT uses a hierarchical structure to organize devices: Thing Types (templates) define device categories, Thing Groups provide organizational structure, and Things represent actual devices. This hierarchy enables scalable device management, bulk operations, and policy inheritance across your IoT fleet.",
                "next": "We will create sample resources to demonstrate this hierarchy",
            },
            "thing_groups": {
                "title": "üìö LEARNING MOMENT: Thing Groups - Device Organization",
                "content": "Thing Groups provide hierarchical organization for your IoT devices, similar to folders for files. They enable bulk operations, policy inheritance, and logical grouping by location, function, or business criteria. Groups can contain other groups, creating flexible organizational structures for large IoT deployments.",
                "next": "We will create Thing Groups for device organization",
            },
            "things": {
                "title": "üìö LEARNING MOMENT: Things - Device Registration",
                "content": "Things represent your actual IoT devices in AWS IoT Core. Each Thing has a unique name, optional attributes (like serial number, location), and can be assigned to a Thing Type for standardization. Things are the foundation for device management, security policies, and shadow state synchronization.",
                "next": "We will create individual Things with realistic attributes",
            },
            "relationships": {
                "title": "üìö LEARNING MOMENT: Thing-Group Relationships",
                "content": "Adding Things to Groups creates organizational relationships that enable bulk operations and policy inheritance. A Thing can belong to multiple groups, and groups can be nested. This hierarchy is essential for managing device fleets at scale, applying policies, and organizing devices by business logic.",
                "next": "We will assign Things to appropriate Groups",
            },
        },
    },
    "es": {
        "title": "üöÄ Configuraci√≥n de Datos de Muestra de AWS IoT",
        "separator": "=" * 32,
        "aws_config": "üìç Configuraci√≥n de AWS:",
        "account_id": "ID de Cuenta",
        "region": "Regi√≥n",
        "aws_context_error": "‚ö†Ô∏è No se pudo recuperar el contexto de AWS:",
        "aws_credentials_reminder": "   Aseg√∫rate de que las credenciales de AWS est√©n configuradas",
        "description_intro": "Este script crear√° recursos IoT de muestra para aprendizaje:",
        "thing_types_desc": "Thing Types:",
        "thing_groups_desc": "Thing Groups:",
        "things_desc": "Things con atributos aleatorios",
        "debug_enabled": "üîç MODO DEBUG HABILITADO",
        "debug_features": [
            "‚Ä¢ Mostrar√° solicitudes y respuestas detalladas de API",
            "‚Ä¢ Ejecuci√≥n m√°s lenta con pausas extendidas",
            "‚Ä¢ Detalles completos de errores y trazas",
        ],
        "tip": "üí° Consejo: Usa la bandera --debug o -d para ver llamadas detalladas de API",
        "continue_prompt": "¬øContinuar? (s/N): ",
        "setup_cancelled": "Configuraci√≥n cancelada",
        "client_initialized": "‚úÖ Cliente de AWS IoT inicializado",
        "client_error": "‚ùå Error inicializando cliente de AWS IoT:",
        "credentials_reminder": "Aseg√∫rate de tener credenciales y regi√≥n de AWS configuradas",
        "no_region_error": "‚ùå Regi√≥n de AWS no configurada",
        "region_setup_instructions": [
            "Por favor configura tu regi√≥n de AWS usando uno de estos m√©todos:",
            "1. Variable de entorno: export AWS_DEFAULT_REGION=us-east-1",
            "2. Configurar AWS CLI: aws configure",
            "3. Establecer regi√≥n en el archivo de credenciales de AWS",
        ],
        "invalid_credentials": "‚ùå Credenciales de AWS inv√°lidas",
        "credentials_check_failed": "‚ùå Variables de entorno requeridas faltantes:",
        "credentials_instructions": [
            "Por favor exporta tus credenciales de AWS:",
            "export AWS_ACCESS_KEY_ID=<tu-access-key>",
            "export AWS_SECRET_ACCESS_KEY=<tu-secret-key>",
            "export AWS_SESSION_TOKEN=<tu-session-token>  # Opcional para credenciales temporales",
        ],
        "step_1_title": "Creando Thing Types",
        "step_2_title": "Creando Thing Groups",
        "step_3_title": "Creando {} Things con atributos",
        "step_4_title": "Agregando Things a Thing Groups",
        "step_5_title": "Resumen de Configuraci√≥n",
        "creating": "Creando",
        "created": "Creado",
        "already_exists": "ya existe, omitiendo",
        "deprecated_undeprecating": "est√° deprecado, reactivando...",
        "undeprecated": "reactivado exitosamente",
        "already_active": "ya existe y est√° activo",
        "error_checking": "Error verificando",
        "error_creating": "Error creando",
        "creating_thing": "üì± Creando Thing:",
        "customer_id": "ID de Cliente:",
        "country": "Pa√≠s:",
        "manufacturing_date": "Fecha de Fabricaci√≥n:",
        "thing_type": "Thing Type:",
        "adding_to_group": "Agregando {} al grupo {}",
        "added_to_group": "Agregado {} a {}",
        "error_adding": "Error agregando {} a {}:",
        "resources_created": "üìä Recursos Creados:",
        "things": "Things:",
        "thing_types": "Thing Types:",
        "thing_groups": "Thing Groups:",
        "sample_thing_names": "üéØ Nombres de Things de Muestra:",
        "and_more": "... y {} m√°s",
        "error_summary": "‚ùå Error obteniendo resumen:",
        "setup_complete": "üéâ ¬°Configuraci√≥n completa! Ahora puedes usar iot_registry_explorer.py para explorar los datos.",
        "debug_session_complete": "üîç DEBUG: Sesi√≥n completada con registro detallado de API",
        "setup_cancelled_user": "üëã ¬°Configuraci√≥n cancelada por el usuario. Adi√≥s!",
        "debug_creating": "üîç DEBUG: Creando",
        "debug_api_call": "üì§ Llamada API:",
        "debug_input_params": "üì• Par√°metros de Entrada:",
        "debug_api_response": "üì§ Respuesta API:",
        "debug_full_error": "üîç DEBUG: Respuesta completa de error:",
        "debug_full_traceback": "üîç DEBUG: Traza completa:",
        "api_error": "‚ùå Error de API de AWS en",
        "missing_param_error": "‚ùå Par√°metro requerido faltante en",
        "invalid_value_error": "‚ùå Valor inv√°lido en",
        "unexpected_error": "‚ùå Error inesperado en",
        "press_enter": "Presiona Enter para continuar...",
        "learning_moments": {
            "hierarchy": {
                "title": "üìö LEARNING MOMENT: Jerarqu√≠a de Recursos de AWS IoT",
                "content": "AWS IoT usa una estructura jer√°rquica para organizar dispositivos: Thing Types (plantillas) definen categor√≠as de dispositivos, Thing Groups proporcionan estructura organizacional, y Things representan dispositivos reales. Esta jerarqu√≠a permite gesti√≥n escalable de dispositivos, operaciones masivas y herencia de pol√≠ticas en tu flota IoT.",
                "next": "Crearemos recursos de muestra para demostrar esta jerarqu√≠a",
            },
            "thing_groups": {
                "title": "üìö LEARNING MOMENT: Thing Groups - Organizaci√≥n de Dispositivos",
                "content": "Los Thing Groups proporcionan organizaci√≥n jer√°rquica para tus dispositivos IoT, similar a carpetas para archivos. Permiten operaciones masivas, herencia de pol√≠ticas y agrupaci√≥n l√≥gica por ubicaci√≥n, funci√≥n o criterios de negocio. Los grupos pueden contener otros grupos, creando estructuras organizacionales flexibles para despliegues IoT grandes.",
                "next": "Crearemos Thing Groups para organizaci√≥n de dispositivos",
            },
            "things": {
                "title": "üìö LEARNING MOMENT: Things - Registro de Dispositivos",
                "content": "Los Things representan tus dispositivos IoT reales en AWS IoT Core. Cada Thing tiene un nombre √∫nico, atributos opcionales (como n√∫mero de serie, ubicaci√≥n), y puede asignarse a un Thing Type para estandarizaci√≥n. Los Things son la base para gesti√≥n de dispositivos, pol√≠ticas de seguridad y sincronizaci√≥n de estado shadow.",
                "next": "Crearemos Things individuales con atributos realistas",
            },
            "relationships": {
                "title": "üìö LEARNING MOMENT: Relaciones Thing-Group",
                "content": "Agregar Things a Groups crea relaciones organizacionales que permiten operaciones masivas y herencia de pol√≠ticas. Un Thing puede pertenecer a m√∫ltiples grupos, y los grupos pueden anidarse. Esta jerarqu√≠a es esencial para gestionar flotas de dispositivos a escala, aplicar pol√≠ticas y organizar dispositivos por l√≥gica de negocio.",
                "next": "Asignaremos Things a Groups apropiados",
            },
        },
    },
    "ja": {
        "title": "üöÄ AWS IoT „Çµ„É≥„Éó„É´„Éá„Éº„Çø„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó",
        "separator": "=" * 32,
        "aws_config": "üìç AWSË®≠ÂÆö:",
        "account_id": "„Ç¢„Ç´„Ç¶„É≥„ÉàID",
        "region": "„É™„Éº„Ç∏„Éß„É≥",
        "aws_context_error": "‚ö†Ô∏è AWS„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü:",
        "aws_credentials_reminder": "   AWSË™çË®ºÊÉÖÂ†±„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
        "description_intro": "„Åì„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÅØÂ≠¶ÁøíÁî®„ÅÆ„Çµ„É≥„Éó„É´IoT„É™„ÇΩ„Éº„Çπ„Çí‰ΩúÊàê„Åó„Åæ„Åô:",
        "thing_types_desc": "Thing Types:",
        "thing_groups_desc": "Thing Groups:",
        "things_desc": "„É©„É≥„ÉÄ„É†Â±ûÊÄß„ÇíÊåÅ„Å§Things",
        "debug_enabled": "üîç „Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâÊúâÂäπ",
        "debug_features": [
            "‚Ä¢ Ë©≥Á¥∞„Å™API„É™„ÇØ„Ç®„Çπ„Éà„Å®„É¨„Çπ„Éù„É≥„Çπ„ÇíË°®Á§∫",
            "‚Ä¢ Êã°Âºµ„Éù„Éº„Ç∫„Å´„Çà„ÇãÂÆüË°åÈÄüÂ∫¶„ÅÆ‰Ωé‰∏ã",
            "‚Ä¢ ÂÆåÂÖ®„Å™„Ç®„É©„ÉºË©≥Á¥∞„Å®„Éà„É¨„Éº„Çπ„Éê„ÉÉ„ÇØ",
        ],
        "tip": "üí° „Éí„É≥„Éà: --debug„Åæ„Åü„ÅØ-d„Éï„É©„Ç∞„Çí‰ΩøÁî®„Åó„Å¶Ë©≥Á¥∞„Å™APIÂëº„Å≥Âá∫„Åó„ÇíË°®Á§∫",
        "continue_prompt": "Á∂öË°å„Åó„Åæ„Åô„ÅãÔºü (y/N): ",
        "setup_cancelled": "„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Åå„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åæ„Åó„Åü",
        "client_initialized": "‚úÖ AWS IoT„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅåÂàùÊúüÂåñ„Åï„Çå„Åæ„Åó„Åü",
        "client_error": "‚ùå AWS IoT„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅÆÂàùÊúüÂåñ„Ç®„É©„Éº:",
        "credentials_reminder": "AWSË™çË®ºÊÉÖÂ†±„Å®„É™„Éº„Ç∏„Éß„É≥„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
        "no_region_error": "‚ùå AWS„É™„Éº„Ç∏„Éß„É≥„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì",
        "region_setup_instructions": [
            "‰ª•‰∏ã„ÅÆ„ÅÑ„Åö„Çå„Åã„ÅÆÊñπÊ≥ï„ÅßAWS„É™„Éº„Ç∏„Éß„É≥„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ:",
            "1. Áí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆö: export AWS_DEFAULT_REGION=us-east-1",
            "2. AWS CLI„ÇíË®≠ÂÆö: aws configure",
            "3. AWSË™çË®ºÊÉÖÂ†±„Éï„Ç°„Ç§„É´„Åß„É™„Éº„Ç∏„Éß„É≥„ÇíË®≠ÂÆö",
        ],
        "invalid_credentials": "‚ùå ÁÑ°Âäπ„Å™AWSË™çË®ºÊÉÖÂ†±",
        "credentials_check_failed": "‚ùå ÂøÖË¶Å„Å™Áí∞Â¢ÉÂ§âÊï∞„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô:",
        "credentials_instructions": [
            "AWSË™çË®ºÊÉÖÂ†±„Çí„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åó„Å¶„Åè„Å†„Åï„ÅÑ:",
            "export AWS_ACCESS_KEY_ID=<your-access-key>",
            "export AWS_SECRET_ACCESS_KEY=<your-secret-key>",
            "export AWS_SESSION_TOKEN=<your-session-token>  # ‰∏ÄÊôÇË™çË®ºÊÉÖÂ†±„ÅÆÂ†¥Âêà„ÅØ„Ç™„Éó„Ç∑„Éß„É≥",
        ],
        "step_1_title": "Thing Types„Çí‰ΩúÊàê‰∏≠",
        "step_2_title": "Thing Groups„Çí‰ΩúÊàê‰∏≠",
        "step_3_title": "{}ÂÄã„ÅÆThings„ÇíÂ±ûÊÄß‰ªò„Åç„Åß‰ΩúÊàê‰∏≠",
        "step_4_title": "Things„ÇíThing Groups„Å´ËøΩÂä†‰∏≠",
        "step_5_title": "„Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÊ¶ÇË¶Å",
        "creating": "‰ΩúÊàê‰∏≠",
        "created": "‰ΩúÊàêÂÆå‰∫Ü",
        "already_exists": "Êó¢„Å´Â≠òÂú®„Åô„Çã„Åü„ÇÅ„ÄÅ„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åô",
        "deprecated_undeprecating": "„ÅØÈùûÊé®Â•®„Åß„Åô„ÄÅÈùûÊé®Â•®„ÇíËß£Èô§‰∏≠...",
        "undeprecated": "ÈùûÊé®Â•®Ëß£Èô§„ÅåÊàêÂäü„Åó„Åæ„Åó„Åü",
        "already_active": "Êó¢„Å´Â≠òÂú®„Åó„ÄÅ„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Åß„Åô",
        "error_checking": "Á¢∫Ë™ç„Ç®„É©„Éº",
        "error_creating": "‰ΩúÊàê„Ç®„É©„Éº",
        "creating_thing": "üì± Thing‰ΩúÊàê‰∏≠:",
        "customer_id": "È°ßÂÆ¢ID:",
        "country": "ÂõΩ:",
        "manufacturing_date": "Ë£ΩÈÄ†Êó•:",
        "thing_type": "Thing Type:",
        "adding_to_group": "{}„Çí„Ç∞„É´„Éº„Éó{}„Å´ËøΩÂä†‰∏≠",
        "added_to_group": "{}„Çí{}„Å´ËøΩÂä†„Åó„Åæ„Åó„Åü",
        "error_adding": "{}„Çí{}„Å´ËøΩÂä†‰∏≠„Å´„Ç®„É©„Éº:",
        "resources_created": "üìä ‰ΩúÊàê„Åï„Çå„Åü„É™„ÇΩ„Éº„Çπ:",
        "things": "Things:",
        "thing_types": "Thing Types:",
        "thing_groups": "Thing Groups:",
        "sample_thing_names": "üéØ „Çµ„É≥„Éó„É´ThingÂêç:",
        "and_more": "... „Åù„ÅÆ‰ªñ{}ÂÄã",
        "error_summary": "‚ùå Ê¶ÇË¶ÅÂèñÂæó„Ç®„É©„Éº:",
        "setup_complete": "üéâ „Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÂÆå‰∫ÜÔºÅiot_registry_explorer.py„Çí‰ΩøÁî®„Åó„Å¶„Éá„Éº„Çø„ÇíÊé¢Á¥¢„Åß„Åç„Åæ„Åô„ÄÇ",
        "debug_session_complete": "üîç „Éá„Éê„ÉÉ„Ç∞: Ë©≥Á¥∞„Å™API„É≠„Ç∞Ë®òÈå≤„Åß„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü",
        "setup_cancelled_user": "üëã „É¶„Éº„Ç∂„Éº„Å´„Çà„Å£„Å¶„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Åå„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åæ„Åó„Åü„ÄÇ„Åï„Çà„ÅÜ„Å™„ÇâÔºÅ",
        "debug_creating": "üîç „Éá„Éê„ÉÉ„Ç∞: ‰ΩúÊàê‰∏≠",
        "debug_api_call": "üì§ APIÂëº„Å≥Âá∫„Åó:",
        "debug_input_params": "üì• ÂÖ•Âäõ„Éë„É©„É°„Éº„Çø:",
        "debug_api_response": "üì§ API„É¨„Çπ„Éù„É≥„Çπ:",
        "debug_full_error": "üîç „Éá„Éê„ÉÉ„Ç∞: ÂÆåÂÖ®„Å™„Ç®„É©„Éº„É¨„Çπ„Éù„É≥„Çπ:",
        "debug_full_traceback": "üîç „Éá„Éê„ÉÉ„Ç∞: ÂÆåÂÖ®„Å™„Éà„É¨„Éº„Çπ„Éê„ÉÉ„ÇØ:",
        "api_error": "‚ùå AWS API„Ç®„É©„Éº",
        "missing_param_error": "‚ùå ÂøÖË¶Å„Å™„Éë„É©„É°„Éº„Çø„Åå‰∏çË∂≥",
        "invalid_value_error": "‚ùå ÁÑ°Âäπ„Å™ÂÄ§",
        "unexpected_error": "‚ùå ‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº",
        "press_enter": "Enter„Ç≠„Éº„ÇíÊäº„Åó„Å¶Á∂öË°å...",
        "learning_moments": {
            "hierarchy": {
                "title": "üìö Â≠¶Áøí„Éù„Ç§„É≥„Éà: AWS IoT„É™„ÇΩ„Éº„ÇπÈöéÂ±§",
                "content": "AWS IoT„ÅØ„Éá„Éê„Ç§„Çπ„ÇíÊï¥ÁêÜ„Åô„Çã„Åü„ÇÅ„Å´ÈöéÂ±§ÊßãÈÄ†„Çí‰ΩøÁî®„Åó„Åæ„Åô: Thing TypesÔºà„ÉÜ„É≥„Éó„É¨„Éº„ÉàÔºâ„ÅØ„Éá„Éê„Ç§„Çπ„Ç´„ÉÜ„Ç¥„É™„ÇíÂÆöÁæ©„Åó„ÄÅThing Groups„ÅØÁµÑÁπîÊßãÈÄ†„ÇíÊèê‰æõ„Åó„ÄÅThings„ÅØÂÆüÈöõ„ÅÆ„Éá„Éê„Ç§„Çπ„ÇíË°®„Åó„Åæ„Åô„ÄÇ„Åì„ÅÆÈöéÂ±§„Å´„Çà„Çä„ÄÅ„Çπ„Ç±„Éº„É©„Éñ„É´„Å™„Éá„Éê„Ç§„ÇπÁÆ°ÁêÜ„ÄÅ‰∏ÄÊã¨Êìç‰Ωú„ÄÅIoT„Éï„É™„Éº„ÉàÂÖ®‰Ωì„Åß„ÅÆ„Éù„É™„Ç∑„ÉºÁ∂ôÊâø„ÅåÂèØËÉΩ„Å´„Å™„Çä„Åæ„Åô„ÄÇ",
                "next": "„Åì„ÅÆÈöéÂ±§„ÇíÂÆüË®º„Åô„Çã„Åü„ÇÅ„Å´„Çµ„É≥„Éó„É´„É™„ÇΩ„Éº„Çπ„Çí‰ΩúÊàê„Åó„Åæ„Åô",
            },
            "thing_groups": {
                "title": "üìö Â≠¶Áøí„Éù„Ç§„É≥„Éà: Thing Groups - „Éá„Éê„Ç§„ÇπÁµÑÁπî",
                "content": "Thing Groups„ÅØ„ÄÅ„Éï„Ç°„Ç§„É´Áî®„ÅÆ„Éï„Ç©„É´„ÉÄ„Å®ÂêåÊßò„Å´„ÄÅIoT„Éá„Éê„Ç§„Çπ„ÅÆÈöéÂ±§ÁµÑÁπî„ÇíÊèê‰æõ„Åó„Åæ„Åô„ÄÇÂ†¥ÊâÄ„ÄÅÊ©üËÉΩ„ÄÅ„Åæ„Åü„ÅØ„Éì„Ç∏„Éç„ÇπÂü∫Ê∫ñ„Å´„Çà„Çã‰∏ÄÊã¨Êìç‰Ωú„ÄÅ„Éù„É™„Ç∑„ÉºÁ∂ôÊâø„ÄÅË´ñÁêÜ„Ç∞„É´„Éº„ÉóÂåñ„ÇíÂèØËÉΩ„Å´„Åó„Åæ„Åô„ÄÇ„Ç∞„É´„Éº„Éó„ÅØ‰ªñ„ÅÆ„Ç∞„É´„Éº„Éó„ÇíÂê´„ÇÄ„Åì„Å®„Åå„Åß„Åç„ÄÅÂ§ßË¶èÊ®°„Å™IoT„Éá„Éó„É≠„Ç§„É°„É≥„Éà„ÅÆ„Åü„ÇÅ„ÅÆÊüîËªü„Å™ÁµÑÁπîÊßãÈÄ†„Çí‰ΩúÊàê„Åó„Åæ„Åô„ÄÇ",
                "next": "„Éá„Éê„Ç§„ÇπÁµÑÁπî„ÅÆ„Åü„ÇÅ„ÅÆThing Groups„Çí‰ΩúÊàê„Åó„Åæ„Åô",
            },
            "things": {
                "title": "üìö Â≠¶Áøí„Éù„Ç§„É≥„Éà: Things - „Éá„Éê„Ç§„ÇπÁôªÈå≤",
                "content": "Things„ÅØAWS IoT Core„Åß„ÅÆÂÆüÈöõ„ÅÆIoT„Éá„Éê„Ç§„Çπ„ÇíË°®„Åó„Åæ„Åô„ÄÇÂêÑThing„ÅØ‰∏ÄÊÑè„ÅÆÂêçÂâç„ÄÅ„Ç™„Éó„Ç∑„Éß„É≥„ÅÆÂ±ûÊÄßÔºà„Ç∑„É™„Ç¢„É´Áï™Âè∑„ÄÅÂ†¥ÊâÄ„Å™„Å©Ôºâ„ÇíÊåÅ„Å°„ÄÅÊ®ôÊ∫ñÂåñ„ÅÆ„Åü„ÇÅ„Å´Thing Type„Å´Ââ≤„ÇäÂΩì„Å¶„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„Åô„ÄÇThings„ÅØ„Éá„Éê„Ç§„ÇπÁÆ°ÁêÜ„ÄÅ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Éù„É™„Ç∑„Éº„ÄÅ„Ç∑„É£„Éâ„Ç¶Áä∂ÊÖãÂêåÊúü„ÅÆÂü∫Áõ§„Åß„Åô„ÄÇ",
                "next": "ÁèæÂÆüÁöÑ„Å™Â±ûÊÄß„ÇíÊåÅ„Å§ÂÄãÂà•„ÅÆThings„Çí‰ΩúÊàê„Åó„Åæ„Åô",
            },
            "relationships": {
                "title": "üìö Â≠¶Áøí„Éù„Ç§„É≥„Éà: Thing-GroupÈñ¢‰øÇ",
                "content": "Things„ÇíGroups„Å´ËøΩÂä†„Åô„Çã„Åì„Å®„Åß„ÄÅ‰∏ÄÊã¨Êìç‰Ωú„Å®„Éù„É™„Ç∑„ÉºÁ∂ôÊâø„ÇíÂèØËÉΩ„Å´„Åô„ÇãÁµÑÁπîÈñ¢‰øÇ„Çí‰ΩúÊàê„Åó„Åæ„Åô„ÄÇThing„ÅØË§áÊï∞„ÅÆ„Ç∞„É´„Éº„Éó„Å´Â±û„Åô„Çã„Åì„Å®„Åå„Åß„Åç„ÄÅ„Ç∞„É´„Éº„Éó„ÅØ„Éç„Çπ„Éà„Åß„Åç„Åæ„Åô„ÄÇ„Åì„ÅÆÈöéÂ±§„ÅØ„ÄÅ„Çπ„Ç±„Éº„É´„Åß„ÅÆ„Éá„Éê„Ç§„Çπ„Éï„É™„Éº„ÉàÁÆ°ÁêÜ„ÄÅ„Éù„É™„Ç∑„Éº„ÅÆÈÅ©Áî®„ÄÅ„Éì„Ç∏„Éç„Çπ„É≠„Ç∏„ÉÉ„ÇØ„Å´„Çà„Çã„Éá„Éê„Ç§„Çπ„ÅÆÁµÑÁπîÂåñ„Å´‰∏çÂèØÊ¨†„Åß„Åô„ÄÇ",
                "next": "ÈÅ©Âàá„Å™Groups„Å´Things„ÇíÂâ≤„ÇäÂΩì„Å¶„Åæ„Åô",
            },
        },
    },
    "zh-CN": {
        "title": "üöÄ AWS IoT Á§∫‰æãÊï∞ÊçÆËÆæÁΩÆ",
        "separator": "=" * 32,
        "aws_config": "üìç AWS ÈÖçÁΩÆ:",
        "account_id": "Ë¥¶Êà∑ ID",
        "region": "Âå∫Âüü",
        "aws_context_error": "‚ö†Ô∏è Êó†Ê≥ïÊ£ÄÁ¥¢ AWS ‰∏ä‰∏ãÊñá:",
        "aws_credentials_reminder": "   Á°Æ‰øùÂ∑≤ÈÖçÁΩÆ AWS Âá≠ËØÅ",
        "description_intro": "Ê≠§ËÑöÊú¨Â∞Ü‰∏∫Â≠¶‰π†ÂàõÂª∫Á§∫‰æã IoT ËµÑÊ∫ê:",
        "thing_types_desc": "Thing Types:",
        "thing_groups_desc": "Thing Groups:",
        "things_desc": "ÂÖ∑ÊúâÈöèÊú∫Â±ûÊÄßÁöÑ Things",
        "debug_enabled": "üîç Ë∞ÉËØïÊ®°ÂºèÂ∑≤ÂêØÁî®",
        "debug_features": ["‚Ä¢ Â∞ÜÊòæÁ§∫ËØ¶ÁªÜÁöÑ API ËØ∑Ê±ÇÂíåÂìçÂ∫î", "‚Ä¢ ÊâßË°åËæÉÊÖ¢ÔºåÊúâÂª∂ÈïøÁöÑÊöÇÂÅú", "‚Ä¢ ÂÆåÊï¥ÁöÑÈîôËØØËØ¶ÁªÜ‰ø°ÊÅØÂíåÂ†ÜÊ†àË∑üË∏™"],
        "tip": "üí° ÊèêÁ§∫: ‰ΩøÁî® --debug Êàñ -d Ê†áÂøóÊü•ÁúãËØ¶ÁªÜÁöÑ API Ë∞ÉÁî®",
        "continue_prompt": "ÁªßÁª≠ÂêóÔºü (y/N): ",
        "setup_cancelled": "ËÆæÁΩÆÂ∑≤ÂèñÊ∂à",
        "client_initialized": "‚úÖ AWS IoT ÂÆ¢Êà∑Á´ØÂ∑≤ÂàùÂßãÂåñ",
        "client_error": "‚ùå ÂàùÂßãÂåñ AWS IoT ÂÆ¢Êà∑Á´ØÊó∂Âá∫Èîô:",
        "credentials_reminder": "Á°Æ‰øùÊÇ®Â∑≤ÈÖçÁΩÆ AWS Âá≠ËØÅÂíåÂå∫Âüü",
        "no_region_error": "‚ùå Êú™ÈÖçÁΩÆ AWS Âå∫Âüü",
        "region_setup_instructions": [
            "ËØ∑‰ΩøÁî®‰ª•‰∏ãÊñπÊ≥ï‰πã‰∏ÄÈÖçÁΩÆÊÇ®ÁöÑ AWS Âå∫Âüü:",
            "1. ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè: export AWS_DEFAULT_REGION=us-east-1",
            "2. ÈÖçÁΩÆ AWS CLI: aws configure",
            "3. Âú® AWS Âá≠ËØÅÊñá‰ª∂‰∏≠ËÆæÁΩÆÂå∫Âüü",
        ],
        "invalid_credentials": "‚ùå Êó†ÊïàÁöÑ AWS Âá≠ËØÅ",
        "credentials_check_failed": "‚ùå Áº∫Â∞ëÂøÖÈúÄÁöÑÁéØÂ¢ÉÂèòÈáè:",
        "credentials_instructions": [
            "ËØ∑ÂØºÂá∫ÊÇ®ÁöÑ AWS Âá≠ËØÅ:",
            "export AWS_ACCESS_KEY_ID=<your-access-key>",
            "export AWS_SECRET_ACCESS_KEY=<your-secret-key>",
            "export AWS_SESSION_TOKEN=<your-session-token>  # ‰∏¥Êó∂Âá≠ËØÅÂèØÈÄâ",
        ],
        "step_1_title": "ÂàõÂª∫ Thing Types",
        "step_2_title": "ÂàõÂª∫ Thing Groups",
        "step_3_title": "ÂàõÂª∫ {} ‰∏™Â∏¶Â±ûÊÄßÁöÑ Things",
        "step_4_title": "Â∞Ü Things Ê∑ªÂä†Âà∞ Thing Groups",
        "step_5_title": "ËÆæÁΩÆÊëòË¶Å",
        "creating": "ÂàõÂª∫‰∏≠",
        "created": "Â∑≤ÂàõÂª∫",
        "already_exists": "Â∑≤Â≠òÂú®ÔºåË∑≥Ëøá",
        "deprecated_undeprecating": "Â∑≤ÂºÉÁî®ÔºåÊ≠£Âú®ÂèñÊ∂àÂºÉÁî®...",
        "undeprecated": "ÊàêÂäüÂèñÊ∂àÂºÉÁî®",
        "already_active": "Â∑≤Â≠òÂú®‰∏îÂ§Ñ‰∫éÊ¥ªÂä®Áä∂ÊÄÅ",
        "error_checking": "Ê£ÄÊü•ÈîôËØØ",
        "error_creating": "ÂàõÂª∫ÈîôËØØ",
        "creating_thing": "üì± ÂàõÂª∫ Thing:",
        "customer_id": "ÂÆ¢Êà∑ ID:",
        "country": "ÂõΩÂÆ∂:",
        "manufacturing_date": "Âà∂ÈÄ†Êó•Êúü:",
        "thing_type": "Thing Type:",
        "adding_to_group": "Â∞Ü {} Ê∑ªÂä†Âà∞ÁªÑ {}",
        "added_to_group": "Â∑≤Â∞Ü {} Ê∑ªÂä†Âà∞ {}",
        "error_adding": "Â∞Ü {} Ê∑ªÂä†Âà∞ {} Êó∂Âá∫Èîô:",
        "resources_created": "üìä Â∑≤ÂàõÂª∫ÁöÑËµÑÊ∫ê:",
        "things": "Things:",
        "thing_types": "Thing Types:",
        "thing_groups": "Thing Groups:",
        "sample_thing_names": "üéØ Á§∫‰æã Thing ÂêçÁß∞:",
        "and_more": "... ËøòÊúâ {} ‰∏™",
        "error_summary": "‚ùå Ëé∑ÂèñÊëòË¶ÅÊó∂Âá∫Èîô:",
        "setup_complete": "üéâ ËÆæÁΩÆÂÆåÊàêÔºÅÊÇ®Áé∞Âú®ÂèØ‰ª•‰ΩøÁî® iot_registry_explorer.py Êù•Êé¢Á¥¢Êï∞ÊçÆ„ÄÇ",
        "debug_session_complete": "üîç Ë∞ÉËØï: ‰ºöËØùÂ∑≤ÂÆåÊàêÔºåÂåÖÂê´ËØ¶ÁªÜÁöÑ API Êó•ÂøóËÆ∞ÂΩï",
        "setup_cancelled_user": "üëã Áî®Êà∑ÂèñÊ∂à‰∫ÜËÆæÁΩÆ„ÄÇÂÜçËßÅÔºÅ",
        "debug_creating": "üîç Ë∞ÉËØï: ÂàõÂª∫‰∏≠",
        "debug_api_call": "üì§ API Ë∞ÉÁî®:",
        "debug_input_params": "üì• ËæìÂÖ•ÂèÇÊï∞:",
        "debug_api_response": "üì§ API ÂìçÂ∫î:",
        "debug_full_error": "üîç Ë∞ÉËØï: ÂÆåÊï¥ÈîôËØØÂìçÂ∫î:",
        "debug_full_traceback": "üîç Ë∞ÉËØï: ÂÆåÊï¥Â†ÜÊ†àË∑üË∏™:",
        "api_error": "‚ùå AWS API ÈîôËØØ",
        "missing_param_error": "‚ùå Áº∫Â∞ëÂøÖÈúÄÂèÇÊï∞",
        "invalid_value_error": "‚ùå Êó†ÊïàÂÄº",
        "unexpected_error": "‚ùå ÊÑèÂ§ñÈîôËØØ",
        "press_enter": "Êåâ Enter ÁªßÁª≠...",
        "learning_moments": {
            "hierarchy": {
                "title": "üìö Â≠¶‰π†Ë¶ÅÁÇπ: AWS IoT ËµÑÊ∫êÂ±ÇÊ¨°ÁªìÊûÑ",
                "content": "AWS IoT ‰ΩøÁî®Â±ÇÊ¨°ÁªìÊûÑÊù•ÁªÑÁªáËÆæÂ§á: Thing TypesÔºàÊ®°ÊùøÔºâÂÆö‰πâËÆæÂ§áÁ±ªÂà´ÔºåThing Groups Êèê‰æõÁªÑÁªáÁªìÊûÑÔºåThings ‰ª£Ë°®ÂÆûÈôÖËÆæÂ§á„ÄÇËøôÁßçÂ±ÇÊ¨°ÁªìÊûÑÂÆûÁé∞‰∫ÜÂèØÊâ©Â±ïÁöÑËÆæÂ§áÁÆ°ÁêÜ„ÄÅÊâπÈáèÊìç‰ΩúÂíåÊï¥‰∏™ IoT ËΩ¶ÈòüÁöÑÁ≠ñÁï•ÁªßÊâø„ÄÇ",
                "next": "Êàë‰ª¨Â∞ÜÂàõÂª∫Á§∫‰æãËµÑÊ∫êÊù•ÊºîÁ§∫ËøôÁßçÂ±ÇÊ¨°ÁªìÊûÑ",
            },
            "thing_groups": {
                "title": "üìö Â≠¶‰π†Ë¶ÅÁÇπ: Thing Groups - ËÆæÂ§áÁªÑÁªá",
                "content": "Thing Groups ‰∏∫ IoT ËÆæÂ§áÊèê‰æõÂàÜÂ±ÇÁªÑÁªáÔºåÂ∞±ÂÉèÊñá‰ª∂ÁöÑÊñá‰ª∂Â§π‰∏ÄÊ†∑„ÄÇÂÆÉ‰ª¨ÊîØÊåÅÊâπÈáèÊìç‰Ωú„ÄÅÁ≠ñÁï•ÁªßÊâø‰ª•ÂèäÊåâ‰ΩçÁΩÆ„ÄÅÂäüËÉΩÊàñ‰∏öÂä°Ê†áÂáÜËøõË°åÈÄªËæëÂàÜÁªÑ„ÄÇÁªÑÂèØ‰ª•ÂåÖÂê´ÂÖ∂‰ªñÁªÑÔºå‰∏∫Â§ßËßÑÊ®° IoT ÈÉ®ÁΩ≤ÂàõÂª∫ÁÅµÊ¥ªÁöÑÁªÑÁªáÁªìÊûÑ„ÄÇ",
                "next": "Êàë‰ª¨Â∞Ü‰∏∫ËÆæÂ§áÁªÑÁªáÂàõÂª∫ Thing Groups",
            },
            "things": {
                "title": "üìö Â≠¶‰π†Ë¶ÅÁÇπ: Things - ËÆæÂ§áÊ≥®ÂÜå",
                "content": "Things ‰ª£Ë°® AWS IoT Core ‰∏≠ÁöÑÂÆûÈôÖ IoT ËÆæÂ§á„ÄÇÊØè‰∏™ Thing ÈÉΩÊúâÂîØ‰∏ÄÁöÑÂêçÁß∞„ÄÅÂèØÈÄâÂ±ûÊÄßÔºàÂ¶ÇÂ∫èÂàóÂè∑„ÄÅ‰ΩçÁΩÆÔºâÂπ∂‰∏îÂèØ‰ª•ÂàÜÈÖçÁªô Thing Type ‰ª•ÂÆûÁé∞Ê†áÂáÜÂåñ„ÄÇThings ÊòØËÆæÂ§áÁÆ°ÁêÜ„ÄÅÂÆâÂÖ®Á≠ñÁï•ÂíåÂΩ±Â≠êÁä∂ÊÄÅÂêåÊ≠•ÁöÑÂü∫Á°Ä„ÄÇ",
                "next": "Êàë‰ª¨Â∞ÜÂàõÂª∫ÂÖ∑ÊúâÁúüÂÆûÂ±ûÊÄßÁöÑÂçï‰∏™ Things",
            },
            "relationships": {
                "title": "üìö Â≠¶‰π†Ë¶ÅÁÇπ: Thing-Group ÂÖ≥Á≥ª",
                "content": "Â∞Ü Things Ê∑ªÂä†Âà∞ Groups ‰ºöÂàõÂª∫ÁªÑÁªáÂÖ≥Á≥ªÔºåÊîØÊåÅÊâπÈáèÊìç‰ΩúÂíåÁ≠ñÁï•ÁªßÊâø„ÄÇThing ÂèØ‰ª•Â±û‰∫éÂ§ö‰∏™ÁªÑÔºåÁªÑÂèØ‰ª•ÂµåÂ•ó„ÄÇËøôÁßçÂ±ÇÊ¨°ÁªìÊûÑÂØπ‰∫éÂ§ßËßÑÊ®°ËÆæÂ§áËΩ¶ÈòüÁÆ°ÁêÜ„ÄÅÁ≠ñÁï•Â∫îÁî®ÂíåÊåâ‰∏öÂä°ÈÄªËæëÁªÑÁªáËÆæÂ§áËá≥ÂÖ≥ÈáçË¶Å„ÄÇ",
                "next": "Êàë‰ª¨Â∞ÜÊää Things ÂàÜÈÖçÂà∞ÈÄÇÂΩìÁöÑ Groups",
            },
        },
    },
    "pt-BR": {
        "title": "üöÄ Configura√ß√£o de Dados de Exemplo AWS IoT",
        "separator": "=" * 32,
        "aws_config": "üìç Configura√ß√£o AWS:",
        "account_id": "ID da Conta",
        "region": "Regi√£o",
        "aws_context_error": "‚ö†Ô∏è N√£o foi poss√≠vel recuperar o contexto AWS:",
        "aws_credentials_reminder": "   Certifique-se de que as credenciais AWS est√£o configuradas",
        "description_intro": "Este script criar√° recursos IoT de exemplo para aprendizado:",
        "thing_types_desc": "Thing Types:",
        "thing_groups_desc": "Thing Groups:",
        "things_desc": "Things com atributos aleat√≥rios",
        "debug_enabled": "üîç MODO DEBUG HABILITADO",
        "debug_features": [
            "‚Ä¢ Mostrar√° solicita√ß√µes e respostas detalhadas da API",
            "‚Ä¢ Execu√ß√£o mais lenta com pausas estendidas",
            "‚Ä¢ Detalhes completos de erros e rastreamentos",
        ],
        "tip": "üí° Dica: Use a flag --debug ou -d para ver chamadas detalhadas da API",
        "continue_prompt": "Continuar? (s/N): ",
        "setup_cancelled": "Configura√ß√£o cancelada",
        "client_initialized": "‚úÖ Cliente AWS IoT inicializado",
        "client_error": "‚ùå Erro ao inicializar cliente AWS IoT:",
        "credentials_reminder": "Certifique-se de ter credenciais e regi√£o AWS configuradas",
        "no_region_error": "‚ùå Regi√£o AWS n√£o configurada",
        "region_setup_instructions": [
            "Por favor configure sua regi√£o AWS usando um destes m√©todos:",
            "1. Definir vari√°vel de ambiente: export AWS_DEFAULT_REGION=us-east-1",
            "2. Configurar AWS CLI: aws configure",
            "3. Definir regi√£o no arquivo de credenciais AWS",
        ],
        "invalid_credentials": "‚ùå Credenciais AWS inv√°lidas",
        "credentials_check_failed": "‚ùå Vari√°veis de ambiente obrigat√≥rias ausentes:",
        "credentials_instructions": [
            "Por favor exporte suas credenciais AWS:",
            "export AWS_ACCESS_KEY_ID=<sua-access-key>",
            "export AWS_SECRET_ACCESS_KEY=<sua-secret-key>",
            "export AWS_SESSION_TOKEN=<seu-session-token>  # Opcional para credenciais tempor√°rias",
        ],
        "step_1_title": "Criando Thing Types",
        "step_2_title": "Criando Thing Groups",
        "step_3_title": "Criando {} Things com atributos",
        "step_4_title": "Adicionando Things aos Thing Groups",
        "step_5_title": "Resumo da Configura√ß√£o",
        "creating": "Criando",
        "created": "Criado",
        "already_exists": "j√° existe, pulando",
        "deprecated_undeprecating": "est√° depreciado, removendo deprecia√ß√£o...",
        "undeprecated": "deprecia√ß√£o removida com sucesso",
        "already_active": "j√° existe e est√° ativo",
        "error_checking": "Erro verificando",
        "error_creating": "Erro criando",
        "creating_thing": "üì± Criando Thing:",
        "customer_id": "ID do Cliente:",
        "country": "Pa√≠s:",
        "manufacturing_date": "Data de Fabrica√ß√£o:",
        "thing_type": "Thing Type:",
        "adding_to_group": "Adicionando {} ao grupo {}",
        "added_to_group": "Adicionado {} a {}",
        "error_adding": "Erro adicionando {} a {}:",
        "resources_created": "üìä Recursos Criados:",
        "things": "Things:",
        "thing_types": "Thing Types:",
        "thing_groups": "Thing Groups:",
        "sample_thing_names": "üéØ Nomes de Things de Exemplo:",
        "and_more": "... e mais {}",
        "error_summary": "‚ùå Erro obtendo resumo:",
        "setup_complete": "üéâ Configura√ß√£o completa! Agora voc√™ pode usar iot_registry_explorer.py para explorar os dados.",
        "debug_session_complete": "üîç DEBUG: Sess√£o conclu√≠da com log detalhado da API",
        "setup_cancelled_user": "üëã Configura√ß√£o cancelada pelo usu√°rio. Tchau!",
        "debug_creating": "üîç DEBUG: Criando",
        "debug_api_call": "üì§ Chamada API:",
        "debug_input_params": "üì• Par√¢metros de Entrada:",
        "debug_api_response": "üì§ Resposta API:",
        "debug_full_error": "üîç DEBUG: Resposta completa de erro:",
        "debug_full_traceback": "üîç DEBUG: Rastreamento completo:",
        "api_error": "‚ùå Erro da API AWS em",
        "missing_param_error": "‚ùå Par√¢metro obrigat√≥rio ausente em",
        "invalid_value_error": "‚ùå Valor inv√°lido em",
        "unexpected_error": "‚ùå Erro inesperado em",
        "press_enter": "Pressione Enter para continuar...",
        "learning_moments": {
            "hierarchy": {
                "title": "üìö MOMENTO DE APRENDIZADO: Hierarquia de Recursos AWS IoT",
                "content": "AWS IoT usa uma estrutura hier√°rquica para organizar dispositivos: Thing Types (modelos) definem categorias de dispositivos, Thing Groups fornecem estrutura organizacional, e Things representam dispositivos reais. Esta hierarquia permite gerenciamento escal√°vel de dispositivos, opera√ß√µes em lote e heran√ßa de pol√≠ticas em sua frota IoT.",
                "next": "Criaremos recursos de exemplo para demonstrar esta hierarquia",
            },
            "thing_groups": {
                "title": "üìö MOMENTO DE APRENDIZADO: Thing Groups - Organiza√ß√£o de Dispositivos",
                "content": "Thing Groups fornecem organiza√ß√£o hier√°rquica para seus dispositivos IoT, similar a pastas para arquivos. Eles permitem opera√ß√µes em lote, heran√ßa de pol√≠ticas e agrupamento l√≥gico por localiza√ß√£o, fun√ß√£o ou crit√©rios de neg√≥cio. Grupos podem conter outros grupos, criando estruturas organizacionais flex√≠veis para implanta√ß√µes IoT grandes.",
                "next": "Criaremos Thing Groups para organiza√ß√£o de dispositivos",
            },
            "things": {
                "title": "üìö MOMENTO DE APRENDIZADO: Things - Registro de Dispositivos",
                "content": "Things representam seus dispositivos IoT reais no AWS IoT Core. Cada Thing tem um nome √∫nico, atributos opcionais (como n√∫mero de s√©rie, localiza√ß√£o), e pode ser atribu√≠do a um Thing Type para padroniza√ß√£o. Things s√£o a base para gerenciamento de dispositivos, pol√≠ticas de seguran√ßa e sincroniza√ß√£o de estado shadow.",
                "next": "Criaremos Things individuais com atributos realistas",
            },
            "relationships": {
                "title": "üìö MOMENTO DE APRENDIZADO: Relacionamentos Thing-Group",
                "content": "Adicionar Things a Groups cria relacionamentos organizacionais que permitem opera√ß√µes em lote e heran√ßa de pol√≠ticas. Um Thing pode pertencer a m√∫ltiplos grupos, e grupos podem ser aninhados. Esta hierarquia √© essencial para gerenciar frotas de dispositivos em escala, aplicar pol√≠ticas e organizar dispositivos por l√≥gica de neg√≥cio.",
                "next": "Atribuiremos Things aos Groups apropriados",
            },
        },
    },
    "ko": {
        "title": "üöÄ AWS IoT ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï",
        "separator": "=" * 32,
        "aws_config": "üìç AWS Íµ¨ÏÑ±:",
        "account_id": "Í≥ÑÏ†ï ID",
        "region": "Î¶¨Ï†Ñ",
        "aws_context_error": "‚ö†Ô∏è AWS Ïª®ÌÖçÏä§Ìä∏Î•º Í≤ÄÏÉâÌï† Ïàò ÏóÜÏäµÎãàÎã§:",
        "aws_credentials_reminder": "   AWS ÏûêÍ≤© Ï¶ùÎ™ÖÏù¥ Íµ¨ÏÑ±ÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏ÌïòÏÑ∏Ïöî",
        "description_intro": "Ïù¥ Ïä§ÌÅ¨Î¶ΩÌä∏Îäî ÌïôÏäµÏùÑ ÏúÑÌïú ÏÉòÌîå IoT Î¶¨ÏÜåÏä§Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§:",
        "thing_types_desc": "Thing Types:",
        "thing_groups_desc": "Thing Groups:",
        "things_desc": "Î¨¥ÏûëÏúÑ ÏÜçÏÑ±ÏùÑ Í∞ÄÏßÑ Things",
        "debug_enabled": "üîç ÎîîÎ≤ÑÍ∑∏ Î™®Îìú ÌôúÏÑ±Ìôî",
        "debug_features": [
            "‚Ä¢ ÏÉÅÏÑ∏Ìïú API ÏöîÏ≤≠ Î∞è ÏùëÎãµÏùÑ ÌëúÏãúÌï©ÎãàÎã§",
            "‚Ä¢ ÌôïÏû•Îêú ÏùºÏãú Ï†ïÏßÄÎ°ú Ïã§Ìñâ ÏÜçÎèÑÍ∞Ä ÎäêÎ†§ÏßëÎãàÎã§",
            "‚Ä¢ ÏôÑÏ†ÑÌïú Ïò§Î•ò ÏÑ∏Î∂Ä Ï†ïÎ≥¥ Î∞è Ï∂îÏ†Å",
        ],
        "tip": "üí° ÌåÅ: --debug ÎòêÎäî -d ÌîåÎûòÍ∑∏Î•º ÏÇ¨Ïö©ÌïòÏó¨ ÏÉÅÏÑ∏Ìïú API Ìò∏Ï∂úÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî",
        "continue_prompt": "Í≥ÑÏÜçÌïòÏãúÍ≤†ÏäµÎãàÍπå? (y/N): ",
        "setup_cancelled": "ÏÑ§Ï†ïÏù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§",
        "client_initialized": "‚úÖ AWS IoT ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§",
        "client_error": "‚ùå AWS IoT ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî Ïò§Î•ò:",
        "credentials_reminder": "AWS ÏûêÍ≤© Ï¶ùÎ™ÖÍ≥º Î¶¨Ï†ÑÏù¥ Íµ¨ÏÑ±ÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏ÌïòÏÑ∏Ïöî",
        "no_region_error": "‚ùå AWS Î¶¨Ï†ÑÏù¥ Íµ¨ÏÑ±ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§",
        "region_setup_instructions": [
            "Îã§Ïùå Î∞©Î≤ï Ï§ë ÌïòÎÇòÎ•º ÏÇ¨Ïö©ÌïòÏó¨ AWS Î¶¨Ï†ÑÏùÑ Íµ¨ÏÑ±ÌïòÏÑ∏Ïöî:",
            "1. ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï: export AWS_DEFAULT_REGION=us-east-1",
            "2. AWS CLI Íµ¨ÏÑ±: aws configure",
            "3. AWS ÏûêÍ≤© Ï¶ùÎ™Ö ÌååÏùºÏóêÏÑú Î¶¨Ï†Ñ ÏÑ§Ï†ï",
        ],
        "invalid_credentials": "‚ùå Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ AWS ÏûêÍ≤© Ï¶ùÎ™Ö",
        "credentials_check_failed": "‚ùå ÌïÑÏàò ÌôòÍ≤Ω Î≥ÄÏàòÍ∞Ä ÎàÑÎùΩÎêòÏóàÏäµÎãàÎã§:",
        "credentials_instructions": [
            "AWS ÏûêÍ≤© Ï¶ùÎ™ÖÏùÑ ÎÇ¥Î≥¥ÎÇ¥ÏÑ∏Ïöî:",
            "export AWS_ACCESS_KEY_ID=<your-access-key>",
            "export AWS_SECRET_ACCESS_KEY=<your-secret-key>",
            "export AWS_SESSION_TOKEN=<your-session-token>  # ÏûÑÏãú ÏûêÍ≤© Ï¶ùÎ™ÖÏùò Í≤ΩÏö∞ ÏÑ†ÌÉùÏÇ¨Ìï≠",
        ],
        "step_1_title": "Thing Types ÏÉùÏÑ± Ï§ë",
        "step_2_title": "Thing Groups ÏÉùÏÑ± Ï§ë",
        "step_3_title": "ÏÜçÏÑ±Ïù¥ ÏûàÎäî {} Things ÏÉùÏÑ± Ï§ë",
        "step_4_title": "ThingsÎ•º Thing GroupsÏóê Ï∂îÍ∞Ä Ï§ë",
        "step_5_title": "ÏÑ§Ï†ï ÏöîÏïΩ",
        "creating": "ÏÉùÏÑ± Ï§ë",
        "created": "ÏÉùÏÑ±Îê®",
        "already_exists": "Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎØÄÎ°ú Í±¥ÎÑàÎúÅÎãàÎã§",
        "deprecated_undeprecating": "Îäî Îçî Ïù¥ÏÉÅ ÏÇ¨Ïö©ÎêòÏßÄ ÏïäÏäµÎãàÎã§. ÏÇ¨Ïö© Ï§ëÎã®ÏùÑ Ìï¥Ï†úÌïòÎäî Ï§ë...",
        "undeprecated": "ÏÇ¨Ïö© Ï§ëÎã® Ìï¥Ï†úÍ∞Ä ÏÑ±Í≥µÌñàÏäµÎãàÎã§",
        "already_active": "Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÍ≥† ÌôúÏÑ± ÏÉÅÌÉúÏûÖÎãàÎã§",
        "error_checking": "ÌôïÏù∏ Ïò§Î•ò",
        "error_creating": "ÏÉùÏÑ± Ïò§Î•ò",
        "creating_thing": "üì± Thing ÏÉùÏÑ± Ï§ë:",
        "customer_id": "Í≥†Í∞ù ID:",
        "country": "Íµ≠Í∞Ä:",
        "manufacturing_date": "Ï†úÏ°∞ ÎÇ†Ïßú:",
        "thing_type": "Thing Type:",
        "adding_to_group": "{}Î•º Í∑∏Î£π {}Ïóê Ï∂îÍ∞Ä Ï§ë",
        "added_to_group": "{}Î•º {}Ïóê Ï∂îÍ∞ÄÌñàÏäµÎãàÎã§",
        "error_adding": "{}Î•º {}Ïóê Ï∂îÍ∞ÄÌïòÎäî Ï§ë Ïò§Î•ò:",
        "resources_created": "üìä ÏÉùÏÑ±Îêú Î¶¨ÏÜåÏä§:",
        "things": "Things:",
        "thing_types": "Thing Types:",
        "thing_groups": "Thing Groups:",
        "sample_thing_names": "üéØ ÏÉòÌîå Thing Ïù¥Î¶Ñ:",
        "and_more": "... Í∑∏Î¶¨Í≥† {} Í∞ú Îçî",
        "error_summary": "‚ùå ÏöîÏïΩÏùÑ Í∞ÄÏ†∏Ïò§Îäî Ï§ë Ïò§Î•ò:",
        "setup_complete": "üéâ ÏÑ§Ï†ï ÏôÑÎ£å! Ïù¥Ï†ú iot_registry_explorer.pyÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Îç∞Ïù¥ÌÑ∞Î•º ÌÉêÏÉâÌï† Ïàò ÏûàÏäµÎãàÎã§.",
        "debug_session_complete": "üîç ÎîîÎ≤ÑÍ∑∏: ÏÉÅÏÑ∏Ìïú API Î°úÍπÖÏúºÎ°ú ÏÑ∏ÏÖòÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§",
        "setup_cancelled_user": "üëã ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÑ§Ï†ïÏùÑ Ï∑®ÏÜåÌñàÏäµÎãàÎã§. ÏïàÎÖïÌûà Í∞ÄÏÑ∏Ïöî!",
        "debug_creating": "üîç ÎîîÎ≤ÑÍ∑∏: ÏÉùÏÑ± Ï§ë",
        "debug_api_call": "üì§ API Ìò∏Ï∂ú:",
        "debug_input_params": "üì• ÏûÖÎ†• Îß§Í∞úÎ≥ÄÏàò:",
        "debug_api_response": "üì§ API ÏùëÎãµ:",
        "debug_full_error": "üîç ÎîîÎ≤ÑÍ∑∏: Ï†ÑÏ≤¥ Ïò§Î•ò ÏùëÎãµ:",
        "debug_full_traceback": "üîç ÎîîÎ≤ÑÍ∑∏: Ï†ÑÏ≤¥ Ï∂îÏ†Å:",
        "api_error": "‚ùå AWS API Ïò§Î•ò",
        "missing_param_error": "‚ùå ÌïÑÏàò Îß§Í∞úÎ≥ÄÏàò ÎàÑÎùΩ",
        "invalid_value_error": "‚ùå Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Í∞í",
        "unexpected_error": "‚ùå ÏòàÏÉÅÏπò Î™ªÌïú Ïò§Î•ò",
        "press_enter": "Í≥ÑÏÜçÌïòÎ†§Î©¥ EnterÎ•º ÎàÑÎ•¥ÏÑ∏Ïöî...",
        "learning_moments": {
            "hierarchy": {
                "title": "üìö ÌïôÏäµ Ìè¨Ïù∏Ìä∏: AWS IoT Î¶¨ÏÜåÏä§ Í≥ÑÏ∏µ Íµ¨Ï°∞",
                "content": "AWS IoTÎäî ÎîîÎ∞îÏù¥Ïä§Î•º Íµ¨ÏÑ±ÌïòÍ∏∞ ÏúÑÌï¥ Í≥ÑÏ∏µ Íµ¨Ï°∞Î•º ÏÇ¨Ïö©Ìï©ÎãàÎã§: Thing Types(ÌÖúÌîåÎ¶ø)Îäî ÎîîÎ∞îÏù¥Ïä§ Ïπ¥ÌÖåÍ≥†Î¶¨Î•º Ï†ïÏùòÌïòÍ≥†, Thing GroupsÎäî Ï°∞ÏßÅ Íµ¨Ï°∞Î•º Ï†úÍ≥µÌïòÎ©∞, ThingsÎäî Ïã§Ï†ú ÎîîÎ∞îÏù¥Ïä§Î•º ÎÇòÌÉÄÎÉÖÎãàÎã§. Ïù¥ Í≥ÑÏ∏µ Íµ¨Ï°∞Îäî ÌôïÏû• Í∞ÄÎä•Ìïú ÎîîÎ∞îÏù¥Ïä§ Í¥ÄÎ¶¨, ÎåÄÎüâ ÏûëÏóÖ Î∞è IoT ÌîåÎ¶ø Ï†ÑÏ≤¥Ïùò Ï†ïÏ±Ö ÏÉÅÏÜçÏùÑ Í∞ÄÎä•ÌïòÍ≤å Ìï©ÎãàÎã§.",
                "next": "Ïù¥ Í≥ÑÏ∏µ Íµ¨Ï°∞Î•º Î≥¥Ïó¨Ï£ºÍ∏∞ ÏúÑÌï¥ ÏÉòÌîå Î¶¨ÏÜåÏä§Î•º ÏÉùÏÑ±ÌïòÍ≤†ÏäµÎãàÎã§",
            },
            "thing_groups": {
                "title": "üìö ÌïôÏäµ Ìè¨Ïù∏Ìä∏: Thing Groups - ÎîîÎ∞îÏù¥Ïä§ Ï°∞ÏßÅ",
                "content": "Thing GroupsÎäî ÌååÏùºÏùò Ìè¥ÎçîÏôÄ Ïú†ÏÇ¨ÌïòÍ≤å IoT ÎîîÎ∞îÏù¥Ïä§Ïóê ÎåÄÌïú Í≥ÑÏ∏µÏ†Å Ï°∞ÏßÅÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§. ÏúÑÏπò, Í∏∞Îä• ÎòêÎäî ÎπÑÏ¶àÎãàÏä§ Í∏∞Ï§ÄÏóê Îî∞Î•∏ ÎåÄÎüâ ÏûëÏóÖ, Ï†ïÏ±Ö ÏÉÅÏÜç Î∞è ÎÖºÎ¶¨Ï†Å Í∑∏Î£πÌôîÎ•º Í∞ÄÎä•ÌïòÍ≤å Ìï©ÎãàÎã§. Í∑∏Î£πÏùÄ Îã§Î•∏ Í∑∏Î£πÏùÑ Ìè¨Ìï®Ìï† Ïàò ÏûàÏñ¥ ÎåÄÍ∑úÎ™® IoT Î∞∞Ìè¨Î•º ÏúÑÌïú Ïú†Ïó∞Ìïú Ï°∞ÏßÅ Íµ¨Ï°∞Î•º ÎßåÎì≠ÎãàÎã§.",
                "next": "ÎîîÎ∞îÏù¥Ïä§ Ï°∞ÏßÅÏùÑ ÏúÑÌïú Thing GroupsÎ•º ÏÉùÏÑ±ÌïòÍ≤†ÏäµÎãàÎã§",
            },
            "things": {
                "title": "üìö ÌïôÏäµ Ìè¨Ïù∏Ìä∏: Things - ÎîîÎ∞îÏù¥Ïä§ Îì±Î°ù",
                "content": "ThingsÎäî AWS IoT CoreÏóêÏÑú Ïã§Ï†ú IoT ÎîîÎ∞îÏù¥Ïä§Î•º ÎÇòÌÉÄÎÉÖÎãàÎã§. Í∞Å ThingÏùÄ Í≥†Ïú†Ìïú Ïù¥Î¶Ñ, ÏÑ†ÌÉùÏ†Å ÏÜçÏÑ±(ÏùºÎ†® Î≤àÌò∏, ÏúÑÏπò Îì±)ÏùÑ Í∞ÄÏßÄÎ©∞ ÌëúÏ§ÄÌôîÎ•º ÏúÑÌï¥ Thing TypeÏóê Ìï†ÎãπÎê† Ïàò ÏûàÏäµÎãàÎã§. ThingsÎäî ÎîîÎ∞îÏù¥Ïä§ Í¥ÄÎ¶¨, Î≥¥Ïïà Ï†ïÏ±Ö Î∞è ÏÑÄÎèÑÏö∞ ÏÉÅÌÉú ÎèôÍ∏∞ÌôîÏùò Í∏∞Ï¥àÏûÖÎãàÎã§.",
                "next": "ÌòÑÏã§Ï†ÅÏù∏ ÏÜçÏÑ±ÏùÑ Í∞ÄÏßÑ Í∞úÎ≥Ñ ThingsÎ•º ÏÉùÏÑ±ÌïòÍ≤†ÏäµÎãàÎã§",
            },
            "relationships": {
                "title": "üìö ÌïôÏäµ Ìè¨Ïù∏Ìä∏: Thing-Group Í¥ÄÍ≥Ñ",
                "content": "ThingsÎ•º GroupsÏóê Ï∂îÍ∞ÄÌïòÎ©¥ ÎåÄÎüâ ÏûëÏóÖÍ≥º Ï†ïÏ±Ö ÏÉÅÏÜçÏùÑ Í∞ÄÎä•ÌïòÍ≤å ÌïòÎäî Ï°∞ÏßÅÏ†Å Í¥ÄÍ≥ÑÍ∞Ä ÏÉùÏÑ±Îê©ÎãàÎã§. ThingÏùÄ Ïó¨Îü¨ Í∑∏Î£πÏóê ÏÜçÌï† Ïàò ÏûàÍ≥†, Í∑∏Î£πÏùÄ Ï§ëÏ≤©Îê† Ïàò ÏûàÏäµÎãàÎã§. Ïù¥ Í≥ÑÏ∏µ Íµ¨Ï°∞Îäî Í∑úÎ™®Ïóê ÎßûÎäî ÎîîÎ∞îÏù¥Ïä§ ÌîåÎ¶ø Í¥ÄÎ¶¨, Ï†ïÏ±Ö Ï†ÅÏö© Î∞è ÎπÑÏ¶àÎãàÏä§ Î°úÏßÅÏóê Îî∞Î•∏ ÎîîÎ∞îÏù¥Ïä§ Ï°∞ÏßÅÌôîÏóê ÌïÑÏàòÏ†ÅÏûÖÎãàÎã§.",
                "next": "Ï†ÅÏ†àÌïú GroupsÏóê ThingsÎ•º Ìï†ÎãπÌïòÍ≤†ÏäµÎãàÎã§",
            },
        },
    },
}

# Global variable for user's language preference
USER_LANG = "en"

# Configuration
THING_COUNT = 20
THING_TYPES = ["SedanVehicle", "SUVVehicle", "TruckVehicle"]
THING_GROUPS = ["CustomerFleet", "TestFleet", "MaintenanceFleet", "DealerFleet"]
COUNTRIES = ["US", "DE", "JP", "CA", "BR", "GB", "FR", "AU", "IN", "MX"]


def get_language():
    """Get user's preferred language"""
    # Check environment variable first
    env_lang = os.getenv("AWS_IOT_LANG", "").lower()
    if env_lang in ["es", "spanish", "espa√±ol"]:
        return "es"
    elif env_lang in ["en", "english"]:
        return "en"
    elif env_lang in ["ja", "japanese", "Êó•Êú¨Ë™û", "jp"]:
        return "ja"
    elif env_lang in ["zh-cn", "chinese", "‰∏≠Êñá", "zh"]:
        return "zh-CN"
    elif env_lang in ["pt", "pt-br", "portuguese", "portugu√™s"]:
        return "pt-BR"
    elif env_lang in ["ko", "korean", "ÌïúÍµ≠Ïñ¥", "kr"]:
        return "ko"

    # If no environment variable, ask user
    print("üåç Language Selection / Selecci√≥n de Idioma / Ë®ÄË™ûÈÅ∏Êäû / ËØ≠Ë®ÄÈÄâÊã© / Sele√ß√£o de Idioma / Ïñ∏Ïñ¥ ÏÑ†ÌÉù")
    print("=" * 80)
    print("1. English")
    print("2. Espa√±ol (Spanish)")
    print("3. Êó•Êú¨Ë™û (Japanese)")
    print("4. ‰∏≠Êñá (Chinese)")
    print("5. Portugu√™s (Portuguese)")
    print("6. ÌïúÍµ≠Ïñ¥ (Korean)")

    while True:
        try:
            choice = input(
                "\nSelect language / Seleccionar idioma / Ë®ÄË™û„ÇíÈÅ∏Êäû / ÈÄâÊã©ËØ≠Ë®Ä / Selecionar idioma / Ïñ∏Ïñ¥ ÏÑ†ÌÉù (1-6): "
            ).strip()
            if choice == "1":
                return "en"
            elif choice == "2":
                return "es"
            elif choice == "3":
                return "ja"
            elif choice == "4":
                return "zh-CN"
            elif choice == "5":
                return "pt-BR"
            elif choice == "6":
                return "ko"
            else:
                print("Invalid choice. Please select 1-6.")
                print("Selecci√≥n inv√°lida. Por favor selecciona 1-6.")
                print("ÁÑ°Âäπ„Å™ÈÅ∏Êäû„Åß„Åô„ÄÇ1-6„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
                print("Êó†ÊïàÈÄâÊã©„ÄÇËØ∑ÈÄâÊã© 1-6„ÄÇ")
                print("Escolha inv√°lida. Por favor selecione 1-6.")
                print("ÏûòÎ™ªÎêú ÏÑ†ÌÉùÏûÖÎãàÎã§. 1-6ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.")
        except KeyboardInterrupt:
            print("\n\nGoodbye! / ¬°Adi√≥s! / „Åï„Çà„ÅÜ„Å™„ÇâÔºÅ / ÂÜçËßÅÔºÅ / Tchau! / ÏïàÎÖïÌûà Í∞ÄÏÑ∏Ïöî!")
            sys.exit(0)


def get_message(key, lang="en"):
    """Get localized message"""
    return MESSAGES.get(lang, MESSAGES["en"]).get(key, key)


def get_learning_moment(moment_key, lang="en"):
    """Get localized learning moment"""
    return MESSAGES.get(lang, MESSAGES["en"]).get("learning_moments", {}).get(moment_key, {})


def print_learning_moment(moment_key, lang="en"):
    """Print a formatted learning moment"""
    moment = get_learning_moment(moment_key, lang)
    if moment:
        print(f"\n{moment.get('title', '')}")
        print(moment.get("content", ""))
        print(f"\nüîÑ NEXT: {moment.get('next', '')}")


def check_credentials():
    """Validate AWS credentials are available"""
    required_vars = ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]

    if missing_vars:
        print(get_message("credentials_check_failed", USER_LANG))
        for var in missing_vars:
            print(f"   - {var}")
        print()
        for instruction in get_message("credentials_instructions", USER_LANG):
            print(instruction)
        print()
        sys.exit(1)


def print_step(step, description):
    """Print setup step with formatting"""
    print(f"\nüîß Step {step}: {description}")
    print("-" * 50)


def safe_create(func, resource_type, name, debug=False, **kwargs):
    """Safely create resource with error handling and optional debug info"""
    try:
        if debug:
            print(f"\n{get_message('debug_creating', USER_LANG)} {resource_type}: {name}")
            print(f"{get_message('debug_api_call', USER_LANG)} {func.__name__}")
            print(get_message("debug_input_params", USER_LANG))
            print(json.dumps(kwargs, indent=2, default=str))
        else:
            print(f"{get_message('creating', USER_LANG)} {resource_type}: {name}")

        response = func(**kwargs)

        if debug:
            print(get_message("debug_api_response", USER_LANG))
            print(json.dumps(response, indent=2, default=str))

        print(f"‚úÖ {get_message('created', USER_LANG)} {resource_type}: {name}")
        time.sleep(0.5 if not debug else 1.0)  # nosemgrep: arbitrary-sleep
        return response
    except ClientError as e:
        if e.response["Error"]["Code"] == "ResourceAlreadyExistsException":
            print(f"‚ö†Ô∏è  {resource_type} {name} {get_message('already_exists', USER_LANG)}")
        else:
            print(f"‚ùå {get_message('error_creating', USER_LANG)} {resource_type} {name}: {e.response['Error']['Message']}")
            if debug:
                print(get_message("debug_full_error", USER_LANG))
                print(json.dumps(e.response, indent=2, default=str))
        time.sleep(0.5)  # nosemgrep: arbitrary-sleep
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        if debug:
            print(get_message("debug_full_traceback", USER_LANG))
            traceback.print_exc()
        time.sleep(0.5)  # nosemgrep: arbitrary-sleep


def create_thing_types(iot, debug=False):
    """Create predefined Thing Types"""
    print_step(1, get_message("step_1_title", USER_LANG))

    for thing_type in THING_TYPES:
        # Check if Thing Type already exists
        try:
            response = iot.describe_thing_type(thingTypeName=thing_type)
            if response.get("thingTypeMetadata", {}).get("deprecated"):
                print(f"   ‚ö†Ô∏è Thing Type {thing_type} {get_message('deprecated_undeprecating', USER_LANG)}")
                iot.deprecate_thing_type(thingTypeName=thing_type, undoDeprecate=True)
                print(f"   ‚úÖ Thing Type {thing_type} {get_message('undeprecated', USER_LANG)}")
            else:
                print(f"   ‚ÑπÔ∏è Thing Type {thing_type} {get_message('already_active', USER_LANG)}")
            continue
        except iot.exceptions.ResourceNotFoundException:
            # Thing Type doesn't exist, create it
            pass
        except Exception as e:
            print(f"   ‚ùå {get_message('error_checking', USER_LANG)} Thing Type {thing_type}: {str(e)}")
            continue

        description = f"Template for {thing_type.replace('Vehicle', ' Vehicle')} category"
        safe_create(
            iot.create_thing_type,
            "Thing Type",
            thing_type,
            debug=debug,
            thingTypeName=thing_type,
            thingTypeProperties={
                "thingTypeDescription": description,
                "searchableAttributes": ["customerId", "country", "manufacturingDate"],
            },
        )


def create_thing_groups(iot, debug=False):
    """Create predefined Thing Groups"""
    print_step(2, get_message("step_2_title", USER_LANG))

    for group in THING_GROUPS:
        description = f"Group for devices in {group.replace('Floor', ' Floor')}"
        safe_create(
            iot.create_thing_group,
            "Thing Group",
            group,
            debug=debug,
            thingGroupName=group,
            thingGroupProperties={
                "thingGroupDescription": description,
                "attributePayload": {"attributes": {"location": group, "managed": "true"}},
            },
        )


def generate_random_date():
    """Generate random date within last year"""
    end_date = datetime.now()
    start_date = end_date - timedelta(days=365)
    random_date = start_date + timedelta(seconds=random.randint(0, int((end_date - start_date).total_seconds())))
    return random_date.strftime("%Y-%m-%d")


def create_things(iot, debug=False):
    """Create sample Things with attributes"""
    print_step(3, get_message("step_3_title", USER_LANG).format(THING_COUNT))

    for i in range(1, THING_COUNT + 1):
        thing_name = f"Vehicle-VIN-{i:03d}"
        customer_id = str(uuid.uuid4())
        country = random.choice(COUNTRIES)
        manufacturing_date = generate_random_date()
        thing_type = random.choice(THING_TYPES)

        if not debug:
            print(f"\n{get_message('creating_thing', USER_LANG)} {thing_name}")
            print(f"   {get_message('customer_id', USER_LANG)} {customer_id}")
            print(f"   {get_message('country', USER_LANG)} {country}")
            print(f"   {get_message('manufacturing_date', USER_LANG)} {manufacturing_date}")
            print(f"   {get_message('thing_type', USER_LANG)} {thing_type}")
            time.sleep(0.8)  # nosemgrep: arbitrary-sleep

        safe_create(
            iot.create_thing,
            "Thing",
            thing_name,
            debug=debug,
            thingName=thing_name,
            thingTypeName=thing_type,
            attributePayload={
                "attributes": {"customerId": customer_id, "country": country, "manufacturingDate": manufacturing_date}
            },
        )


def add_things_to_groups(iot, debug=False):
    """Add Things to random Thing Groups"""
    print_step(4, get_message("step_4_title", USER_LANG))

    for i in range(1, THING_COUNT + 1):
        thing_name = f"Vehicle-VIN-{i:03d}"
        group_name = random.choice(THING_GROUPS)

        try:
            if debug:
                print(f"\nüîç DEBUG: {get_message('adding_to_group', USER_LANG).format(thing_name, group_name)}")
                print(f"{get_message('debug_api_call', USER_LANG)} add_thing_to_thing_group")
                print(get_message("debug_input_params", USER_LANG))
                print(json.dumps({"thingGroupName": group_name, "thingName": thing_name}, indent=2))
            else:
                print(get_message("adding_to_group", USER_LANG).format(thing_name, group_name))

            response = iot.add_thing_to_thing_group(thingGroupName=group_name, thingName=thing_name)

            if debug:
                print(get_message("debug_api_response", USER_LANG))
                print(json.dumps(response, indent=2, default=str))

            print(f"‚úÖ {get_message('added_to_group', USER_LANG).format(thing_name, group_name)}")
            time.sleep(0.3 if not debug else 1.0)  # nosemgrep: arbitrary-sleep
        except ClientError as e:
            print(
                f"‚ùå {get_message('error_adding', USER_LANG).format(thing_name, group_name)} {e.response['Error']['Message']}"
            )
            if debug:
                print(get_message("debug_full_error", USER_LANG))
                print(json.dumps(e.response, indent=2, default=str))
            time.sleep(0.3)  # nosemgrep: arbitrary-sleep


def print_summary(iot):
    """Print summary of created resources"""
    print_step(5, get_message("step_5_title", USER_LANG))

    try:
        things = iot.list_things()
        thing_types = iot.list_thing_types()
        thing_groups = iot.list_thing_groups()

        print(get_message("resources_created", USER_LANG))
        print(f"   {get_message('things', USER_LANG)} {len(things.get('things', []))}")
        print(f"   {get_message('thing_types', USER_LANG)} {len(thing_types.get('thingTypes', []))}")
        print(f"   {get_message('thing_groups', USER_LANG)} {len(thing_groups.get('thingGroups', []))}")

        print(f"\n{get_message('sample_thing_names', USER_LANG)}")
        for thing in things.get("things", [])[:5]:
            print(f"   - {thing['thingName']}")
        if len(things.get("things", [])) > 5:
            print(f"   {get_message('and_more', USER_LANG).format(len(things.get('things', [])) - 5)}")

    except Exception as e:
        print(f"{get_message('error_summary', USER_LANG)} {str(e)}")


def main():

    try:
        # Get user's preferred language
        global USER_LANG
        USER_LANG = get_language()

        # Check for debug flag
        debug_mode = "--debug" in sys.argv or "-d" in sys.argv

        print(get_message("title", USER_LANG))
        print(get_message("separator", USER_LANG))

        # Check credentials first - exit immediately if missing
        check_credentials()

        # Display AWS context first
        try:
            sts = boto3.client("sts")
            iot = boto3.client("iot")
            identity = sts.get_caller_identity()

            print(get_message("aws_config", USER_LANG))
            print(f"   {get_message('account_id', USER_LANG)}: {identity['Account']}")
            print(f"   {get_message('region', USER_LANG)}: {iot.meta.region_name}")
            print()

        except Exception as e:
            print(f"{get_message('aws_context_error', USER_LANG)} {str(e)}")
            print(get_message("aws_credentials_reminder", USER_LANG))
            print()

        print(get_message("description_intro", USER_LANG))
        print(f"‚Ä¢ {len(THING_TYPES)} {get_message('thing_types_desc', USER_LANG)} {', '.join(THING_TYPES)}")
        print(f"‚Ä¢ {len(THING_GROUPS)} {get_message('thing_groups_desc', USER_LANG)} {', '.join(THING_GROUPS)}")
        print(f"‚Ä¢ {THING_COUNT} {get_message('things_desc', USER_LANG)}")

        if debug_mode:
            print(f"\n{get_message('debug_enabled', USER_LANG)}")
            for feature in get_message("debug_features", USER_LANG):
                print(feature)
        else:
            print(f"\n{get_message('tip', USER_LANG)}")

        print(get_message("separator", USER_LANG))

        confirm = input(get_message("continue_prompt", USER_LANG)).strip().lower()
        if confirm not in ["y", "s"]:  # Accept 'y' (yes), 's' (s√≠/sim) for Spanish/Portuguese
            print(get_message("setup_cancelled", USER_LANG))
            return

        try:
            iot = boto3.client("iot")
            print(get_message("client_initialized", USER_LANG))

            if debug_mode:
                print("üîç DEBUG: Client configuration:")
                print(f"   Service: {iot.meta.service_model.service_name}")
                print(f"   API Version: {iot.meta.service_model.api_version}")
        except NoCredentialsError:
            print(get_message("invalid_credentials", USER_LANG))
            sys.exit(1)
        except NoRegionError:
            print(get_message("no_region_error", USER_LANG))
            for instruction in get_message("region_setup_instructions", USER_LANG):
                print(f"   {instruction}")
            sys.exit(1)
        except Exception as e:
            print(f"{get_message('client_error', USER_LANG)} {str(e)}")
            print(get_message("credentials_reminder", USER_LANG))
            return

        print_learning_moment("hierarchy", USER_LANG)
        input(get_message("press_enter", USER_LANG))

        # Execute setup steps with debug flag
        create_thing_types(iot, debug=debug_mode)

        print_learning_moment("thing_groups", USER_LANG)
        input(get_message("press_enter", USER_LANG))

        create_thing_groups(iot, debug=debug_mode)

        print_learning_moment("things", USER_LANG)
        input(get_message("press_enter", USER_LANG))

        create_things(iot, debug=debug_mode)

        print_learning_moment("relationships", USER_LANG)
        input(get_message("press_enter", USER_LANG))

        add_things_to_groups(iot, debug=debug_mode)
        print_summary(iot)

        print(f"\n{get_message('setup_complete', USER_LANG)}")

        if debug_mode:
            print(f"\n{get_message('debug_session_complete', USER_LANG)}")

    except KeyboardInterrupt:
        print(f"\n\n{get_message('setup_cancelled_user', USER_LANG)}")


if __name__ == "__main__":
    main()
