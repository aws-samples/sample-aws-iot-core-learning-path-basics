#!/usr/bin/env python3
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

import json
import os
import sys

import boto3
from botocore.exceptions import ClientError, NoCredentialsError, NoRegionError

# Simple translation system for learning content
MESSAGES = {
    "en": {
        "title": "üöÄ AWS IoT Registry API Explorer",
        "separator": "=" * 40,
        "aws_config": "üìç AWS Configuration:",
        "account_id": "Account ID",
        "region": "Region",
        "description": "Interactive exploration of AWS IoT Registry APIs with detailed explanations.",
        "debug_enabled": "üîç DEBUG MODE ENABLED",
        "debug_features": [
            "‚Ä¢ Full API request/response details",
            "‚Ä¢ Complete HTTP information",
            "‚Ä¢ Enhanced error diagnostics",
        ],
        "tip": "üí° Tip: Use --debug or -d flag for detailed API information",
        "tip_features": ["‚Ä¢ Condensed mode shows key metrics only", "‚Ä¢ Debug mode shows complete API details"],
        "client_initialized": "‚úÖ AWS IoT client initialized successfully",
        "invalid_credentials": "‚ùå Invalid AWS credentials",
        "learning_intro_title": "AWS IoT Registry APIs - Device Management",
        "learning_intro_content": "The AWS IoT Registry is the central database that stores information about your IoT devices (Things), their organization (Thing Groups), device templates (Thing Types), and security certificates. These APIs allow you to programmatically manage your entire IoT device fleet. Understanding these operations is fundamental to building scalable IoT solutions.",
        "learning_intro_next": "We will explore 8 core Registry APIs with detailed explanations",
        "press_enter": "Press Enter to continue...",
        "goodbye": "üëã Goodbye!",
        "operations_menu": "üìã Available Operations:",
        "operations": [
            "1. List Things",
            "2. List Certificates",
            "3. List Thing Groups",
            "4. List Thing Types",
            "5. Describe Thing",
            "6. Describe Thing Group",
            "7. Describe Thing Type",
            "8. Describe Endpoint",
            "9. Exit",
        ],
        "select_operation": "Select operation (1-9):",
        "invalid_choice": "‚ùå Invalid choice. Please select 1-9.",
        "list_things_options": "üîç List Things Options:",
        "list_things_menu": [
            "   1. List all Things (basic)",
            "   2. List Things with pagination",
            "   3. Filter Things by Thing Type",
            "   4. Filter Things by attribute",
        ],
        "select_option": "Select option (1-4):",
        "max_results_prompt": "Enter maximum results per page (default 5):",
        "thing_type_prompt": "Enter Thing Type name (e.g., SedanVehicle):",
        "attribute_name_prompt": "Enter attribute name (e.g., country):",
        "attribute_value_prompt": "Enter attribute value (e.g., US):",
        "no_thing_type": "‚ùå No Thing Type specified",
        "attribute_required": "‚ùå Attribute name and value are required",
        "executing": "üîÑ Executing:",
        "completed": "completed",
        "found_things": "üìä Found {} Things",
        "thing_names": "   Thing Names:",
        "found_certificates": "üìä Found {} Certificates",
        "certificate_ids": "   Certificate IDs:",
        "found_thing_groups": "üìä Found {} Thing Groups",
        "group_names": "   Group Names:",
        "found_thing_types": "üìä Found {} Thing Types",
        "type_names": "   Type Names:",
        "return_to_menu": "Press Enter to return to menu...",
        "available_things": "üìã Available Things",
        "available_groups": "üìã Available Thing Groups",
        "available_types": "üìã Available Thing Types",
        "enter_thing_name": "Enter Thing name: ",
        "enter_group_selection": "Enter number or Thing Group name: ",
        "enter_type_selection": "Enter number or Thing Type name: ",
        "no_things_found": "‚ö†Ô∏è No Things found in your account",
        "no_groups_found": "‚ö†Ô∏è No Thing Groups found in your account",
        "no_types_found": "‚ö†Ô∏è No Thing Types found in your account",
        "could_not_list_things": "‚ö†Ô∏è Could not list Things:",
        "could_not_list_groups": "‚ö†Ô∏è Could not list Thing Groups:",
        "could_not_list_types": "‚ö†Ô∏è Could not list Thing Types:",
        "invalid_selection": "‚ùå Invalid selection. Please choose",
        "endpoint_type_prompt": "Enter endpoint type (iot:Data-ATS, iot:CredentialProvider, iot:Jobs) [default: iot:Data-ATS]: ",
        "pagination_learning_title": "üìö LEARNING MOMENT: Pagination",
        "pagination_learning_content": "Pagination allows you to retrieve large datasets in smaller chunks. This is essential when managing hundreds or thousands of devices to avoid timeouts and memory issues.",
        "pagination_listing": "üîÑ Listing Things with pagination (max {} per page)...",
        "page_summary": "üìä Page {} Summary: {} Things retrieved",
        "continue_next_page": "Continue to next page? (y/N): ",
        "pagination_complete": "üèÅ Pagination Complete: {} total Things found across {} page(s)",
        "filter_by_type_learning_title": "üìö LEARNING MOMENT: Filtering by Thing Type",
        "filter_by_type_learning_content": "Filtering allows you to find specific categories of devices. Thing Types act as templates that group similar devices together.",
        "filtering_by_type": "üîÑ Filtering Things by Thing Type: {}...",
        "filter_type_results": "üìä Filter Results: {} Things found with Thing Type '{}'",
        "filter_by_attribute_learning_title": "üìö LEARNING MOMENT: Filtering by Attributes",
        "filter_by_attribute_learning_content": "Attribute filtering helps you find devices with specific characteristics. This is useful for targeting devices by location, customer, or other metadata.",
        "filtering_by_attribute": "üîÑ Filtering Things by attribute {}={}...",
        "filter_attribute_results": "üìä Filter Results: {} Things found with {}='{}'",
        "debug_full_error": "üîç DEBUG: Full error response:",
        "debug_full_traceback": "üîç DEBUG: Full traceback:",
        "api_error": "‚ùå API Error:",
        "error": "‚ùå Error:",
        "no_region_error": "‚ùå AWS region not configured",
        "region_setup_instructions": [
            "Please configure your AWS region using one of these methods:",
            "1. Set environment variable: export AWS_DEFAULT_REGION=us-east-1",
            "2. Configure AWS CLI: aws configure",
            "3. Set region in AWS credentials file",
        ],
        "aws_context_error": "‚ö†Ô∏è Could not retrieve AWS context:",
        "aws_credentials_reminder": "   Make sure AWS credentials are configured",
        "learning_moments": {
            "list_things": {
                "title": "List Things - Device Discovery",
                "content": "The list_things API retrieves all IoT devices (Things) in your account. This is essential for device inventory management, monitoring fleet size, and discovering devices by attributes. You can use pagination and filtering to handle device fleets efficiently.",
                "next": "We will call the list_things API with different options",
            },
            "list_certificates": {
                "title": "List Certificates - Security Inventory",
                "content": "X.509 certificates are the foundation of IoT device security. Each certificate uniquely identifies a device and enables secure communication with AWS IoT Core. This API helps you audit your security posture, track certificate lifecycle, and identify devices that need certificate rotation.",
                "next": "We will retrieve all certificates and examine their security properties",
            },
            "list_thing_groups": {
                "title": "List Thing Groups - Device Organization",
                "content": "Thing Groups provide hierarchical organization for your IoT devices, similar to folders for files. They enable bulk operations, policy inheritance, and logical grouping by location, function, or any business criteria. This is crucial for managing large-scale IoT deployments.",
                "next": "We will explore your Thing Groups and their organizational structure",
            },
            "list_thing_types": {
                "title": "List Thing Types - Device Templates",
                "content": "Thing Types are templates that define categories of IoT devices. They act as blueprints specifying common attributes and behaviors for similar devices. For example, a 'SedanVehicle' type might define attributes like engine type and seating capacity. Thing Types help organize your device fleet and enable standardized device management.",
                "next": "We will examine your Thing Types and their attribute schemas",
            },
            "describe_thing": {
                "title": "Describe Thing - Device Details",
                "content": "The describe_thing API provides complete information about a specific IoT device, including its attributes, Thing Type, version, and unique identifiers. This is essential for device troubleshooting, configuration management, and understanding device relationships within your IoT architecture.",
                "next": "We will examine detailed information for a specific Thing",
            },
            "describe_thing_group": {
                "title": "Describe Thing Group - Group Management",
                "content": "Thing Group details reveal the organizational structure of your IoT fleet. You can see group properties, parent-child hierarchies, attached policies, and member devices. This information is vital for understanding access control, policy inheritance, and device organization strategies.",
                "next": "We will examine detailed properties of a specific Thing Group",
            },
            "describe_thing_type": {
                "title": "Describe Thing Type - Template Analysis",
                "content": "Thing Type details show the blueprint definition for device categories. You can examine searchable attributes, property constraints, and metadata that define how devices of this type should be structured. This helps ensure consistent device registration and enables efficient fleet queries.",
                "next": "We will analyze the schema and properties of a specific Thing Type",
            },
            "describe_endpoint": {
                "title": "Describe Endpoint - Connection Discovery",
                "content": "IoT endpoints are the gateway URLs that devices use to connect to AWS IoT Core. Different endpoint types serve different purposes: Data-ATS for device communication, CredentialProvider for authentication, and Jobs for device management. Understanding endpoints is crucial for device connectivity configuration.",
                "next": "We will discover the endpoint URL for device connections",
            },
        },
        "api_desc_list_things_paginated": "Page {} - Retrieves up to {} Things",
        "api_desc_list_things_by_type": "Retrieves Things filtered by Thing Type '{}'",
        "api_desc_list_things_by_attribute": "Retrieves Things filtered by attribute '{}={}'",
        "api_desc_list_things": "Retrieves a paginated list of all IoT Things in your AWS account",
        "api_desc_list_certificates": "Retrieves a list of X.509 certificates registered in your AWS IoT account",
        "api_desc_list_thing_groups": "Retrieves a list of Thing Groups used to organize and manage IoT devices",
        "api_desc_list_thing_types": "Retrieves a list of Thing Types that define device templates and attributes",
        "api_desc_describe_thing": "Retrieves detailed information about a specific IoT Thing",
        "api_desc_describe_thing_group": "Retrieves detailed information about a specific Thing Group",
        "api_desc_describe_thing_type": "Retrieves detailed information about a specific Thing Type",
        "api_desc_describe_endpoint": "Retrieves the IoT endpoint URL for your AWS account and region",
        "api_explain_list_things": "Shows device inventory with names, types, attributes, and creation dates",
        "api_explain_list_certificates": "Shows security certificates with IDs, ARNs, status, and expiration dates",
        "api_explain_list_thing_groups": "Shows device organization structure with group hierarchies and properties",
        "api_explain_list_thing_types": "Shows device templates with searchable attributes and property definitions",
        "api_explain_describe_thing": "Shows complete device profile including attributes, type, and version information",
        "api_explain_describe_thing_group": "Shows group configuration, parent/child relationships, and applied policies",
        "api_explain_describe_thing_type": "Shows template schema, searchable attributes, and property constraints",
        "api_explain_describe_endpoint": "Returns the HTTPS endpoint URL used for device communication and data operations",
        "api_call_label": "API Call",
        "http_request_label": "HTTP Request",
        "description_label": "Description",
        "input_parameters_label": "Input Parameters",
        "no_input_parameters": "None (this API requires no input parameters)",
        "response_explanation_label": "Response Explanation",
        "response_payload_label": "Response Payload",
        "thing_details": "üìä Thing Details:",
        "thing_group_details": "üìä Thing Group Details:",
        "thing_type_details": "üìä Thing Type Details:",
        "name_label": "Name",
        "type_label": "Type",
        "description_simple": "Description",
    },
    "es": {
        "title": "üöÄ Explorador de API del Registro de AWS IoT",
        "separator": "=" * 40,
        "aws_config": "üìç Configuraci√≥n de AWS:",
        "account_id": "ID de Cuenta",
        "region": "Regi√≥n",
        "description": "Exploraci√≥n interactiva de las APIs del Registro de AWS IoT con explicaciones detalladas.",
        "debug_enabled": "üîç MODO DEBUG HABILITADO",
        "debug_features": [
            "‚Ä¢ Detalles completos de solicitud/respuesta de API",
            "‚Ä¢ Informaci√≥n HTTP completa",
            "‚Ä¢ Diagn√≥sticos de error mejorados",
        ],
        "tip": "üí° Consejo: Usa la bandera --debug o -d para informaci√≥n detallada de API",
        "tip_features": [
            "‚Ä¢ El modo condensado muestra solo m√©tricas clave",
            "‚Ä¢ El modo debug muestra detalles completos de API",
        ],
        "client_initialized": "‚úÖ Cliente de AWS IoT inicializado exitosamente",
        "invalid_credentials": "‚ùå Credenciales de AWS inv√°lidas",
        "learning_intro_title": "APIs del Registro de AWS IoT - Gesti√≥n de Dispositivos",
        "learning_intro_content": "El Registro de AWS IoT es la base de datos central que almacena informaci√≥n sobre tus dispositivos IoT (Things), su organizaci√≥n (Thing Groups), plantillas de dispositivos (Thing Types) y certificados de seguridad. Estas APIs te permiten gestionar program√°ticamente toda tu flota de dispositivos IoT. Entender estas operaciones es fundamental para construir soluciones IoT escalables.",
        "learning_intro_next": "Exploraremos 8 APIs centrales del Registro con explicaciones detalladas",
        "press_enter": "Presiona Enter para continuar...",
        "goodbye": "üëã ¬°Adi√≥s!",
        "operations_menu": "üìã Operaciones Disponibles:",
        "operations": [
            "1. Listar Things",
            "2. Listar Certificados",
            "3. Listar Thing Groups",
            "4. Listar Thing Types",
            "5. Describir Thing",
            "6. Describir Thing Group",
            "7. Describir Thing Type",
            "8. Describir Endpoint",
            "9. Salir",
        ],
        "select_operation": "Seleccionar operaci√≥n (1-9):",
        "invalid_choice": "‚ùå Selecci√≥n inv√°lida. Por favor selecciona 1-9.",
        "list_things_options": "üîç Opciones de Listar Things:",
        "list_things_menu": [
            "   1. Listar todos los Things (b√°sico)",
            "   2. Listar Things con paginaci√≥n",
            "   3. Filtrar Things por Thing Type",
            "   4. Filtrar Things por atributo",
        ],
        "select_option": "Seleccionar opci√≥n (1-4):",
        "max_results_prompt": "Ingresa m√°ximo de resultados por p√°gina (predeterminado 5):",
        "thing_type_prompt": "Ingresa nombre del Thing Type (ej., SedanVehicle):",
        "attribute_name_prompt": "Ingresa nombre del atributo (ej., country):",
        "attribute_value_prompt": "Ingresa valor del atributo (ej., US):",
        "no_thing_type": "‚ùå No se especific√≥ Thing Type",
        "attribute_required": "‚ùå Se requieren nombre y valor del atributo",
        "executing": "üîÑ Ejecutando:",
        "completed": "completado",
        "found_things": "üìä Encontrados {} Things",
        "thing_names": "   Nombres de Things:",
        "found_certificates": "üìä Encontrados {} Certificados",
        "certificate_ids": "   IDs de Certificados:",
        "found_thing_groups": "üìä Encontrados {} Thing Groups",
        "group_names": "   Nombres de Grupos:",
        "found_thing_types": "üìä Encontrados {} Thing Types",
        "type_names": "   Nombres de Tipos:",
        "return_to_menu": "Presiona Enter para volver al men√∫...",
        "available_things": "üìã Things Disponibles",
        "available_groups": "üìã Thing Groups Disponibles",
        "available_types": "üìã Thing Types Disponibles",
        "enter_thing_name": "Ingresa nombre del Thing: ",
        "enter_group_selection": "Ingresa n√∫mero o nombre del Thing Group: ",
        "enter_type_selection": "Ingresa n√∫mero o nombre del Thing Type: ",
        "no_things_found": "‚ö†Ô∏è No se encontraron Things en tu cuenta",
        "no_groups_found": "‚ö†Ô∏è No se encontraron Thing Groups en tu cuenta",
        "no_types_found": "‚ö†Ô∏è No se encontraron Thing Types en tu cuenta",
        "could_not_list_things": "‚ö†Ô∏è No se pudieron listar los Things:",
        "could_not_list_groups": "‚ö†Ô∏è No se pudieron listar los Thing Groups:",
        "could_not_list_types": "‚ö†Ô∏è No se pudieron listar los Thing Types:",
        "invalid_selection": "‚ùå Selecci√≥n inv√°lida. Por favor elige",
        "endpoint_type_prompt": "Ingresa tipo de endpoint (iot:Data-ATS, iot:CredentialProvider, iot:Jobs) [predeterminado: iot:Data-ATS]: ",
        "pagination_learning_title": "üìö LEARNING MOMENT: Paginaci√≥n",
        "pagination_learning_content": "La paginaci√≥n te permite recuperar grandes conjuntos de datos en fragmentos m√°s peque√±os. Esto es esencial cuando gestionas cientos o miles de dispositivos para evitar timeouts y problemas de memoria.",
        "pagination_listing": "üîÑ Listando Things con paginaci√≥n (m√°ximo {} por p√°gina)...",
        "page_summary": "üìä P√°gina {} Resumen: {} Things recuperados",
        "continue_next_page": "¬øContinuar a la siguiente p√°gina? (s/N): ",
        "pagination_complete": "üèÅ Paginaci√≥n Completa: {} Things totales encontrados en {} p√°gina(s)",
        "filter_by_type_learning_title": "üìö LEARNING MOMENT: Filtrar por Thing Type",
        "filter_by_type_learning_content": "El filtrado te permite encontrar categor√≠as espec√≠ficas de dispositivos. Los Thing Types act√∫an como plantillas que agrupan dispositivos similares.",
        "filtering_by_type": "üîÑ Filtrando Things por Thing Type: {}...",
        "filter_type_results": "üìä Resultados del Filtro: {} Things encontrados con Thing Type '{}'",
        "filter_by_attribute_learning_title": "üìö LEARNING MOMENT: Filtrar por Atributos",
        "filter_by_attribute_learning_content": "El filtrado por atributos te ayuda a encontrar dispositivos con caracter√≠sticas espec√≠ficas. Esto es √∫til para dirigirse a dispositivos por ubicaci√≥n, cliente u otros metadatos.",
        "filtering_by_attribute": "üîÑ Filtrando Things por atributo {}={}...",
        "filter_attribute_results": "üìä Resultados del Filtro: {} Things encontrados con {}='{}'",
        "debug_full_error": "üîç DEBUG: Respuesta completa de error:",
        "debug_full_traceback": "üîç DEBUG: Traza completa:",
        "api_error": "‚ùå Error de API:",
        "error": "‚ùå Error:",
        "no_region_error": "‚ùå Regi√≥n de AWS no configurada",
        "region_setup_instructions": [
            "Por favor configura tu regi√≥n de AWS usando uno de estos m√©todos:",
            "1. Variable de entorno: export AWS_DEFAULT_REGION=us-east-1",
            "2. Configurar AWS CLI: aws configure",
            "3. Establecer regi√≥n en el archivo de credenciales de AWS",
        ],
        "aws_context_error": "‚ö†Ô∏è No se pudo recuperar el contexto de AWS:",
        "aws_credentials_reminder": "   Aseg√∫rate de que las credenciales de AWS est√©n configuradas",
        "learning_moments": {
            "list_things": {
                "title": "Listar Things - Descubrimiento de Dispositivos",
                "content": "La API list_things recupera todos los dispositivos IoT (Things) en tu cuenta. Esto es esencial para la gesti√≥n de inventario de dispositivos, monitorear el tama√±o de la flota y descubrir dispositivos por atributos. Puedes usar paginaci√≥n y filtrado para manejar flotas de dispositivos eficientemente.",
                "next": "Llamaremos a la API list_things con diferentes opciones",
            },
            "list_certificates": {
                "title": "Listar Certificados - Inventario de Seguridad",
                "content": "Los certificados X.509 son la base de la seguridad de dispositivos IoT. Cada certificado identifica √∫nicamente un dispositivo y permite comunicaci√≥n segura con AWS IoT Core. Esta API te ayuda a auditar tu postura de seguridad, rastrear el ciclo de vida de certificados e identificar dispositivos que necesitan rotaci√≥n de certificados.",
                "next": "Recuperaremos todos los certificados y examinaremos sus propiedades de seguridad",
            },
            "list_thing_groups": {
                "title": "Listar Thing Groups - Organizaci√≥n de Dispositivos",
                "content": "Los Thing Groups proporcionan organizaci√≥n jer√°rquica para tus dispositivos IoT, similar a carpetas para archivos. Permiten operaciones masivas, herencia de pol√≠ticas y agrupaci√≥n l√≥gica por ubicaci√≥n, funci√≥n o cualquier criterio de negocio. Esto es crucial para gestionar despliegues IoT a gran escala.",
                "next": "Exploraremos tus Thing Groups y su estructura organizacional",
            },
            "list_thing_types": {
                "title": "Listar Thing Types - Plantillas de Dispositivos",
                "content": "Los Thing Types son plantillas que definen categor√≠as de dispositivos IoT. Act√∫an como planos que especifican atributos y comportamientos comunes para dispositivos similares. Por ejemplo, un tipo 'SedanVehicle' podr√≠a definir atributos como tipo de motor y capacidad de asientos. Los Thing Types ayudan a organizar tu flota de dispositivos y permiten gesti√≥n estandarizada de dispositivos.",
                "next": "Examinaremos tus Thing Types y sus esquemas de atributos",
            },
            "describe_thing": {
                "title": "Describir Thing - Detalles del Dispositivo",
                "content": "La API describe_thing proporciona informaci√≥n completa sobre un dispositivo IoT espec√≠fico, incluyendo sus atributos, Thing Type, versi√≥n e identificadores √∫nicos. Esto es esencial para soluci√≥n de problemas de dispositivos, gesti√≥n de configuraci√≥n y entender las relaciones de dispositivos dentro de tu arquitectura IoT.",
                "next": "Examinaremos informaci√≥n detallada para un Thing espec√≠fico",
            },
            "describe_thing_group": {
                "title": "Describir Thing Group - Gesti√≥n de Grupos",
                "content": "Los detalles del Thing Group revelan la estructura organizacional de tu flota IoT. Puedes ver propiedades del grupo, jerarqu√≠as padre-hijo, pol√≠ticas adjuntas y dispositivos miembros. Esta informaci√≥n es vital para entender el control de acceso, herencia de pol√≠ticas y estrategias de organizaci√≥n de dispositivos.",
                "next": "Examinaremos propiedades detalladas de un Thing Group espec√≠fico",
            },
            "describe_thing_type": {
                "title": "Describir Thing Type - An√°lisis de Plantillas",
                "content": "Los detalles del Thing Type muestran la definici√≥n del plano para categor√≠as de dispositivos. Puedes examinar atributos buscables, restricciones de propiedades y metadatos que definen c√≥mo deben estructurarse los dispositivos de este tipo. Esto ayuda a asegurar registro consistente de dispositivos y permite consultas eficientes de flota.",
                "next": "Analizaremos el esquema y propiedades de un Thing Type espec√≠fico",
            },
            "describe_endpoint": {
                "title": "Describir Endpoint - Descubrimiento de Conexi√≥n",
                "content": "Los endpoints IoT son las URLs de puerta de enlace que los dispositivos usan para conectarse a AWS IoT Core. Diferentes tipos de endpoint sirven diferentes prop√≥sitos: Data-ATS para comunicaci√≥n de dispositivos, CredentialProvider para autenticaci√≥n y Jobs para gesti√≥n de dispositivos. Entender los endpoints es crucial para la configuraci√≥n de conectividad de dispositivos.",
                "next": "Descubriremos la URL del endpoint para conexiones de dispositivos",
            },
        },
        "api_desc_list_things_paginated": "P√°gina {} - Obtiene hasta {} Things",
        "api_desc_list_things_by_type": "Obtiene Things filtrados por Thing Type '{}'",
        "api_desc_list_things_by_attribute": "Obtiene Things filtrados por atributo '{}={}'",
        "api_desc_list_things": "Obtiene una lista paginada de todos los Things IoT en tu cuenta de AWS",
        "api_desc_list_certificates": "Obtiene una lista de certificados X.509 registrados en tu cuenta de AWS IoT",
        "api_desc_list_thing_groups": "Obtiene una lista de Thing Groups usados para organizar y gestionar dispositivos IoT",
        "api_desc_list_thing_types": "Obtiene una lista de Thing Types que definen plantillas y atributos de dispositivos",
        "api_desc_describe_thing": "Obtiene informaci√≥n detallada sobre un Thing IoT espec√≠fico",
        "api_desc_describe_thing_group": "Obtiene informaci√≥n detallada sobre un Thing Group espec√≠fico",
        "api_desc_describe_thing_type": "Obtiene informaci√≥n detallada sobre un Thing Type espec√≠fico",
        "api_desc_describe_endpoint": "Obtiene la URL del endpoint IoT para tu cuenta y regi√≥n de AWS",
        "api_explain_list_things": "Muestra inventario de dispositivos con nombres, tipos, atributos y fechas de creaci√≥n",
        "api_explain_list_certificates": "Muestra certificados de seguridad con IDs, ARNs, estado y fechas de expiraci√≥n",
        "api_explain_list_thing_groups": "Muestra estructura de organizaci√≥n de dispositivos con jerarqu√≠as de grupos y propiedades",
        "api_explain_list_thing_types": "Muestra plantillas de dispositivos con atributos buscables y definiciones de propiedades",
        "api_explain_describe_thing": "Muestra perfil completo del dispositivo incluyendo atributos, tipo e informaci√≥n de versi√≥n",
        "api_explain_describe_thing_group": "Muestra configuraci√≥n del grupo, relaciones padre/hijo y pol√≠ticas aplicadas",
        "api_explain_describe_thing_type": "Muestra esquema de plantilla, atributos buscables y restricciones de propiedades",
        "api_explain_describe_endpoint": "Devuelve la URL del endpoint HTTPS usada para comunicaci√≥n de dispositivos y operaciones de datos",
        "api_call_label": "Llamada API",
        "http_request_label": "Solicitud HTTP",
        "description_label": "Descripci√≥n",
        "input_parameters_label": "Par√°metros de Entrada",
        "no_input_parameters": "Ninguno (esta API no requiere par√°metros de entrada)",
        "response_explanation_label": "Explicaci√≥n de Respuesta",
        "response_payload_label": "Carga de Respuesta",
        "thing_details": "üìä Detalles del Thing:",
        "thing_group_details": "üìä Detalles del Thing Group:",
        "thing_type_details": "üìä Detalles del Thing Type:",
        "name_label": "Nombre",
        "type_label": "Tipo",
        "description_simple": "Descripci√≥n",
    },
    "ja": {
        "title": "üöÄ AWS IoT Registry API „Ç®„ÇØ„Çπ„Éó„É≠„Éº„É©„Éº",
        "separator": "=" * 40,
        "aws_config": "üìç AWSË®≠ÂÆö:",
        "account_id": "„Ç¢„Ç´„Ç¶„É≥„ÉàID",
        "region": "„É™„Éº„Ç∏„Éß„É≥",
        "description": "Ë©≥Á¥∞„Å™Ë™¨Êòé‰ªò„Åç„ÅÆAWS IoT Registry API„ÅÆ„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„ÉñÊé¢Á¥¢„ÄÇ",
        "debug_enabled": "üîç „Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâÊúâÂäπ",
        "debug_features": ["‚Ä¢ ÂÆåÂÖ®„Å™API„É™„ÇØ„Ç®„Çπ„Éà/„É¨„Çπ„Éù„É≥„ÇπË©≥Á¥∞", "‚Ä¢ ÂÆåÂÖ®„Å™HTTPÊÉÖÂ†±", "‚Ä¢ Êã°Âºµ„Ç®„É©„ÉºË®∫Êñ≠"],
        "tip": "üí° „Éí„É≥„Éà: Ë©≥Á¥∞„Å™APIÊÉÖÂ†±„Å´„ÅØ--debug„Åæ„Åü„ÅØ-d„Éï„É©„Ç∞„Çí‰ΩøÁî®",
        "tip_features": ["‚Ä¢ Á∞°ÊΩî„É¢„Éº„Éâ„ÅØ‰∏ªË¶Å„É°„Éà„É™„ÇØ„Çπ„ÅÆ„ÅøË°®Á§∫", "‚Ä¢ „Éá„Éê„ÉÉ„Ç∞„É¢„Éº„Éâ„ÅØÂÆåÂÖ®„Å™APIË©≥Á¥∞„ÇíË°®Á§∫"],
        "client_initialized": "‚úÖ AWS IoT„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅåÊ≠£Â∏∏„Å´ÂàùÊúüÂåñ„Åï„Çå„Åæ„Åó„Åü",
        "invalid_credentials": "‚ùå ÁÑ°Âäπ„Å™AWSË™çË®ºÊÉÖÂ†±",
        "learning_intro_title": "AWS IoT Registry APIs - „Éá„Éê„Ç§„ÇπÁÆ°ÁêÜ",
        "learning_intro_content": "AWS IoT Registry„ÅØ„ÄÅIoT„Éá„Éê„Ç§„ÇπÔºàThingsÔºâ„ÄÅ„Åù„ÅÆÁµÑÁπîÔºàThing GroupsÔºâ„ÄÅ„Éá„Éê„Ç§„Çπ„ÉÜ„É≥„Éó„É¨„Éº„ÉàÔºàThing TypesÔºâ„ÄÅ„Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®ºÊòéÊõ∏„Å´Èñ¢„Åô„ÇãÊÉÖÂ†±„ÇíÊ†ºÁ¥ç„Åô„Çã‰∏≠Â§Æ„Éá„Éº„Çø„Éô„Éº„Çπ„Åß„Åô„ÄÇ„Åì„Çå„Çâ„ÅÆAPI„Å´„Çà„Çä„ÄÅIoT„Éá„Éê„Ç§„Çπ„Éï„É™„Éº„ÉàÂÖ®‰Ωì„Çí„Éó„É≠„Ç∞„É©„É†„ÅßÁÆ°ÁêÜ„Åß„Åç„Åæ„Åô„ÄÇ„Åì„Çå„Çâ„ÅÆÊìç‰Ωú„ÇíÁêÜËß£„Åô„Çã„Åì„Å®„ÅØ„ÄÅ„Çπ„Ç±„Éº„É©„Éñ„É´„Å™IoT„ÇΩ„É™„É•„Éº„Ç∑„Éß„É≥„ÇíÊßãÁØâ„Åô„Çã„Åü„ÇÅ„ÅÆÂü∫Êú¨„Åß„Åô„ÄÇ",
        "learning_intro_next": "Ë©≥Á¥∞„Å™Ë™¨Êòé‰ªò„Åç„Åß8„Å§„ÅÆ„Ç≥„Ç¢Registry API„ÇíÊé¢Á¥¢„Åó„Åæ„Åô",
        "press_enter": "Enter„Ç≠„Éº„ÇíÊäº„Åó„Å¶Á∂öË°å...",
        "goodbye": "üëã „Åï„Çà„ÅÜ„Å™„ÇâÔºÅ",
        "operations_menu": "üìã Âà©Áî®ÂèØËÉΩ„Å™Êìç‰Ωú:",
        "operations": [
            "1. Things„Çí„É™„Çπ„Éà",
            "2. Ë®ºÊòéÊõ∏„Çí„É™„Çπ„Éà",
            "3. Thing Groups„Çí„É™„Çπ„Éà",
            "4. Thing Types„Çí„É™„Çπ„Éà",
            "5. Thing„ÇíË©≥Á¥∞Ë°®Á§∫",
            "6. Thing Group„ÇíË©≥Á¥∞Ë°®Á§∫",
            "7. Thing Type„ÇíË©≥Á¥∞Ë°®Á§∫",
            "8. „Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÇíË©≥Á¥∞Ë°®Á§∫",
            "9. ÁµÇ‰∫Ü",
        ],
        "select_operation": "Êìç‰Ωú„ÇíÈÅ∏Êäû (1-9):",
        "invalid_choice": "‚ùå ÁÑ°Âäπ„Å™ÈÅ∏Êäû„Åß„Åô„ÄÇ1-9„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
        "list_things_options": "üîç List Things „Ç™„Éó„Ç∑„Éß„É≥:",
        "list_things_menu": [
            "   1. „Åô„Åπ„Å¶„ÅÆThings„Çí„É™„Çπ„ÉàÔºàÂü∫Êú¨Ôºâ",
            "   2. „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥‰ªò„Åç„ÅßThings„Çí„É™„Çπ„Éà",
            "   3. Thing Type„ÅßThings„Çí„Éï„Ç£„É´„Çø",
            "   4. Â±ûÊÄß„ÅßThings„Çí„Éï„Ç£„É´„Çø",
        ],
        "select_option": "„Ç™„Éó„Ç∑„Éß„É≥„ÇíÈÅ∏Êäû (1-4):",
        "max_results_prompt": "„Éö„Éº„Ç∏„ÅÇ„Åü„Çä„ÅÆÊúÄÂ§ßÁµêÊûúÊï∞„ÇíÂÖ•ÂäõÔºà„Éá„Éï„Ç©„É´„Éà5Ôºâ:",
        "thing_type_prompt": "Thing TypeÂêç„ÇíÂÖ•ÂäõÔºà‰æã: SedanVehicleÔºâ:",
        "attribute_name_prompt": "Â±ûÊÄßÂêç„ÇíÂÖ•ÂäõÔºà‰æã: countryÔºâ:",
        "attribute_value_prompt": "Â±ûÊÄßÂÄ§„ÇíÂÖ•ÂäõÔºà‰æã: USÔºâ:",
        "no_thing_type": "‚ùå Thing Type„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì",
        "attribute_required": "‚ùå Â±ûÊÄßÂêç„Å®ÂÄ§„ÅåÂøÖË¶Å„Åß„Åô",
        "executing": "üîÑ ÂÆüË°å‰∏≠:",
        "completed": "ÂÆå‰∫Ü",
        "found_things": "üìä {}ÂÄã„ÅÆThings„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü",
        "thing_names": "   ThingÂêç:",
        "found_certificates": "üìä {}ÂÄã„ÅÆË®ºÊòéÊõ∏„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü",
        "certificate_ids": "   Ë®ºÊòéÊõ∏ID:",
        "found_thing_groups": "üìä {}ÂÄã„ÅÆThing Groups„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü",
        "group_names": "   „Ç∞„É´„Éº„ÉóÂêç:",
        "found_thing_types": "üìä {}ÂÄã„ÅÆThing Types„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü",
        "type_names": "   „Çø„Ç§„ÉóÂêç:",
        "return_to_menu": "Enter„Ç≠„Éº„ÇíÊäº„Åó„Å¶„É°„Éã„É•„Éº„Å´Êàª„Çã...",
        "available_things": "üìã Âà©Áî®ÂèØËÉΩ„Å™Things",
        "available_groups": "üìã Âà©Áî®ÂèØËÉΩ„Å™Thing Groups",
        "available_types": "üìã Âà©Áî®ÂèØËÉΩ„Å™Thing Types",
        "enter_thing_name": "ThingÂêç„ÇíÂÖ•Âäõ: ",
        "enter_group_selection": "Áï™Âè∑„Åæ„Åü„ÅØThing GroupÂêç„ÇíÂÖ•Âäõ: ",
        "enter_type_selection": "Áï™Âè∑„Åæ„Åü„ÅØThing TypeÂêç„ÇíÂÖ•Âäõ: ",
        "no_things_found": "‚ö†Ô∏è „Ç¢„Ç´„Ç¶„É≥„Éà„Å´Things„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì",
        "no_groups_found": "‚ö†Ô∏è „Ç¢„Ç´„Ç¶„É≥„Éà„Å´Thing Groups„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì",
        "no_types_found": "‚ö†Ô∏è „Ç¢„Ç´„Ç¶„É≥„Éà„Å´Thing Types„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì",
        "could_not_list_things": "‚ö†Ô∏è Things„Çí„É™„Çπ„Éà„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü:",
        "could_not_list_groups": "‚ö†Ô∏è Thing Groups„Çí„É™„Çπ„Éà„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü:",
        "could_not_list_types": "‚ö†Ô∏è Thing Types„Çí„É™„Çπ„Éà„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü:",
        "invalid_selection": "‚ùå ÁÑ°Âäπ„Å™ÈÅ∏Êäû„Åß„Åô„ÄÇÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
        "endpoint_type_prompt": "„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„Çø„Ç§„Éó„ÇíÂÖ•ÂäõÔºàiot:Data-ATS, iot:CredentialProvider, iot:JobsÔºâ[„Éá„Éï„Ç©„É´„Éà: iot:Data-ATS]: ",
        "pagination_learning_title": "üìö Â≠¶Áøí„Éù„Ç§„É≥„Éà: „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥",
        "pagination_learning_content": "„Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥„Å´„Çà„Çä„ÄÅÂ§ß„Åç„Å™„Éá„Éº„Çø„Çª„ÉÉ„Éà„ÇíÂ∞è„Åï„Å™„ÉÅ„É£„É≥„ÇØ„ÅßÂèñÂæó„Åß„Åç„Åæ„Åô„ÄÇ„Åì„Çå„ÅØ„ÄÅ„Çø„Ç§„É†„Ç¢„Ç¶„Éà„ÇÑ„É°„É¢„É™ÂïèÈ°å„ÇíÂõûÈÅø„Åô„Çã„Åü„ÇÅ„Å´„ÄÅÊï∞Áôæ„Åæ„Åü„ÅØÊï∞ÂçÉ„ÅÆ„Éá„Éê„Ç§„Çπ„ÇíÁÆ°ÁêÜ„Åô„ÇãÈöõ„Å´‰∏çÂèØÊ¨†„Åß„Åô„ÄÇ",
        "pagination_listing": "üîÑ „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥‰ªò„Åç„ÅßThings„Çí„É™„Çπ„Éà‰∏≠Ôºà„Éö„Éº„Ç∏„ÅÇ„Åü„ÇäÊúÄÂ§ß{}Ôºâ...",
        "page_summary": "üìä „Éö„Éº„Ç∏{}Ê¶ÇË¶Å: {}ÂÄã„ÅÆThings„ÇíÂèñÂæó",
        "continue_next_page": "Ê¨°„ÅÆ„Éö„Éº„Ç∏„Å´Á∂öË°å„Åó„Åæ„Åô„ÅãÔºü (y/N): ",
        "pagination_complete": "üèÅ „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥ÂÆå‰∫Ü: {}„Éö„Éº„Ç∏„Å´„Çè„Åü„Å£„Å¶ÂêàË®à{}ÂÄã„ÅÆThings„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü",
        "filter_by_type_learning_title": "üìö Â≠¶Áøí„Éù„Ç§„É≥„Éà: Thing Type„Å´„Çà„Çã„Éï„Ç£„É´„Çø„É™„É≥„Ç∞",
        "filter_by_type_learning_content": "„Éï„Ç£„É´„Çø„É™„É≥„Ç∞„Å´„Çà„Çä„ÄÅÁâπÂÆö„ÅÆ„Ç´„ÉÜ„Ç¥„É™„ÅÆ„Éá„Éê„Ç§„Çπ„ÇíË¶ã„Å§„Åë„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„Åô„ÄÇThing Types„ÅØÈ°û‰ºº„ÅÆ„Éá„Éê„Ç§„Çπ„Çí„Ç∞„É´„Éº„ÉóÂåñ„Åô„Çã„ÉÜ„É≥„Éó„É¨„Éº„Éà„Å®„Åó„Å¶Ê©üËÉΩ„Åó„Åæ„Åô„ÄÇ",
        "filtering_by_type": "üîÑ Thing Type: {}„ÅßThings„Çí„Éï„Ç£„É´„Çø„É™„É≥„Ç∞‰∏≠...",
        "filter_type_results": "üìä „Éï„Ç£„É´„ÇøÁµêÊûú: Thing Type '{}'„Åß{}ÂÄã„ÅÆThings„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü",
        "filter_by_attribute_learning_title": "üìö Â≠¶Áøí„Éù„Ç§„É≥„Éà: Â±ûÊÄß„Å´„Çà„Çã„Éï„Ç£„É´„Çø„É™„É≥„Ç∞",
        "filter_by_attribute_learning_content": "Â±ûÊÄß„Éï„Ç£„É´„Çø„É™„É≥„Ç∞„ÅØ„ÄÅÁâπÂÆö„ÅÆÁâπÊÄß„ÇíÊåÅ„Å§„Éá„Éê„Ç§„Çπ„ÇíË¶ã„Å§„Åë„Çã„ÅÆ„Å´ÂΩπÁ´ã„Å°„Åæ„Åô„ÄÇ„Åì„Çå„ÅØ„ÄÅÂ†¥ÊâÄ„ÄÅÈ°ßÂÆ¢„ÄÅ„Åæ„Åü„ÅØ„Åù„ÅÆ‰ªñ„ÅÆ„É°„Çø„Éá„Éº„Çø„Å´„Çà„Å£„Å¶„Éá„Éê„Ç§„Çπ„Çí„Çø„Éº„Ç≤„ÉÉ„Éà„Å´„Åô„Çã„ÅÆ„Å´‰æøÂà©„Åß„Åô„ÄÇ",
        "filtering_by_attribute": "üîÑ Â±ûÊÄß{}={}„ÅßThings„Çí„Éï„Ç£„É´„Çø„É™„É≥„Ç∞‰∏≠...",
        "filter_attribute_results": "üìä „Éï„Ç£„É´„ÇøÁµêÊûú: {}='{}'„Åß{}ÂÄã„ÅÆThings„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü",
        "debug_full_error": "üîç „Éá„Éê„ÉÉ„Ç∞: ÂÆåÂÖ®„Å™„Ç®„É©„Éº„É¨„Çπ„Éù„É≥„Çπ:",
        "debug_full_traceback": "üîç „Éá„Éê„ÉÉ„Ç∞: ÂÆåÂÖ®„Å™„Éà„É¨„Éº„Çπ„Éê„ÉÉ„ÇØ:",
        "api_error": "‚ùå API„Ç®„É©„Éº:",
        "error": "‚ùå „Ç®„É©„Éº:",
        "no_region_error": "‚ùå AWS„É™„Éº„Ç∏„Éß„É≥„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì",
        "region_setup_instructions": [
            "‰ª•‰∏ã„ÅÆ„ÅÑ„Åö„Çå„Åã„ÅÆÊñπÊ≥ï„ÅßAWS„É™„Éº„Ç∏„Éß„É≥„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ:",
            "1. Áí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆö: export AWS_DEFAULT_REGION=us-east-1",
            "2. AWS CLI„ÇíË®≠ÂÆö: aws configure",
            "3. AWSË™çË®ºÊÉÖÂ†±„Éï„Ç°„Ç§„É´„Åß„É™„Éº„Ç∏„Éß„É≥„ÇíË®≠ÂÆö",
        ],
        "aws_context_error": "‚ö†Ô∏è AWS„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü:",
        "aws_credentials_reminder": "   AWSË™çË®ºÊÉÖÂ†±„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
        "learning_moments": {
            "list_things": {
                "title": "List Things - „Éá„Éê„Ç§„ÇπÁô∫Ë¶ã",
                "content": "list_things API„ÅØ„ÄÅ„Ç¢„Ç´„Ç¶„É≥„ÉàÂÜÖ„ÅÆ„Åô„Åπ„Å¶„ÅÆIoT„Éá„Éê„Ç§„ÇπÔºàThingsÔºâ„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ„Åì„Çå„ÅØ„ÄÅ„Éá„Éê„Ç§„Çπ„Ç§„É≥„Éô„É≥„Éà„É™ÁÆ°ÁêÜ„ÄÅ„Éï„É™„Éº„Éà„Çµ„Ç§„Ç∫„ÅÆÁõ£Ë¶ñ„ÄÅÂ±ûÊÄß„Å´„Çà„Çã„Éá„Éê„Ç§„ÇπÁô∫Ë¶ã„Å´‰∏çÂèØÊ¨†„Åß„Åô„ÄÇ„Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥„Å®„Éï„Ç£„É´„Çø„É™„É≥„Ç∞„Çí‰ΩøÁî®„Åó„Å¶„ÄÅ„Éá„Éê„Ç§„Çπ„Éï„É™„Éº„Éà„ÇíÂäπÁéáÁöÑ„Å´Âá¶ÁêÜ„Åß„Åç„Åæ„Åô„ÄÇ",
                "next": "Áï∞„Å™„Çã„Ç™„Éó„Ç∑„Éß„É≥„Åßlist_things API„ÇíÂëº„Å≥Âá∫„Åó„Åæ„Åô",
            },
            "list_certificates": {
                "title": "List Certificates - „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Ç§„É≥„Éô„É≥„Éà„É™",
                "content": "X.509Ë®ºÊòéÊõ∏„ÅØIoT„Éá„Éê„Ç§„Çπ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÅÆÂü∫Áõ§„Åß„Åô„ÄÇÂêÑË®ºÊòéÊõ∏„ÅØ„Éá„Éê„Ç§„Çπ„Çí‰∏ÄÊÑè„Å´Ë≠òÂà•„Åó„ÄÅAWS IoT Core„Å®„ÅÆÂÆâÂÖ®„Å™ÈÄö‰ø°„ÇíÂèØËÉΩ„Å´„Åó„Åæ„Åô„ÄÇ„Åì„ÅÆAPI„ÅØ„ÄÅ„Çª„Ç≠„É•„É™„ÉÜ„Ç£ÊÖãÂã¢„ÅÆÁõ£Êüª„ÄÅË®ºÊòéÊõ∏„É©„Ç§„Éï„Çµ„Ç§„ÇØ„É´„ÅÆËøΩË∑°„ÄÅË®ºÊòéÊõ∏„É≠„Éº„ÉÜ„Éº„Ç∑„Éß„É≥„ÅåÂøÖË¶Å„Å™„Éá„Éê„Ç§„Çπ„ÅÆÁâπÂÆö„Å´ÂΩπÁ´ã„Å°„Åæ„Åô„ÄÇ",
                "next": "„Åô„Åπ„Å¶„ÅÆË®ºÊòéÊõ∏„ÇíÂèñÂæó„Åó„ÄÅ„Åù„ÅÆ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Éó„É≠„Éë„ÉÜ„Ç£„ÇíË™øÊüª„Åó„Åæ„Åô",
            },
            "list_thing_groups": {
                "title": "List Thing Groups - „Éá„Éê„Ç§„ÇπÁµÑÁπî",
                "content": "Thing Groups„ÅØ„ÄÅ„Éï„Ç°„Ç§„É´Áî®„ÅÆ„Éï„Ç©„É´„ÉÄ„Å®ÂêåÊßò„Å´„ÄÅIoT„Éá„Éê„Ç§„Çπ„ÅÆÈöéÂ±§ÁµÑÁπî„ÇíÊèê‰æõ„Åó„Åæ„Åô„ÄÇ‰∏ÄÊã¨Êìç‰Ωú„ÄÅ„Éù„É™„Ç∑„ÉºÁ∂ôÊâø„ÄÅÂ†¥ÊâÄ„ÄÅÊ©üËÉΩ„ÄÅ„Åæ„Åü„ÅØ„Éì„Ç∏„Éç„ÇπÂü∫Ê∫ñ„Å´„Çà„ÇãË´ñÁêÜ„Ç∞„É´„Éº„ÉóÂåñ„ÇíÂèØËÉΩ„Å´„Åó„Åæ„Åô„ÄÇ„Åì„Çå„ÅØ„ÄÅÂ§ßË¶èÊ®°„Å™IoT„Éá„Éó„É≠„Ç§„É°„É≥„Éà„ÅÆÁÆ°ÁêÜ„Å´ÈáçË¶Å„Åß„Åô„ÄÇ",
                "next": "Thing Groups„Å®„Åù„ÅÆÁµÑÁπîÊßãÈÄ†„ÇíÊé¢Á¥¢„Åó„Åæ„Åô",
            },
            "list_thing_types": {
                "title": "List Thing Types - „Éá„Éê„Ç§„Çπ„ÉÜ„É≥„Éó„É¨„Éº„Éà",
                "content": "Thing Types„ÅØIoT„Éá„Éê„Ç§„Çπ„ÅÆ„Ç´„ÉÜ„Ç¥„É™„ÇíÂÆöÁæ©„Åô„Çã„ÉÜ„É≥„Éó„É¨„Éº„Éà„Åß„Åô„ÄÇÈ°û‰ºº„ÅÆ„Éá„Éê„Ç§„Çπ„ÅÆÂÖ±ÈÄöÂ±ûÊÄß„Å®Âãï‰Ωú„ÇíÊåáÂÆö„Åô„Çã„Éñ„É´„Éº„Éó„É™„É≥„Éà„Å®„Åó„Å¶Ê©üËÉΩ„Åó„Åæ„Åô„ÄÇ‰æã„Åà„Å∞„ÄÅ'SedanVehicle'„Çø„Ç§„Éó„ÅØ„ÄÅ„Ç®„É≥„Ç∏„É≥„Çø„Ç§„Éó„ÇÑÂ∫ßÂ∏≠Êï∞„Å™„Å©„ÅÆÂ±ûÊÄß„ÇíÂÆöÁæ©„Åô„ÇãÂ†¥Âêà„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇThing Types„ÅØ„ÄÅ„Éá„Éê„Ç§„Çπ„Éï„É™„Éº„Éà„ÅÆÊï¥ÁêÜ„Å®Ê®ôÊ∫ñÂåñ„Åï„Çå„Åü„Éá„Éê„Ç§„ÇπÁÆ°ÁêÜ„ÇíÂèØËÉΩ„Å´„Åó„Åæ„Åô„ÄÇ",
                "next": "Thing Types„Å®„Åù„ÅÆÂ±ûÊÄß„Çπ„Ç≠„Éº„Éû„ÇíË™øÊüª„Åó„Åæ„Åô",
            },
            "describe_thing": {
                "title": "Describe Thing - Ë©≥Á¥∞„Å™„Éá„Éê„Ç§„ÇπÊÉÖÂ†±",
                "content": "describe_thing API„ÅØ„ÄÅÁâπÂÆö„ÅÆIoT„Éá„Éê„Ç§„Çπ„ÅÆÂÆåÂÖ®„Å™Ë©≥Á¥∞„ÇíÊèê‰æõ„Åó„Åæ„Åô„ÄÇ„Åì„Çå„Å´„ÅØ„ÄÅÂ±ûÊÄß„ÄÅThing Type„ÄÅThing Group „É°„É≥„Éê„Éº„Ç∑„ÉÉ„Éó„ÄÅ„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÅåÂê´„Åæ„Çå„Åæ„Åô„ÄÇ„Åì„Çå„ÅØ„ÄÅ„Éá„Éê„Ç§„Çπ„ÅÆ„Éà„É©„Éñ„É´„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞„ÄÅË®≠ÂÆö„ÅÆÁ¢∫Ë™ç„ÄÅ„Éá„Éê„Ç§„ÇπÂõ∫Êúâ„ÅÆÊìç‰Ωú„ÅÆÂÆüË°å„Å´‰∏çÂèØÊ¨†„Åß„Åô„ÄÇ",
                "next": "ÁâπÂÆö„ÅÆThing„ÅÆË©≥Á¥∞ÊÉÖÂ†±„ÇíÂèñÂæó„Åó„Åæ„Åô",
            },
            "describe_thing_group": {
                "title": "Describe Thing Group - „Ç∞„É´„Éº„ÉóË©≥Á¥∞",
                "content": "Thing Groups„ÅØ„ÄÅ„Éá„Éê„Ç§„Çπ„ÅÆÁµÑÁπîÊßãÈÄ†„ÇíÊèê‰æõ„Åó„Åæ„Åô„ÄÇ„Åì„ÅÆAPI„ÅØ„ÄÅ„Ç∞„É´„Éº„Éó„ÅÆ„Éó„É≠„Éë„ÉÜ„Ç£„ÄÅË¶™Â≠êÈñ¢‰øÇ„ÄÅ„É°„É≥„Éê„Éº„Éá„Éê„Ç§„Çπ„ÄÅÈÅ©Áî®„Åï„Çå„Çã„Éù„É™„Ç∑„Éº„ÇíË°®Á§∫„Åó„Åæ„Åô„ÄÇ„Åì„Çå„ÅØ„ÄÅ„Ç∞„É´„Éº„Éó„Éô„Éº„Çπ„ÅÆÊìç‰Ωú„Å®„Éù„É™„Ç∑„ÉºÁÆ°ÁêÜ„ÇíÁêÜËß£„Åô„Çã„Åü„ÇÅ„Å´ÈáçË¶Å„Åß„Åô„ÄÇ",
                "next": "Thing Group„ÅÆË©≥Á¥∞„Å™ÊßãÈÄ†„ÇíË™øÊüª„Åó„Åæ„Åô",
            },
            "describe_thing_type": {
                "title": "Describe Thing Type - „Çø„Ç§„Éó‰ªïÊßò",
                "content": "Thing Types„ÅØ„ÄÅ„Éá„Éê„Ç§„Çπ„Ç´„ÉÜ„Ç¥„É™„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà„Å®„Åó„Å¶Ê©üËÉΩ„Åó„Åæ„Åô„ÄÇ„Åì„ÅÆAPI„ÅØ„ÄÅ„Çø„Ç§„Éó„ÅÆÂ±ûÊÄß„Çπ„Ç≠„Éº„Éû„ÄÅË™¨Êòé„ÄÅ‰ΩúÊàêÊó•„ÇíË°®Á§∫„Åó„Åæ„Åô„ÄÇ„Åì„Çå„ÅØ„ÄÅ„Éá„Éê„Ç§„ÇπÊ®ôÊ∫ñÂåñ„Å®„Çø„Ç§„Éó„Éô„Éº„Çπ„ÅÆÊìç‰Ωú„ÇíÁêÜËß£„Åô„Çã„Åü„ÇÅ„Å´ÈáçË¶Å„Åß„Åô„ÄÇ",
                "next": "Thing Type„ÅÆË©≥Á¥∞„Å™‰ªïÊßò„ÇíË™øÊüª„Åó„Åæ„Åô",
            },
            "describe_endpoint": {
                "title": "Describe Endpoint - Êé•Á∂öÊÉÖÂ†±",
                "content": "IoT„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÅØ„ÄÅ„Éá„Éê„Ç§„Çπ„ÅåAWS IoT Core„Å´Êé•Á∂ö„Åô„Çã„Åü„ÇÅ„ÅÆURL„Åß„Åô„ÄÇ„Åì„ÅÆAPI„ÅØ„ÄÅMQTT„ÄÅHTTPS„ÄÅWebSockets„Å™„Å©„ÅÆÁï∞„Å™„Çã„Éó„É≠„Éà„Ç≥„É´„ÅÆ„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÇíÊèê‰æõ„Åó„Åæ„Åô„ÄÇ„Åì„Çå„ÅØ„ÄÅ„Éá„Éê„Ç§„ÇπÊé•Á∂ö„ÅÆË®≠ÂÆö„Å®„Éà„É©„Éñ„É´„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞„Å´‰∏çÂèØÊ¨†„Åß„Åô„ÄÇ",
                "next": "Âà©Áî®ÂèØËÉΩ„Å™IoT„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÇíÂèñÂæó„Åó„Åæ„Åô",
            },
        },
        "api_call_label": "APIÂëº„Å≥Âá∫„Åó",
        "http_request_label": "HTTP„É™„ÇØ„Ç®„Çπ„Éà",
        "description_label": "Ë™¨Êòé",
        "input_parameters_label": "ÂÖ•Âäõ„Éë„É©„É°„Éº„Çø",
        "no_input_parameters": "„Å™„ÅóÔºà„Åì„ÅÆAPI„ÅØÂÖ•Âäõ„Éë„É©„É°„Éº„Çø„ÇíÂøÖË¶Å„Å®„Åó„Åæ„Åõ„ÇìÔºâ",
        "response_explanation_label": "„É¨„Çπ„Éù„É≥„ÇπË™¨Êòé",
        "response_payload_label": "„É¨„Çπ„Éù„É≥„Çπ„Éö„Ç§„É≠„Éº„Éâ",
        "thing_details": "üìä ThingË©≥Á¥∞:",
        "thing_group_details": "üìä Thing GroupË©≥Á¥∞:",
        "thing_type_details": "üìä Thing TypeË©≥Á¥∞:",
        "name_label": "ÂêçÂâç",
        "type_label": "„Çø„Ç§„Éó",
        "description_simple": "Ë™¨Êòé",
    },
    "zh-CN": {
        "title": "üöÄ AWS IoT Registry API Êé¢Á¥¢Âô®",
        "separator": "=" * 40,
        "aws_config": "üìç AWS ÈÖçÁΩÆ:",
        "account_id": "Ë¥¶Êà∑ ID",
        "region": "Âå∫Âüü",
        "description": "ÈÄöËøáËØ¶ÁªÜËØ¥Êòé‰∫§‰∫íÂºèÊé¢Á¥¢ AWS IoT Registry API„ÄÇ",
        "debug_enabled": "üîç Ë∞ÉËØïÊ®°ÂºèÂ∑≤ÂêØÁî®",
        "debug_features": ["‚Ä¢ ÂÆåÊï¥ÁöÑ API ËØ∑Ê±Ç/ÂìçÂ∫îËØ¶ÁªÜ‰ø°ÊÅØ", "‚Ä¢ ÂÆåÊï¥ÁöÑ HTTP ‰ø°ÊÅØ", "‚Ä¢ Â¢ûÂº∫ÁöÑÈîôËØØËØäÊñ≠"],
        "tip": "üí° ÊèêÁ§∫: ‰ΩøÁî® --debug Êàñ -d Ê†áÂøóËé∑ÂèñËØ¶ÁªÜÁöÑ API ‰ø°ÊÅØ",
        "tip_features": ["‚Ä¢ Á≤æÁÆÄÊ®°Âºè‰ªÖÊòæÁ§∫ÂÖ≥ÈîÆÊåáÊ†á", "‚Ä¢ Ë∞ÉËØïÊ®°ÂºèÊòæÁ§∫ÂÆåÊï¥ÁöÑ API ËØ¶ÁªÜ‰ø°ÊÅØ"],
        "client_initialized": "‚úÖ AWS IoT ÂÆ¢Êà∑Á´ØÂàùÂßãÂåñÊàêÂäü",
        "invalid_credentials": "‚ùå Êó†ÊïàÁöÑ AWS Âá≠ËØÅ",
        "learning_intro_title": "AWS IoT Registry API - ËÆæÂ§áÁÆ°ÁêÜ",
        "learning_intro_content": "AWS IoT Registry ÊòØÂ≠òÂÇ® IoT ËÆæÂ§áÔºàThingsÔºâ„ÄÅÂÖ∂ÁªÑÁªáÔºàThing GroupsÔºâ„ÄÅËÆæÂ§áÊ®°ÊùøÔºàThing TypesÔºâÂíåÂÆâÂÖ®ËØÅ‰π¶‰ø°ÊÅØÁöÑ‰∏≠Â§ÆÊï∞ÊçÆÂ∫ì„ÄÇËøô‰∫õ API ÂÖÅËÆ∏ÊÇ®‰ª•ÁºñÁ®ãÊñπÂºèÁÆ°ÁêÜÊï¥‰∏™ IoT ËÆæÂ§áËΩ¶Èòü„ÄÇÁêÜËß£Ëøô‰∫õÊìç‰ΩúÊòØÊûÑÂª∫ÂèØÊâ©Â±ï IoT Ëß£ÂÜ≥ÊñπÊ°àÁöÑÂü∫Á°Ä„ÄÇ",
        "learning_intro_next": "Êàë‰ª¨Â∞ÜÈÄöËøáËØ¶ÁªÜËØ¥ÊòéÊé¢Á¥¢ 8 ‰∏™Ê†∏ÂøÉ Registry API",
        "press_enter": "Êåâ Enter ÁªßÁª≠...",
        "goodbye": "üëã ÂÜçËßÅÔºÅ",
        "operations_menu": "üìã ÂèØÁî®Êìç‰Ωú:",
        "operations": [
            "1. ÂàóÂá∫ Things",
            "2. ÂàóÂá∫ËØÅ‰π¶",
            "3. ÂàóÂá∫ Thing Groups",
            "4. ÂàóÂá∫ Thing Types",
            "5. ÊèèËø∞ Thing",
            "6. ÊèèËø∞ Thing Group",
            "7. ÊèèËø∞ Thing Type",
            "8. ÊèèËø∞Á´ØÁÇπ",
            "9. ÈÄÄÂá∫",
        ],
        "select_operation": "ÈÄâÊã©Êìç‰Ωú (1-9):",
        "invalid_choice": "‚ùå Êó†ÊïàÈÄâÊã©„ÄÇËØ∑ÈÄâÊã© 1-9„ÄÇ",
        "list_things_options": "üîç List Things ÈÄâÈ°π:",
        "list_things_menu": [
            "   1. ÂàóÂá∫ÊâÄÊúâ ThingsÔºàÂü∫Êú¨Ôºâ",
            "   2. ‰ΩøÁî®ÂàÜÈ°µÂàóÂá∫ Things",
            "   3. Êåâ Thing Type ËøáÊª§ Things",
            "   4. ÊåâÂ±ûÊÄßËøáÊª§ Things",
        ],
        "select_option": "ÈÄâÊã©ÈÄâÈ°π (1-4):",
        "max_results_prompt": "ËæìÂÖ•ÊØèÈ°µÊúÄÂ§ßÁªìÊûúÊï∞ÔºàÈªòËÆ§ 5Ôºâ:",
        "thing_type_prompt": "ËæìÂÖ• Thing Type ÂêçÁß∞Ôºà‰æãÂ¶ÇÔºöSedanVehicleÔºâ:",
        "attribute_name_prompt": "ËæìÂÖ•Â±ûÊÄßÂêçÁß∞Ôºà‰æãÂ¶ÇÔºöcountryÔºâ:",
        "attribute_value_prompt": "ËæìÂÖ•Â±ûÊÄßÂÄºÔºà‰æãÂ¶ÇÔºöUSÔºâ:",
        "no_thing_type": "‚ùå Êú™ÊåáÂÆö Thing Type",
        "attribute_required": "‚ùå ÈúÄË¶ÅÂ±ûÊÄßÂêçÁß∞ÂíåÂÄº",
        "executing": "üîÑ ÊâßË°å‰∏≠:",
        "completed": "Â∑≤ÂÆåÊàê",
        "found_things": "üìä ÊâæÂà∞ {} ‰∏™ Things",
        "thing_names": "   Thing ÂêçÁß∞:",
        "found_certificates": "üìä ÊâæÂà∞ {} ‰∏™ËØÅ‰π¶",
        "certificate_ids": "   ËØÅ‰π¶ ID:",
        "found_thing_groups": "üìä ÊâæÂà∞ {} ‰∏™ Thing Groups",
        "group_names": "   ÁªÑÂêçÁß∞:",
        "found_thing_types": "üìä ÊâæÂà∞ {} ‰∏™ Thing Types",
        "type_names": "   Á±ªÂûãÂêçÁß∞:",
        "return_to_menu": "Êåâ Enter ËøîÂõûËèúÂçï...",
        "available_things": "üìã ÂèØÁî®ÁöÑ Things",
        "available_groups": "üìã ÂèØÁî®ÁöÑ Thing Groups",
        "available_types": "üìã ÂèØÁî®ÁöÑ Thing Types",
        "enter_thing_name": "ËæìÂÖ• Thing ÂêçÁß∞: ",
        "enter_group_selection": "ËæìÂÖ•ÁºñÂè∑Êàñ Thing Group ÂêçÁß∞: ",
        "enter_type_selection": "ËæìÂÖ•ÁºñÂè∑Êàñ Thing Type ÂêçÁß∞: ",
        "no_things_found": "‚ö†Ô∏è Âú®ÊÇ®ÁöÑË¥¶Êà∑‰∏≠Êú™ÊâæÂà∞ Things",
        "no_groups_found": "‚ö†Ô∏è Âú®ÊÇ®ÁöÑË¥¶Êà∑‰∏≠Êú™ÊâæÂà∞ Thing Groups",
        "no_types_found": "‚ö†Ô∏è Âú®ÊÇ®ÁöÑË¥¶Êà∑‰∏≠Êú™ÊâæÂà∞ Thing Types",
        "could_not_list_things": "‚ö†Ô∏è Êó†Ê≥ïÂàóÂá∫ Things:",
        "could_not_list_groups": "‚ö†Ô∏è Êó†Ê≥ïÂàóÂá∫ Thing Groups:",
        "could_not_list_types": "‚ö†Ô∏è Êó†Ê≥ïÂàóÂá∫ Thing Types:",
        "invalid_selection": "‚ùå Êó†ÊïàÈÄâÊã©„ÄÇËØ∑ÈÄâÊã©",
        "endpoint_type_prompt": "ËæìÂÖ•Á´ØÁÇπÁ±ªÂûãÔºàiot:Data-ATS, iot:CredentialProvider, iot:JobsÔºâ[ÈªòËÆ§: iot:Data-ATS]: ",
        "pagination_learning_title": "üìö Â≠¶‰π†Ë¶ÅÁÇπ: ÂàÜÈ°µ",
        "pagination_learning_content": "ÂàÜÈ°µÂÖÅËÆ∏ÊÇ®‰ª•ËæÉÂ∞èÁöÑÂùóÊ£ÄÁ¥¢Â§ßÂûãÊï∞ÊçÆÈõÜ„ÄÇËøôÂú®ÁÆ°ÁêÜÊï∞ÁôæÊàñÊï∞ÂçÉ‰∏™ËÆæÂ§áÊó∂Ëá≥ÂÖ≥ÈáçË¶ÅÔºå‰ª•ÈÅøÂÖçË∂ÖÊó∂ÂíåÂÜÖÂ≠òÈóÆÈ¢ò„ÄÇ",
        "pagination_listing": "üîÑ ‰ΩøÁî®ÂàÜÈ°µÂàóÂá∫ ThingsÔºàÊØèÈ°µÊúÄÂ§ö {}Ôºâ...",
        "page_summary": "üìä Á¨¨ {} È°µÊëòË¶Å: Ê£ÄÁ¥¢Âà∞ {} ‰∏™ Things",
        "continue_next_page": "ÁªßÁª≠Âà∞‰∏ã‰∏ÄÈ°µÔºü (y/N): ",
        "pagination_complete": "üèÅ ÂàÜÈ°µÂÆåÊàê: Âú® {} È°µ‰∏≠ÊâæÂà∞ÊÄªÂÖ± {} ‰∏™ Things",
        "filter_by_type_learning_title": "üìö Â≠¶‰π†Ë¶ÅÁÇπ: Êåâ Thing Type ËøáÊª§",
        "filter_by_type_learning_content": "ËøáÊª§ÂÖÅËÆ∏ÊÇ®Êü•ÊâæÁâπÂÆöÁ±ªÂà´ÁöÑËÆæÂ§á„ÄÇThing Types ÂÖÖÂΩìÂ∞ÜÁõ∏‰ººËÆæÂ§áÂàÜÁªÑÂú®‰∏ÄËµ∑ÁöÑÊ®°Êùø„ÄÇ",
        "filtering_by_type": "üîÑ Êåâ Thing Type ËøáÊª§ Things: {}...",
        "filter_type_results": "üìä ËøáÊª§ÁªìÊûú: ÊâæÂà∞ {} ‰∏™ÂÖ∑Êúâ Thing Type '{}' ÁöÑ Things",
        "filter_by_attribute_learning_title": "üìö Â≠¶‰π†Ë¶ÅÁÇπ: ÊåâÂ±ûÊÄßËøáÊª§",
        "filter_by_attribute_learning_content": "Â±ûÊÄßËøáÊª§Â∏ÆÂä©ÊÇ®Êü•ÊâæÂÖ∑ÊúâÁâπÂÆöÁâπÂæÅÁöÑËÆæÂ§á„ÄÇËøôÂØπ‰∫éÊåâ‰ΩçÁΩÆ„ÄÅÂÆ¢Êà∑ÊàñÂÖ∂‰ªñÂÖÉÊï∞ÊçÆÂÆö‰ΩçËÆæÂ§áÂæàÊúâÁî®„ÄÇ",
        "filtering_by_attribute": "üîÑ ÊåâÂ±ûÊÄß {}={} ËøáÊª§ Things...",
        "filter_attribute_results": "üìä ËøáÊª§ÁªìÊûú: ÊâæÂà∞ {} ‰∏™ÂÖ∑Êúâ {}='{}' ÁöÑ Things",
        "debug_full_error": "üîç Ë∞ÉËØï: ÂÆåÊï¥ÈîôËØØÂìçÂ∫î:",
        "debug_full_traceback": "üîç Ë∞ÉËØï: ÂÆåÊï¥Â†ÜÊ†àË∑üË∏™:",
        "api_error": "‚ùå API ÈîôËØØ:",
        "error": "‚ùå ÈîôËØØ:",
        "no_region_error": "‚ùå Êú™ÈÖçÁΩÆ AWS Âå∫Âüü",
        "region_setup_instructions": [
            "ËØ∑‰ΩøÁî®‰ª•‰∏ãÊñπÊ≥ï‰πã‰∏ÄÈÖçÁΩÆÊÇ®ÁöÑ AWS Âå∫Âüü:",
            "1. ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè: export AWS_DEFAULT_REGION=us-east-1",
            "2. ÈÖçÁΩÆ AWS CLI: aws configure",
            "3. Âú® AWS Âá≠ËØÅÊñá‰ª∂‰∏≠ËÆæÁΩÆÂå∫Âüü",
        ],
        "aws_context_error": "‚ö†Ô∏è Êó†Ê≥ïÊ£ÄÁ¥¢ AWS ‰∏ä‰∏ãÊñá:",
        "aws_credentials_reminder": "   Á°Æ‰øùÂ∑≤ÈÖçÁΩÆ AWS Âá≠ËØÅ",
        "learning_moments": {
            "list_things": {
                "title": "List Things - ËÆæÂ§áÂèëÁé∞",
                "content": "list_things API Ê£ÄÁ¥¢ÊÇ®Ë¥¶Êà∑‰∏≠ÁöÑÊâÄÊúâ IoT ËÆæÂ§áÔºàThingsÔºâ„ÄÇËøôÂØπ‰∫éËÆæÂ§áÂ∫ìÂ≠òÁÆ°ÁêÜ„ÄÅÁõëÊéßËΩ¶ÈòüËßÑÊ®°ÂíåÊåâÂ±ûÊÄßÂèëÁé∞ËÆæÂ§áËá≥ÂÖ≥ÈáçË¶Å„ÄÇÊÇ®ÂèØ‰ª•‰ΩøÁî®ÂàÜÈ°µÂíåËøáÊª§Êù•È´òÊïàÂ§ÑÁêÜËÆæÂ§áËΩ¶Èòü„ÄÇ",
                "next": "Êàë‰ª¨Â∞Ü‰ΩøÁî®‰∏çÂêåÈÄâÈ°πË∞ÉÁî® list_things API",
            },
            "list_certificates": {
                "title": "List Certificates - ÂÆâÂÖ®Â∫ìÂ≠ò",
                "content": "X.509 ËØÅ‰π¶ÊòØ IoT ËÆæÂ§áÂÆâÂÖ®ÁöÑÂü∫Á°Ä„ÄÇÊØè‰∏™ËØÅ‰π¶ÂîØ‰∏ÄÊ†áËØÜ‰∏Ä‰∏™ËÆæÂ§áÂπ∂ÂêØÁî®‰∏é AWS IoT Core ÁöÑÂÆâÂÖ®ÈÄö‰ø°„ÄÇÊ≠§ API Â∏ÆÂä©ÊÇ®ÂÆ°Ê†∏ÂÆâÂÖ®ÊÄÅÂäø„ÄÅË∑üË∏™ËØÅ‰π¶ÁîüÂëΩÂë®ÊúüÂπ∂ËØÜÂà´ÈúÄË¶ÅËØÅ‰π¶ËΩÆÊç¢ÁöÑËÆæÂ§á„ÄÇ",
                "next": "Êàë‰ª¨Â∞ÜÊ£ÄÁ¥¢ÊâÄÊúâËØÅ‰π¶Âπ∂Ê£ÄÊü•ÂÖ∂ÂÆâÂÖ®Â±ûÊÄß",
            },
            "list_thing_groups": {
                "title": "List Thing Groups - ËÆæÂ§áÁªÑÁªá",
                "content": "Thing Groups ‰∏∫ÊÇ®ÁöÑ IoT ËÆæÂ§áÊèê‰æõÂàÜÂ±ÇÁªÑÁªáÔºåÁ±ª‰ºº‰∫éÊñá‰ª∂ÁöÑÊñá‰ª∂Â§π„ÄÇÂÆÉ‰ª¨ÊîØÊåÅÊâπÈáèÊìç‰Ωú„ÄÅÁ≠ñÁï•ÁªßÊâø‰ª•ÂèäÊåâ‰ΩçÁΩÆ„ÄÅÂäüËÉΩÊàñ‰ªª‰Ωï‰∏öÂä°Ê†áÂáÜËøõË°åÈÄªËæëÂàÜÁªÑ„ÄÇËøôÂØπ‰∫éÁÆ°ÁêÜÂ§ßËßÑÊ®° IoT ÈÉ®ÁΩ≤Ëá≥ÂÖ≥ÈáçË¶Å„ÄÇ",
                "next": "Êàë‰ª¨Â∞ÜÊé¢Á¥¢ÊÇ®ÁöÑ Thing Groups ÂèäÂÖ∂ÁªÑÁªáÁªìÊûÑ",
            },
            "list_thing_types": {
                "title": "List Thing Types - ËÆæÂ§áÊ®°Êùø",
                "content": "Thing Types ÊòØÂÆö‰πâ IoT ËÆæÂ§áÁ±ªÂà´ÁöÑÊ®°Êùø„ÄÇÂÆÉ‰ª¨ÂÖÖÂΩìËìùÂõæÔºåÊåáÂÆöÁõ∏‰ººËÆæÂ§áÁöÑÈÄöÁî®Â±ûÊÄßÂíåË°å‰∏∫„ÄÇ‰æãÂ¶ÇÔºå'SedanVehicle' Á±ªÂûãÂèØËÉΩÂÆö‰πâÂºïÊìéÁ±ªÂûãÂíåÂ∫ß‰ΩçÂÆπÈáèÁ≠âÂ±ûÊÄß„ÄÇThing Types Â∏ÆÂä©ÁªÑÁªáÊÇ®ÁöÑËÆæÂ§áËΩ¶ÈòüÂπ∂ÂêØÁî®Ê†áÂáÜÂåñËÆæÂ§áÁÆ°ÁêÜ„ÄÇ",
                "next": "Êàë‰ª¨Â∞ÜÊ£ÄÊü•ÊÇ®ÁöÑ Thing Types ÂèäÂÖ∂Â±ûÊÄßÊû∂ÊûÑ",
            },
            "describe_thing": {
                "title": "Describe Thing - ËÆæÂ§áËØ¶ÁªÜ‰ø°ÊÅØ",
                "content": "describe_thing API Êèê‰æõÁâπÂÆö IoT ËÆæÂ§áÁöÑÂÆåÊï¥ËØ¶ÁªÜ‰ø°ÊÅØÔºåÂåÖÊã¨ÂÖ∂Â±ûÊÄß„ÄÅThing Type ÂÖ≥ËÅîÂíåÁªÑÊàêÂëòË∫´‰ªΩ„ÄÇËøôÂØπ‰∫éËÆæÂ§áÊïÖÈöúÊéíÈô§„ÄÅÈÖçÁΩÆÈ™åËØÅÂíåÁêÜËß£ËÆæÂ§áÂÖ≥Á≥ªËá≥ÂÖ≥ÈáçË¶Å„ÄÇ",
                "next": "Êàë‰ª¨Â∞ÜÊ£ÄÊü•ÁâπÂÆö Thing ÁöÑËØ¶ÁªÜÈÖçÁΩÆ",
            },
            "describe_thing_group": {
                "title": "Describe Thing Group - ÁªÑËØ¶ÁªÜ‰ø°ÊÅØ",
                "content": "Thing Groups ÂèØ‰ª•ÊúâÂ±ûÊÄß„ÄÅÁ≠ñÁï•ÂíåÂ±ÇÊ¨°ÂÖ≥Á≥ª„ÄÇÊ≠§ API ÊòæÁ§∫ÁªÑÈÖçÁΩÆ„ÄÅÊàêÂëòËÆæÂ§áÂíåÁªßÊâøÁöÑÁ≠ñÁï•„ÄÇÁêÜËß£ÁªÑÁªìÊûÑÂØπ‰∫éÊúâÊïàÁöÑËÆæÂ§áÁÆ°ÁêÜÂíåÁ≠ñÁï•Â∫îÁî®Ëá≥ÂÖ≥ÈáçË¶Å„ÄÇ",
                "next": "Êàë‰ª¨Â∞ÜÊé¢Á¥¢ Thing Group ÈÖçÁΩÆÂíåÂ±ÇÊ¨°ÁªìÊûÑ",
            },
            "describe_thing_type": {
                "title": "Describe Thing Type - Á±ªÂûãÂÆö‰πâ",
                "content": "Thing Types ÂÆö‰πâËÆæÂ§áÁ±ªÂà´ÁöÑÂ±ûÊÄßÊû∂ÊûÑÂíåÊèèËø∞„ÄÇÊ≠§ API ÊòæÁ§∫Á±ªÂûãÈÖçÁΩÆ„ÄÅÂ±ûÊÄßÂÆö‰πâÂíå‰ΩøÁî®ÁªüËÆ°„ÄÇËøôÂØπ‰∫éÁêÜËß£ËÆæÂ§áÊ†áÂáÜÂåñÂíåÁ°Æ‰øù‰∏ÄËá¥ÁöÑËÆæÂ§áÈÖçÁΩÆÂæàÈáçË¶Å„ÄÇ",
                "next": "Êàë‰ª¨Â∞ÜÊ£ÄÊü• Thing Type ÂÆö‰πâÂíåÂ±ûÊÄß",
            },
            "describe_endpoint": {
                "title": "Describe Endpoint - ËøûÊé•‰ø°ÊÅØ",
                "content": "IoT Á´ØÁÇπÊòØËÆæÂ§áÁî®‰∫éËøûÊé•Âà∞ AWS IoT Core ÁöÑÁΩëÂÖ≥ URL„ÄÇ‰∏çÂêåÁöÑÁ´ØÁÇπÁ±ªÂûãÊúçÂä°‰∫é‰∏çÂêåÁöÑÁõÆÁöÑÔºöData-ATS Áî®‰∫éËÆæÂ§áÈÄö‰ø°ÔºåCredentialProvider Áî®‰∫éË∫´‰ªΩÈ™åËØÅÔºåJobs Áî®‰∫éËÆæÂ§áÁÆ°ÁêÜ„ÄÇÁêÜËß£Á´ØÁÇπÂØπ‰∫éËÆæÂ§áËøûÊé•ÈÖçÁΩÆËá≥ÂÖ≥ÈáçË¶Å„ÄÇ",
                "next": "Êàë‰ª¨Â∞ÜÂèëÁé∞ËÆæÂ§áËøûÊé•ÁöÑÁ´ØÁÇπ URL",
            },
        },
        "api_desc_list_things_paginated": "Á¨¨ {} È°µ - Ê£ÄÁ¥¢ÊúÄÂ§ö {} ‰∏™ Things",
        "api_desc_list_things_basic": "Ê£ÄÁ¥¢ÊâÄÊúâ Things",
        "api_desc_list_things_filtered_type": "Êåâ Thing Type ËøáÊª§ÁöÑ Things",
        "api_desc_list_things_filtered_attribute": "ÊåâÂ±ûÊÄßËøáÊª§ÁöÑ Things",
        "api_desc_list_certificates_basic": "Ê£ÄÁ¥¢ÊâÄÊúâËØÅ‰π¶",
        "api_desc_list_certificates_filtered": "ÊåâÁä∂ÊÄÅËøáÊª§ÁöÑËØÅ‰π¶",
        "api_desc_list_thing_groups_basic": "Ê£ÄÁ¥¢ÊâÄÊúâ Thing Groups",
        "api_desc_list_thing_groups_recursive": "ÈÄíÂΩíÊ£ÄÁ¥¢ Thing Groups",
        "api_desc_list_thing_types_basic": "Ê£ÄÁ¥¢ÊâÄÊúâ Thing Types",
        "api_call_label": "API Ë∞ÉÁî®",
        "http_method_label": "HTTP ÊñπÊ≥ï",
        "endpoint_label": "Á´ØÁÇπ",
        "parameters_label": "ÂèÇÊï∞",
        "response_label": "ÂìçÂ∫î",
        "learning_moment_label": "Â≠¶‰π†Ë¶ÅÁÇπ",
        "found_label": "ÊâæÂà∞",
        "things_label": "Things",
        "certificates_label": "ËØÅ‰π¶",
        "thing_groups_label": "Thing Groups",
        "thing_types_label": "Thing Types",
        "name_label": "ÂêçÁß∞",
        "arn_label": "ARN",
        "id_label": "ID",
        "status_label": "Áä∂ÊÄÅ",
        "creation_date_label": "ÂàõÂª∫Êó•Êúü",
        "attributes_label": "Â±ûÊÄß",
        "thing_type_label": "Thing Type",
        "version_label": "ÁâàÊú¨",
        "group_properties_label": "ÁªÑÂ±ûÊÄß",
        "parent_group_label": "Áà∂ÁªÑ",
        "root_to_parent_groups_label": "Ê†πÂà∞Áà∂ÁªÑ",
        "thing_type_properties_label": "Thing Type Â±ûÊÄß",
        "thing_type_metadata_label": "Thing Type ÂÖÉÊï∞ÊçÆ",
        "endpoint_type_label": "Á´ØÁÇπÁ±ªÂûã",
        "endpoint_address_label": "Á´ØÁÇπÂú∞ÂùÄ",
        "api_desc_list_things_by_type": "Ê£ÄÁ¥¢Êåâ Thing Type '{}' ËøáÊª§ÁöÑ Things",
        "api_desc_list_things_by_attribute": "Ê£ÄÁ¥¢ÊåâÂ±ûÊÄß '{}={}' ËøáÊª§ÁöÑ Things",
        "api_desc_list_things": "Ê£ÄÁ¥¢ AWS Ë¥¶Êà∑‰∏≠ÊâÄÊúâ IoT Things ÁöÑÂàÜÈ°µÂàóË°®",
        "api_desc_list_certificates": "Ê£ÄÁ¥¢Âú® AWS IoT Ë¥¶Êà∑‰∏≠Ê≥®ÂÜåÁöÑ X.509 ËØÅ‰π¶ÂàóË°®",
        "api_desc_list_thing_groups": "Ê£ÄÁ¥¢Áî®‰∫éÁªÑÁªáÂíåÁÆ°ÁêÜ IoT ËÆæÂ§áÁöÑ Thing Groups ÂàóË°®",
        "api_desc_list_thing_types": "Ê£ÄÁ¥¢ÂÆö‰πâËÆæÂ§áÊ®°ÊùøÂíåÂ±ûÊÄßÁöÑ Thing Types ÂàóË°®",
        "api_desc_describe_thing": "Ê£ÄÁ¥¢ÁâπÂÆö IoT Thing ÁöÑËØ¶ÁªÜ‰ø°ÊÅØ",
        "api_desc_describe_thing_group": "Ê£ÄÁ¥¢ÁâπÂÆö Thing Group ÁöÑËØ¶ÁªÜ‰ø°ÊÅØ",
        "api_desc_describe_thing_type": "Ê£ÄÁ¥¢ÁâπÂÆö Thing Type ÁöÑËØ¶ÁªÜ‰ø°ÊÅØ",
        "api_desc_describe_endpoint": "Ê£ÄÁ¥¢ AWS Ë¥¶Êà∑ÂíåÂå∫ÂüüÁöÑ IoT Á´ØÁÇπ URL",
        "api_explain_list_things": "ÊòæÁ§∫ÂåÖÂê´ÂêçÁß∞„ÄÅÁ±ªÂûã„ÄÅÂ±ûÊÄßÂíåÂàõÂª∫Êó•ÊúüÁöÑËÆæÂ§áÊ∏ÖÂçï",
        "api_explain_list_certificates": "ÊòæÁ§∫ÂåÖÂê´ ID„ÄÅARN„ÄÅÁä∂ÊÄÅÂíåÂà∞ÊúüÊó•ÊúüÁöÑÂÆâÂÖ®ËØÅ‰π¶",
        "api_explain_list_thing_groups": "ÊòæÁ§∫ÂåÖÂê´ÁªÑÂ±ÇÊ¨°ÁªìÊûÑÂíåÂ±ûÊÄßÁöÑËÆæÂ§áÁªÑÁªáÁªìÊûÑ",
        "api_explain_list_thing_types": "ÊòæÁ§∫ÂåÖÂê´ÂèØÊêúÁ¥¢Â±ûÊÄßÂíåÂ±ûÊÄßÂÆö‰πâÁöÑËÆæÂ§áÊ®°Êùø",
        "api_explain_describe_thing": "ÊòæÁ§∫ÂåÖÂê´Â±ûÊÄß„ÄÅÁ±ªÂûãÂíåÁâàÊú¨‰ø°ÊÅØÁöÑÂÆåÊï¥ËÆæÂ§áÈÖçÁΩÆÊñá‰ª∂",
        "api_explain_describe_thing_group": "ÊòæÁ§∫ÁªÑÈÖçÁΩÆ„ÄÅÁà∂/Â≠êÂÖ≥Á≥ªÂíåÂ∫îÁî®ÁöÑÁ≠ñÁï•",
        "api_explain_describe_thing_type": "ÊòæÁ§∫Ê®°ÊùøÊû∂ÊûÑ„ÄÅÂèØÊêúÁ¥¢Â±ûÊÄßÂíåÂ±ûÊÄßÁ∫¶Êùü",
        "api_explain_describe_endpoint": "ËøîÂõûÁî®‰∫éËÆæÂ§áÈÄö‰ø°ÂíåÊï∞ÊçÆÊìç‰ΩúÁöÑ HTTPS Á´ØÁÇπ URL",
        "api_call_label": "API Ë∞ÉÁî®",
        "http_request_label": "HTTP ËØ∑Ê±Ç",
        "description_label": "ÊèèËø∞",
        "input_parameters_label": "ËæìÂÖ•ÂèÇÊï∞",
        "no_input_parameters": "Êó†ÔºàÊ≠§ API ‰∏çÈúÄË¶ÅËæìÂÖ•ÂèÇÊï∞Ôºâ",
        "response_explanation_label": "ÂìçÂ∫îËØ¥Êòé",
        "response_payload_label": "ÂìçÂ∫îË¥üËΩΩ",
        "thing_details": "üìä Thing ËØ¶ÁªÜ‰ø°ÊÅØ:",
        "thing_group_details": "üìä Thing Group ËØ¶ÁªÜ‰ø°ÊÅØ:",
        "thing_type_details": "üìä Thing Type ËØ¶ÁªÜ‰ø°ÊÅØ:",
        "name_label": "ÂêçÁß∞",
        "type_label": "Á±ªÂûã",
        "description_simple": "ÊèèËø∞",
    },
    "pt-BR": {
        "title": "üöÄ Explorador de API do Registro AWS IoT",
        "separator": "=" * 40,
        "aws_config": "üìç Configura√ß√£o AWS:",
        "account_id": "ID da Conta",
        "region": "Regi√£o",
        "description": "Explora√ß√£o interativa das APIs do Registro AWS IoT com explica√ß√µes detalhadas.",
        "debug_enabled": "üîç MODO DEBUG HABILITADO",
        "debug_features": [
            "‚Ä¢ Detalhes completos de solicita√ß√£o/resposta da API",
            "‚Ä¢ Informa√ß√µes HTTP completas",
            "‚Ä¢ Diagn√≥sticos de erro aprimorados",
        ],
        "tip": "üí° Dica: Use a flag --debug ou -d para informa√ß√µes detalhadas da API",
        "tip_features": [
            "‚Ä¢ Modo condensado mostra apenas m√©tricas principais",
            "‚Ä¢ Modo debug mostra detalhes completos da API",
        ],
        "client_initialized": "‚úÖ Cliente AWS IoT inicializado com sucesso",
        "invalid_credentials": "‚ùå Credenciais AWS inv√°lidas",
        "learning_intro_title": "APIs do Registro AWS IoT - Gerenciamento de Dispositivos",
        "learning_intro_content": "O Registro AWS IoT √© o banco de dados central que armazena informa√ß√µes sobre seus dispositivos IoT (Things), sua organiza√ß√£o (Thing Groups), modelos de dispositivos (Thing Types) e certificados de seguran√ßa. Essas APIs permitem gerenciar programaticamente toda sua frota de dispositivos IoT. Compreender essas opera√ß√µes √© fundamental para construir solu√ß√µes IoT escal√°veis.",
        "learning_intro_next": "Exploraremos 8 APIs centrais do Registro com explica√ß√µes detalhadas",
        "press_enter": "Pressione Enter para continuar...",
        "goodbye": "üëã Tchau!",
        "operations_menu": "üìã Opera√ß√µes Dispon√≠veis:",
        "operations": [
            "1. Listar Things",
            "2. Listar Certificados",
            "3. Listar Thing Groups",
            "4. Listar Thing Types",
            "5. Descrever Thing",
            "6. Descrever Thing Group",
            "7. Descrever Thing Type",
            "8. Descrever Endpoint",
            "9. Sair",
        ],
        "select_operation": "Selecionar opera√ß√£o (1-9):",
        "invalid_choice": "‚ùå Escolha inv√°lida. Por favor selecione 1-9.",
        "list_things_options": "üîç Op√ß√µes de Listar Things:",
        "list_things_menu": [
            "   1. Listar todos os Things (b√°sico)",
            "   2. Listar Things com pagina√ß√£o",
            "   3. Filtrar Things por Thing Type",
            "   4. Filtrar Things por atributo",
        ],
        "select_option": "Selecionar op√ß√£o (1-4):",
        "max_results_prompt": "Digite m√°ximo de resultados por p√°gina (padr√£o 5):",
        "thing_type_prompt": "Digite nome do Thing Type (ex., SedanVehicle):",
        "attribute_name_prompt": "Digite nome do atributo (ex., country):",
        "attribute_value_prompt": "Digite valor do atributo (ex., US):",
        "no_thing_type": "‚ùå Nenhum Thing Type especificado",
        "attribute_required": "‚ùå Nome e valor do atributo s√£o obrigat√≥rios",
        "executing": "üîÑ Executando:",
        "completed": "conclu√≠do",
        "found_things": "üìã Encontrados {} Things",
        "thing_names": "   Nomes dos Things:",
        "found_certificates": "üìã Encontrados {} Certificados",
        "certificate_ids": "   IDs dos Certificados:",
        "found_thing_groups": "üìã Encontrados {} Thing Groups",
        "group_names": "   Nomes dos Grupos:",
        "found_thing_types": "üìã Encontrados {} Thing Types",
        "type_names": "   Nomes dos Tipos:",
        "return_to_menu": "Pressione Enter para voltar ao menu...",
        "available_things": "üìã Things Dispon√≠veis",
        "available_groups": "üìã Thing Groups Dispon√≠veis",
        "available_types": "üìã Thing Types Dispon√≠veis",
        "enter_thing_name": "Digite nome do Thing: ",
        "enter_group_selection": "Digite n√∫mero ou nome do Thing Group: ",
        "enter_type_selection": "Digite n√∫mero ou nome do Thing Type: ",
        "no_things_found": "‚ö†Ô∏è N√£o foram encontrados Things em sua conta",
        "no_groups_found": "‚ö†Ô∏è N√£o foram encontrados Thing Groups em sua conta",
        "no_types_found": "‚ö†Ô∏è N√£o foram encontrados Thing Types em sua conta",
        "could_not_list_things": "‚ö†Ô∏è N√£o foi poss√≠vel listar os Things:",
        "could_not_list_groups": "‚ö†Ô∏è N√£o foi poss√≠vel listar os Thing Groups:",
        "could_not_list_types": "‚ö†Ô∏è N√£o foi poss√≠vel listar os Thing Types:",
        "invalid_selection": "‚ùå Sele√ß√£o inv√°lida. Por favor escolha",
        "endpoint_type_prompt": "Digite tipo de endpoint (iot:Data-ATS, iot:CredentialProvider, iot:Jobs) [padr√£o: iot:Data-ATS]: ",
        "pagination_learning_title": "üìö MOMENTO DE APRENDIZADO: Pagina√ß√£o",
        "pagination_learning_content": "A pagina√ß√£o permite recuperar grandes conjuntos de dados em peda√ßos menores. Isso √© essencial ao gerenciar centenas ou milhares de dispositivos para evitar timeouts e problemas de mem√≥ria.",
        "pagination_listing": "üîÑ Listando Things com pagina√ß√£o (m√°ximo {} por p√°gina)...",
        "page_summary": "üìã P√°gina {} Resumo: {} Things recuperados",
        "continue_next_page": "Continuar para pr√≥xima p√°gina? (s/N): ",
        "pagination_complete": "üèÅ Pagina√ß√£o Completa: {} Things totais encontrados em {} p√°gina(s)",
        "filter_by_type_learning_title": "üìö MOMENTO DE APRENDIZADO: Filtrar por Thing Type",
        "filter_by_type_learning_content": "A filtragem permite encontrar categorias espec√≠ficas de dispositivos. Thing Types atuam como modelos que agrupam dispositivos similares.",
        "filtering_by_type": "üîÑ Filtrando Things por Thing Type: {}...",
        "filter_type_results": "üìã Resultados do Filtro: {} Things encontrados com Thing Type '{}'",
        "filter_by_attribute_learning_title": "üìö MOMENTO DE APRENDIZADO: Filtrar por Atributos",
        "filter_by_attribute_learning_content": "A filtragem por atributos ajuda a encontrar dispositivos com caracter√≠sticas espec√≠ficas. Isso √© √∫til para direcionar dispositivos por localiza√ß√£o, cliente ou outros metadados.",
        "filtering_by_attribute": "üîÑ Filtrando Things por atributo {}={}...",
        "filter_attribute_results": "üìã Resultados do Filtro: {} Things encontrados com {}='{}'",
        "debug_full_error": "üîç DEBUG: Resposta completa de erro:",
        "debug_full_traceback": "üîç DEBUG: Rastreamento completo:",
        "api_error": "‚ùå Erro da API:",
        "error": "‚ùå Erro:",
        "no_region_error": "‚ùå Regi√£o AWS n√£o configurada",
        "region_setup_instructions": [
            "Por favor configure sua regi√£o AWS usando um destes m√©todos:",
            "1. Definir vari√°vel de ambiente: export AWS_DEFAULT_REGION=us-east-1",
            "2. Configurar AWS CLI: aws configure",
            "3. Definir regi√£o no arquivo de credenciais AWS",
        ],
        "aws_context_error": "‚ö†Ô∏è N√£o foi poss√≠vel recuperar o contexto AWS:",
        "aws_credentials_reminder": "   Certifique-se de que as credenciais AWS est√£o configuradas",
        "learning_moments": {
            "list_things": {
                "title": "List Things - Descoberta de Dispositivos",
                "content": "A API list_things recupera todos os dispositivos IoT (Things) em sua conta. Isso √© essencial para gerenciamento de invent√°rio de dispositivos, monitoramento do tamanho da frota e descoberta de dispositivos por atributos. Voc√™ pode usar pagina√ß√£o e filtragem para lidar com frotas de dispositivos de forma eficiente.",
                "next": "Chamaremos a API list_things com diferentes op√ß√µes",
            },
            "list_certificates": {
                "title": "List Certificates - Invent√°rio de Seguran√ßa",
                "content": "Certificados X.509 s√£o a base da seguran√ßa de dispositivos IoT. Cada certificado identifica unicamente um dispositivo e permite comunica√ß√£o segura com o AWS IoT Core. Esta API ajuda a auditar sua postura de seguran√ßa, rastrear o ciclo de vida dos certificados e identificar dispositivos que precisam de rota√ß√£o de certificados.",
                "next": "Recuperaremos todos os certificados e examinaremos suas propriedades de seguran√ßa",
            },
            "list_thing_groups": {
                "title": "List Thing Groups - Organiza√ß√£o de Dispositivos",
                "content": "Thing Groups fornecem organiza√ß√£o hier√°rquica para seus dispositivos IoT, similar a pastas para arquivos. Eles permitem opera√ß√µes em lote, heran√ßa de pol√≠ticas e agrupamento l√≥gico por localiza√ß√£o, fun√ß√£o ou qualquer crit√©rio de neg√≥cio. Isso √© crucial para gerenciar implanta√ß√µes IoT em larga escala.",
                "next": "Exploraremos seus Thing Groups e sua estrutura organizacional",
            },
            "list_thing_types": {
                "title": "List Thing Types - Modelos de Dispositivos",
                "content": "Thing Types s√£o modelos que definem categorias de dispositivos IoT. Eles atuam como plantas que especificam atributos e comportamentos comuns para dispositivos similares. Por exemplo, um tipo 'SedanVehicle' pode definir atributos como tipo de motor e capacidade de assentos. Thing Types ajudam a organizar sua frota de dispositivos e permitem gerenciamento padronizado de dispositivos.",
                "next": "Examinaremos seus Thing Types e seus esquemas de atributos",
            },
            "describe_thing": {
                "title": "Describe Thing - Detalhes do Dispositivo",
                "content": "A API describe_thing fornece informa√ß√µes completas sobre um dispositivo IoT espec√≠fico, incluindo seus atributos, Thing Type, vers√£o e identificadores √∫nicos. Isso √© essencial para solu√ß√£o de problemas de dispositivos, gerenciamento de configura√ß√£o e compreens√£o de relacionamentos de dispositivos dentro de sua arquitetura IoT.",
                "next": "Examinaremos informa√ß√µes detalhadas para um Thing espec√≠fico",
            },
            "describe_thing_group": {
                "title": "Describe Thing Group - Gerenciamento de Grupos",
                "content": "Detalhes do Thing Group revelam a estrutura organizacional de sua frota IoT. Voc√™ pode ver propriedades do grupo, hierarquias pai-filho, pol√≠ticas anexadas e dispositivos membros. Esta informa√ß√£o √© vital para entender controle de acesso, heran√ßa de pol√≠ticas e estrat√©gias de organiza√ß√£o de dispositivos.",
                "next": "Examinaremos propriedades detalhadas de um Thing Group espec√≠fico",
            },
            "describe_thing_type": {
                "title": "Describe Thing Type - An√°lise de Modelos",
                "content": "Detalhes do Thing Type mostram a defini√ß√£o do modelo para categorias de dispositivos. Voc√™ pode examinar atributos pesquis√°veis, restri√ß√µes de propriedades e metadados que definem como dispositivos deste tipo devem ser estruturados. Isso ajuda a garantir registro consistente de dispositivos e permite consultas eficientes da frota.",
                "next": "Analisaremos o esquema e propriedades de um Thing Type espec√≠fico",
            },
            "describe_endpoint": {
                "title": "Describe Endpoint - Descoberta de Conex√£o",
                "content": "Endpoints IoT s√£o as URLs de gateway que os dispositivos usam para se conectar ao AWS IoT Core. Diferentes tipos de endpoint servem diferentes prop√≥sitos: Data-ATS para comunica√ß√£o de dispositivos, CredentialProvider para autentica√ß√£o e Jobs para gerenciamento de dispositivos. Compreender endpoints √© crucial para configura√ß√£o de conectividade de dispositivos.",
                "next": "Descobriremos a URL do endpoint para conex√µes de dispositivos",
            },
        },
        "api_desc_list_things_paginated": "P√°gina {} - Recupera at√© {} Things",
        "api_desc_list_things_by_type": "Recupera Things filtrados por Thing Type '{}'",
        "api_desc_list_things_by_attribute": "Recupera Things filtrados por atributo '{}={}'",
        "api_desc_list_things": "Recupera uma lista paginada de todos os Things IoT em sua conta AWS",
        "api_desc_list_certificates": "Recupera uma lista de certificados X.509 registrados em sua conta AWS IoT",
        "api_desc_list_thing_groups": "Recupera uma lista de Thing Groups usados para organizar e gerenciar dispositivos IoT",
        "api_desc_list_thing_types": "Recupera uma lista de Thing Types que definem modelos e atributos de dispositivos",
        "api_desc_describe_thing": "Recupera informa√ß√µes detalhadas sobre um Thing IoT espec√≠fico",
        "api_desc_describe_thing_group": "Recupera informa√ß√µes detalhadas sobre um Thing Group espec√≠fico",
        "api_desc_describe_thing_type": "Recupera informa√ß√µes detalhadas sobre um Thing Type espec√≠fico",
        "api_desc_describe_endpoint": "Recupera a URL do endpoint IoT para sua conta e regi√£o AWS",
        "api_explain_list_things": "Mostra invent√°rio de dispositivos com nomes, tipos, atributos e datas de cria√ß√£o",
        "api_explain_list_certificates": "Mostra certificados de seguran√ßa com IDs, ARNs, status e datas de expira√ß√£o",
        "api_explain_list_thing_groups": "Mostra estrutura de organiza√ß√£o de dispositivos com hierarquias de grupos e propriedades",
        "api_explain_list_thing_types": "Mostra modelos de dispositivos com atributos pesquis√°veis e defini√ß√µes de propriedades",
        "api_explain_describe_thing": "Mostra perfil completo do dispositivo incluindo atributos, tipo e informa√ß√µes de vers√£o",
        "api_explain_describe_thing_group": "Mostra configura√ß√£o do grupo, relacionamentos pai/filho e pol√≠ticas aplicadas",
        "api_explain_describe_thing_type": "Mostra esquema do modelo, atributos pesquis√°veis e restri√ß√µes de propriedades",
        "api_explain_describe_endpoint": "Retorna a URL do endpoint HTTPS usada para comunica√ß√£o de dispositivos e opera√ß√µes de dados",
        "api_call_label": "Chamada da API",
        "http_request_label": "Solicita√ß√£o HTTP",
        "description_label": "Descri√ß√£o",
        "input_parameters_label": "Par√¢metros de Entrada",
        "no_input_parameters": "Nenhum (esta API n√£o requer par√¢metros de entrada)",
        "response_explanation_label": "Explica√ß√£o da Resposta",
        "response_payload_label": "Payload da Resposta",
        "thing_details": "üìã Detalhes do Thing:",
        "thing_group_details": "üìã Detalhes do Thing Group:",
        "thing_type_details": "üìã Detalhes do Thing Type:",
        "name_label": "Nome",
        "type_label": "Tipo",
        "description_simple": "Descri√ß√£o",
    },
    "ko": {
        "title": "üöÄ AWS IoT Î†àÏßÄÏä§Ìä∏Î¶¨ API ÌÉêÏÉâÍ∏∞",
        "separator": "=" * 40,
        "aws_config": "üìç AWS Íµ¨ÏÑ±:",
        "account_id": "Í≥ÑÏ†ï ID",
        "region": "Î¶¨Ï†Ñ",
        "description": "ÏÉÅÏÑ∏Ìïú ÏÑ§Î™ÖÍ≥º Ìï®Íªò AWS IoT Î†àÏßÄÏä§Ìä∏Î¶¨ APIÏùò ÎåÄÌôîÌòï ÌÉêÏÉâ.",
        "debug_enabled": "üîç ÎîîÎ≤ÑÍ∑∏ Î™®Îìú ÌôúÏÑ±Ìôî",
        "debug_features": [
            "‚Ä¢ Ï†ÑÏ≤¥ API ÏöîÏ≤≠/ÏùëÎãµ ÏÑ∏Î∂Ä Ï†ïÎ≥¥",
            "‚Ä¢ ÏôÑÏ†ÑÌïú HTTP Ï†ïÎ≥¥",
            "‚Ä¢ Ìñ•ÏÉÅÎêú Ïò§Î•ò ÏßÑÎã®",
        ],
        "tip": "üí° ÌåÅ: ÏÉÅÏÑ∏Ìïú API Ï†ïÎ≥¥Î•º Î≥¥Î†§Î©¥ --debug ÎòêÎäî -d ÌîåÎûòÍ∑∏Î•º ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî",
        "tip_features": ["‚Ä¢ Ï∂ïÏïΩ Î™®ÎìúÎäî ÌïµÏã¨ Î©îÌä∏Î¶≠Îßå ÌëúÏãú", "‚Ä¢ ÎîîÎ≤ÑÍ∑∏ Î™®ÎìúÎäî ÏôÑÏ†ÑÌïú API ÏÑ∏Î∂Ä Ï†ïÎ≥¥Î•º ÌëúÏãú"],
        "client_initialized": "‚úÖ AWS IoT ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§",
        "invalid_credentials": "‚ùå Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ AWS ÏûêÍ≤© Ï¶ùÎ™Ö",
        "learning_intro_title": "AWS IoT Î†àÏßÄÏä§Ìä∏Î¶¨ API - ÎîîÎ∞îÏù¥Ïä§ Í¥ÄÎ¶¨",
        "learning_intro_content": "AWS IoT Î†àÏßÄÏä§Ìä∏Î¶¨Îäî IoT ÎîîÎ∞îÏù¥Ïä§(Things), Í∑∏ Ï°∞ÏßÅ(Thing Groups), ÎîîÎ∞îÏù¥Ïä§ ÌÖúÌîåÎ¶ø(Thing Types) Î∞è Î≥¥Ïïà Ïù∏Ï¶ùÏÑúÏóê ÎåÄÌïú Ï†ïÎ≥¥Î•º Ï†ÄÏû•ÌïòÎäî Ï§ëÏïô Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏûÖÎãàÎã§. Ïù¥Îü¨Ìïú APIÎ•º ÌÜµÌï¥ Ï†ÑÏ≤¥ IoT ÎîîÎ∞îÏù¥Ïä§ ÌîåÎ¶øÏùÑ ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç Î∞©ÏãùÏúºÎ°ú Í¥ÄÎ¶¨Ìï† Ïàò ÏûàÏäµÎãàÎã§. Ïù¥Îü¨Ìïú ÏûëÏóÖÏùÑ Ïù¥Ìï¥ÌïòÎäî Í≤ÉÏùÄ ÌôïÏû• Í∞ÄÎä•Ìïú IoT ÏÜîÎ£®ÏÖòÏùÑ Íµ¨Ï∂ïÌïòÎäî Îç∞ Í∏∞Î≥∏Ï†ÅÏûÖÎãàÎã§.",
        "learning_intro_next": "ÏÉÅÏÑ∏Ìïú ÏÑ§Î™ÖÍ≥º Ìï®Íªò 8Í∞úÏùò ÌïµÏã¨ Î†àÏßÄÏä§Ìä∏Î¶¨ APIÎ•º ÌÉêÏÉâÌïòÍ≤†ÏäµÎãàÎã§",
        "press_enter": "Í≥ÑÏÜçÌïòÎ†§Î©¥ EnterÎ•º ÎàÑÎ•¥ÏÑ∏Ïöî...",
        "goodbye": "üëã ÏïàÎÖïÌûà Í∞ÄÏÑ∏Ïöî!",
        "operations_menu": "üìã ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏûëÏóÖ:",
        "operations": [
            "1. Things Î™©Î°ù",
            "2. Ïù∏Ï¶ùÏÑú Î™©Î°ù",
            "3. Thing Groups Î™©Î°ù",
            "4. Thing Types Î™©Î°ù",
            "5. Thing ÏÑ§Î™Ö",
            "6. Thing Group ÏÑ§Î™Ö",
            "7. Thing Type ÏÑ§Î™Ö",
            "8. ÏóîÎìúÌè¨Ïù∏Ìä∏ ÏÑ§Î™Ö",
            "9. Ï¢ÖÎ£å",
        ],
        "select_operation": "ÏûëÏóÖ ÏÑ†ÌÉù (1-9):",
        "invalid_choice": "‚ùå ÏûòÎ™ªÎêú ÏÑ†ÌÉùÏûÖÎãàÎã§. 1-9Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.",
        "list_things_options": "üîç Things Î™©Î°ù ÏòµÏÖò:",
        "list_things_menu": [
            "   1. Î™®Îì† Things Î™©Î°ù (Í∏∞Î≥∏)",
            "   2. ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖòÏúºÎ°ú Things Î™©Î°ù",
            "   3. Thing TypeÏúºÎ°ú Things ÌïÑÌÑ∞ÎßÅ",
            "   4. ÏÜçÏÑ±ÏúºÎ°ú Things ÌïÑÌÑ∞ÎßÅ",
        ],
        "select_option": "ÏòµÏÖò ÏÑ†ÌÉù (1-4):",
        "max_results_prompt": "ÌéòÏù¥ÏßÄÎãπ ÏµúÎåÄ Í≤∞Í≥º Ïàò ÏûÖÎ†• (Í∏∞Î≥∏Í∞í 5):",
        "thing_type_prompt": "Thing Type Ïù¥Î¶Ñ ÏûÖÎ†• (Ïòà: SedanVehicle):",
        "attribute_name_prompt": "ÏÜçÏÑ± Ïù¥Î¶Ñ ÏûÖÎ†• (Ïòà: country):",
        "attribute_value_prompt": "ÏÜçÏÑ± Í∞í ÏûÖÎ†• (Ïòà: US):",
        "no_thing_type": "‚ùå Thing TypeÏù¥ ÏßÄÏ†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§",
        "attribute_required": "‚ùå ÏÜçÏÑ± Ïù¥Î¶ÑÍ≥º Í∞íÏù¥ ÌïÑÏöîÌï©ÎãàÎã§",
        "executing": "üîÑ Ïã§Ìñâ Ï§ë:",
        "completed": "ÏôÑÎ£å",
        "found_things": "üìä {} ThingsÎ•º Ï∞æÏïòÏäµÎãàÎã§",
        "thing_names": "   Thing Ïù¥Î¶Ñ:",
        "found_certificates": "üìä {} Ïù∏Ï¶ùÏÑúÎ•º Ï∞æÏïòÏäµÎãàÎã§",
        "certificate_ids": "   Ïù∏Ï¶ùÏÑú ID:",
        "found_thing_groups": "üìä {} Thing GroupsÎ•º Ï∞æÏïòÏäµÎãàÎã§",
        "group_names": "   Í∑∏Î£π Ïù¥Î¶Ñ:",
        "found_thing_types": "üìä {} Thing TypesÎ•º Ï∞æÏïòÏäµÎãàÎã§",
        "type_names": "   ÌÉÄÏûÖ Ïù¥Î¶Ñ:",
        "return_to_menu": "Î©îÎâ¥Î°ú ÎèåÏïÑÍ∞ÄÎ†§Î©¥ EnterÎ•º ÎàÑÎ•¥ÏÑ∏Ïöî...",
        "available_things": "üìã ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Things",
        "available_groups": "üìã ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Thing Groups",
        "available_types": "üìã ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Thing Types",
        "enter_thing_name": "Thing Ïù¥Î¶Ñ ÏûÖÎ†•: ",
        "enter_group_selection": "Î≤àÌò∏ ÎòêÎäî Thing Group Ïù¥Î¶Ñ ÏûÖÎ†•: ",
        "enter_type_selection": "Î≤àÌò∏ ÎòêÎäî Thing Type Ïù¥Î¶Ñ ÏûÖÎ†•: ",
        "no_things_found": "‚ö†Ô∏è Í≥ÑÏ†ïÏóêÏÑú ThingsÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§",
        "no_groups_found": "‚ö†Ô∏è Í≥ÑÏ†ïÏóêÏÑú Thing GroupsÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§",
        "no_types_found": "‚ö†Ô∏è Í≥ÑÏ†ïÏóêÏÑú Thing TypesÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§",
        "could_not_list_things": "‚ö†Ô∏è ThingsÎ•º ÎÇòÏó¥Ìï† Ïàò ÏóÜÏäµÎãàÎã§:",
        "could_not_list_groups": "‚ö†Ô∏è Thing GroupsÎ•º ÎÇòÏó¥Ìï† Ïàò ÏóÜÏäµÎãàÎã§:",
        "could_not_list_types": "‚ö†Ô∏è Thing TypesÎ•º ÎÇòÏó¥Ìï† Ïàò ÏóÜÏäµÎãàÎã§:",
        "invalid_selection": "‚ùå ÏûòÎ™ªÎêú ÏÑ†ÌÉùÏûÖÎãàÎã§. Îã§Ïùå Ï§ëÏóêÏÑú ÏÑ†ÌÉùÌïòÏÑ∏Ïöî",
        "endpoint_type_prompt": "ÏóîÎìúÌè¨Ïù∏Ìä∏ ÌÉÄÏûÖ ÏûÖÎ†• (iot:Data-ATS, iot:CredentialProvider, iot:Jobs) [Í∏∞Î≥∏Í∞í: iot:Data-ATS]: ",
        "pagination_learning_title": "üìö ÌïôÏäµ Ìè¨Ïù∏Ìä∏: ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò",
        "pagination_learning_content": "ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖòÏùÑ ÏÇ¨Ïö©ÌïòÎ©¥ ÎåÄÏö©Îüâ Îç∞Ïù¥ÌÑ∞ÏÖãÏùÑ ÏûëÏùÄ Îã®ÏúÑÎ°ú Í≤ÄÏÉâÌï† Ïàò ÏûàÏäµÎãàÎã§. Ïù¥Îäî ÏàòÎ∞± ÎòêÎäî ÏàòÏ≤ú Í∞úÏùò ÎîîÎ∞îÏù¥Ïä§Î•º Í¥ÄÎ¶¨Ìï† Îïå ÌÉÄÏûÑÏïÑÏõÉÍ≥º Î©îÎ™®Î¶¨ Î¨∏Ï†úÎ•º ÌîºÌïòÍ∏∞ ÏúÑÌï¥ ÌïÑÏàòÏ†ÅÏûÖÎãàÎã§.",
        "pagination_listing": "üîÑ ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖòÏúºÎ°ú Things ÎÇòÏó¥ Ï§ë (ÌéòÏù¥ÏßÄÎãπ ÏµúÎåÄ {}Í∞ú)...",
        "page_summary": "üìä ÌéòÏù¥ÏßÄ {} ÏöîÏïΩ: {} Things Í≤ÄÏÉâÎê®",
        "continue_next_page": "Îã§Ïùå ÌéòÏù¥ÏßÄÎ°ú Í≥ÑÏÜçÌïòÏãúÍ≤†ÏäµÎãàÍπå? (y/N): ",
        "pagination_complete": "üèÅ ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò ÏôÑÎ£å: {}Í∞ú ÌéòÏù¥ÏßÄÏóêÏÑú Ï¥ù {} ThingsÎ•º Ï∞æÏïòÏäµÎãàÎã§",
        "filter_by_type_learning_title": "üìö ÌïôÏäµ Ìè¨Ïù∏Ìä∏: Thing TypeÏúºÎ°ú ÌïÑÌÑ∞ÎßÅ",
        "filter_by_type_learning_content": "ÌïÑÌÑ∞ÎßÅÏùÑ ÏÇ¨Ïö©ÌïòÎ©¥ ÌäπÏ†ï Ïπ¥ÌÖåÍ≥†Î¶¨Ïùò ÎîîÎ∞îÏù¥Ïä§Î•º Ï∞æÏùÑ Ïàò ÏûàÏäµÎãàÎã§. Thing TypesÎäî ÎπÑÏä∑Ìïú ÎîîÎ∞îÏù¥Ïä§Î•º Ìï®Íªò Í∑∏Î£πÌôîÌïòÎäî ÌÖúÌîåÎ¶ø Ïó≠Ìï†ÏùÑ Ìï©ÎãàÎã§.",
        "filtering_by_type": "üîÑ Thing TypeÏúºÎ°ú Things ÌïÑÌÑ∞ÎßÅ Ï§ë: {}...",
        "filter_type_results": "üìä ÌïÑÌÑ∞ Í≤∞Í≥º: Thing Type '{}'Î°ú {} ThingsÎ•º Ï∞æÏïòÏäµÎãàÎã§",
        "filter_by_attribute_learning_title": "üìö ÌïôÏäµ Ìè¨Ïù∏Ìä∏: ÏÜçÏÑ±ÏúºÎ°ú ÌïÑÌÑ∞ÎßÅ",
        "filter_by_attribute_learning_content": "ÏÜçÏÑ± ÌïÑÌÑ∞ÎßÅÏùÄ ÌäπÏ†ï ÌäπÏÑ±ÏùÑ Í∞ÄÏßÑ ÎîîÎ∞îÏù¥Ïä§Î•º Ï∞æÎäî Îç∞ ÎèÑÏõÄÏù¥ Îê©ÎãàÎã§. Ïù¥Îäî ÏúÑÏπò, Í≥†Í∞ù ÎòêÎäî Í∏∞ÌÉÄ Î©îÌÉÄÎç∞Ïù¥ÌÑ∞Î°ú ÎîîÎ∞îÏù¥Ïä§Î•º ÎåÄÏÉÅÏúºÎ°ú ÏßÄÏ†ïÌïòÎäî Îç∞ Ïú†Ïö©Ìï©ÎãàÎã§.",
        "filtering_by_attribute": "üîÑ ÏÜçÏÑ± {}={}Î°ú Things ÌïÑÌÑ∞ÎßÅ Ï§ë...",
        "filter_attribute_results": "üìä ÌïÑÌÑ∞ Í≤∞Í≥º: {}='{}'Î°ú {} ThingsÎ•º Ï∞æÏïòÏäµÎãàÎã§",
        "debug_full_error": "üîç ÎîîÎ≤ÑÍ∑∏: Ï†ÑÏ≤¥ Ïò§Î•ò ÏùëÎãµ:",
        "debug_full_traceback": "üîç ÎîîÎ≤ÑÍ∑∏: Ï†ÑÏ≤¥ Ï∂îÏ†Å:",
        "api_error": "‚ùå API Ïò§Î•ò:",
        "error": "‚ùå Ïò§Î•ò:",
        "no_region_error": "‚ùå AWS Î¶¨Ï†ÑÏù¥ Íµ¨ÏÑ±ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§",
        "region_setup_instructions": [
            "Îã§Ïùå Î∞©Î≤ï Ï§ë ÌïòÎÇòÎ•º ÏÇ¨Ïö©ÌïòÏó¨ AWS Î¶¨Ï†ÑÏùÑ Íµ¨ÏÑ±ÌïòÏÑ∏Ïöî:",
            "1. ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï: export AWS_DEFAULT_REGION=us-east-1",
            "2. AWS CLI Íµ¨ÏÑ±: aws configure",
            "3. AWS ÏûêÍ≤© Ï¶ùÎ™Ö ÌååÏùºÏóêÏÑú Î¶¨Ï†Ñ ÏÑ§Ï†ï",
        ],
        "aws_context_error": "‚ö†Ô∏è AWS Ïª®ÌÖçÏä§Ìä∏Î•º Í≤ÄÏÉâÌï† Ïàò ÏóÜÏäµÎãàÎã§:",
        "aws_credentials_reminder": "   AWS ÏûêÍ≤© Ï¶ùÎ™ÖÏù¥ Íµ¨ÏÑ±ÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏ÌïòÏÑ∏Ïöî",
        "learning_moments": {
            "list_things": {
                "title": "Things Î™©Î°ù - ÎîîÎ∞îÏù¥Ïä§ Î∞úÍ≤¨",
                "content": "list_things APIÎäî Í≥ÑÏ†ïÏùò Î™®Îì† IoT ÎîîÎ∞îÏù¥Ïä§(Things)Î•º Í≤ÄÏÉâÌï©ÎãàÎã§. Ïù¥Îäî ÎîîÎ∞îÏù¥Ïä§ Ïù∏Î≤§ÌÜ†Î¶¨ Í¥ÄÎ¶¨, ÌîåÎ¶ø ÌÅ¨Í∏∞ Î™®ÎãàÌÑ∞ÎßÅ Î∞è ÏÜçÏÑ±ÏúºÎ°ú ÎîîÎ∞îÏù¥Ïä§ Î∞úÍ≤¨Ïóê ÌïÑÏàòÏ†ÅÏûÖÎãàÎã§. ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖòÍ≥º ÌïÑÌÑ∞ÎßÅÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ ÎîîÎ∞îÏù¥Ïä§ ÌîåÎ¶øÏùÑ Ìö®Ïú®Ï†ÅÏúºÎ°ú Ï≤òÎ¶¨Ìï† Ïàò ÏûàÏäµÎãàÎã§.",
                "next": "Îã§ÏñëÌïú ÏòµÏÖòÏúºÎ°ú list_things APIÎ•º Ìò∏Ï∂úÌïòÍ≤†ÏäµÎãàÎã§",
            },
            "list_certificates": {
                "title": "Ïù∏Ï¶ùÏÑú Î™©Î°ù - Î≥¥Ïïà Ïù∏Î≤§ÌÜ†Î¶¨",
                "content": "X.509 Ïù∏Ï¶ùÏÑúÎäî IoT ÎîîÎ∞îÏù¥Ïä§ Î≥¥ÏïàÏùò Í∏∞Ï¥àÏûÖÎãàÎã§. Í∞Å Ïù∏Ï¶ùÏÑúÎäî ÎîîÎ∞îÏù¥Ïä§Î•º Í≥†Ïú†ÌïòÍ≤å ÏãùÎ≥ÑÌïòÍ≥† AWS IoT CoreÏôÄÏùò Î≥¥Ïïà ÌÜµÏã†ÏùÑ Í∞ÄÎä•ÌïòÍ≤å Ìï©ÎãàÎã§. Ïù¥ APIÎäî Î≥¥Ïïà ÏÉÅÌÉúÎ•º Í∞êÏÇ¨ÌïòÍ≥†, Ïù∏Ï¶ùÏÑú ÏàòÎ™Ö Ï£ºÍ∏∞Î•º Ï∂îÏ†ÅÌïòÎ©∞, Ïù∏Ï¶ùÏÑú ÍµêÏ≤¥Í∞Ä ÌïÑÏöîÌïú ÎîîÎ∞îÏù¥Ïä§Î•º ÏãùÎ≥ÑÌïòÎäî Îç∞ ÎèÑÏõÄÏù¥ Îê©ÎãàÎã§.",
                "next": "Î™®Îì† Ïù∏Ï¶ùÏÑúÎ•º Í≤ÄÏÉâÌïòÍ≥† Î≥¥Ïïà ÏÜçÏÑ±ÏùÑ Í≤ÄÌÜ†ÌïòÍ≤†ÏäµÎãàÎã§",
            },
            "list_thing_groups": {
                "title": "Thing Groups Î™©Î°ù - ÎîîÎ∞îÏù¥Ïä§ Ï°∞ÏßÅ",
                "content": "Thing GroupsÎäî ÌååÏùºÏùò Ìè¥ÎçîÏôÄ Ïú†ÏÇ¨ÌïòÍ≤å IoT ÎîîÎ∞îÏù¥Ïä§Ïóê ÎåÄÌïú Í≥ÑÏ∏µÏ†Å Ï°∞ÏßÅÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§. ÏúÑÏπò, Í∏∞Îä• ÎòêÎäî ÎπÑÏ¶àÎãàÏä§ Í∏∞Ï§ÄÏóê Îî∞Î•∏ ÎåÄÎüâ ÏûëÏóÖ, Ï†ïÏ±Ö ÏÉÅÏÜç Î∞è ÎÖºÎ¶¨Ï†Å Í∑∏Î£πÌôîÎ•º Í∞ÄÎä•ÌïòÍ≤å Ìï©ÎãàÎã§. Ïù¥Îäî ÎåÄÍ∑úÎ™® IoT Î∞∞Ìè¨Î•º Í¥ÄÎ¶¨ÌïòÎäî Îç∞ Ï§ëÏöîÌï©ÎãàÎã§.",
                "next": "Thing GroupsÏôÄ Í∑∏ Ï°∞ÏßÅ Íµ¨Ï°∞Î•º ÌÉêÏÉâÌïòÍ≤†ÏäµÎãàÎã§",
            },
            "list_thing_types": {
                "title": "Thing Types Î™©Î°ù - ÎîîÎ∞îÏù¥Ïä§ ÌÖúÌîåÎ¶ø",
                "content": "Thing TypesÎäî IoT ÎîîÎ∞îÏù¥Ïä§ Ïπ¥ÌÖåÍ≥†Î¶¨Î•º Ï†ïÏùòÌïòÎäî ÌÖúÌîåÎ¶øÏûÖÎãàÎã§. ÎπÑÏä∑Ìïú ÎîîÎ∞îÏù¥Ïä§Ïóê ÎåÄÌïú Í≥µÌÜµ ÏÜçÏÑ±Í≥º ÎèôÏûëÏùÑ ÏßÄÏ†ïÌïòÎäî Ï≤≠ÏÇ¨ÏßÑ Ïó≠Ìï†ÏùÑ Ìï©ÎãàÎã§. ÏòàÎ•º Îì§Ïñ¥, 'SedanVehicle' ÌÉÄÏûÖÏùÄ ÏóîÏßÑ ÌÉÄÏûÖÍ≥º Ï¢åÏÑù ÏàòÏôÄ Í∞ôÏùÄ ÏÜçÏÑ±ÏùÑ Ï†ïÏùòÌï† Ïàò ÏûàÏäµÎãàÎã§. Thing TypesÎäî ÎîîÎ∞îÏù¥Ïä§ ÌîåÎ¶øÏùÑ Ï°∞ÏßÅÌïòÍ≥† ÌëúÏ§ÄÌôîÎêú ÎîîÎ∞îÏù¥Ïä§ Í¥ÄÎ¶¨Î•º Í∞ÄÎä•ÌïòÍ≤å Ìï©ÎãàÎã§.",
                "next": "Thing TypesÏôÄ Í∑∏ ÏÜçÏÑ± Ïä§ÌÇ§ÎßàÎ•º Í≤ÄÌÜ†ÌïòÍ≤†ÏäµÎãàÎã§",
            },
            "describe_thing": {
                "title": "Thing ÏÑ§Î™Ö - ÎîîÎ∞îÏù¥Ïä§ ÏÑ∏Î∂Ä Ï†ïÎ≥¥",
                "content": "describe_thing APIÎäî ÏÜçÏÑ±, Thing Type, Î≤ÑÏ†Ñ Î∞è Í≥†Ïú† ÏãùÎ≥ÑÏûêÎ•º Ìè¨Ìï®ÌïòÏó¨ ÌäπÏ†ï IoT ÎîîÎ∞îÏù¥Ïä§Ïóê ÎåÄÌïú ÏôÑÏ†ÑÌïú Ï†ïÎ≥¥Î•º Ï†úÍ≥µÌï©ÎãàÎã§. Ïù¥Îäî ÎîîÎ∞îÏù¥Ïä§ Î¨∏Ï†ú Ìï¥Í≤∞, Íµ¨ÏÑ± Í¥ÄÎ¶¨ Î∞è IoT ÏïÑÌÇ§ÌÖçÏ≤ò ÎÇ¥ÏóêÏÑú ÎîîÎ∞îÏù¥Ïä§ Í¥ÄÍ≥ÑÎ•º Ïù¥Ìï¥ÌïòÎäî Îç∞ ÌïÑÏàòÏ†ÅÏûÖÎãàÎã§.",
                "next": "ÌäπÏ†ï ThingÏóê ÎåÄÌïú ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º Í≤ÄÌÜ†ÌïòÍ≤†ÏäµÎãàÎã§",
            },
            "describe_thing_group": {
                "title": "Thing Group ÏÑ§Î™Ö - Í∑∏Î£π Í¥ÄÎ¶¨",
                "content": "Thing Group ÏÑ∏Î∂Ä Ï†ïÎ≥¥Îäî IoT ÌîåÎ¶øÏùò Ï°∞ÏßÅ Íµ¨Ï°∞Î•º Î≥¥Ïó¨Ï§çÎãàÎã§. Í∑∏Î£π ÏÜçÏÑ±, Î∂ÄÎ™®-ÏûêÏãù Í≥ÑÏ∏µ, Ï≤®Î∂ÄÎêú Ï†ïÏ±Ö Î∞è Î©§Î≤Ñ ÎîîÎ∞îÏù¥Ïä§Î•º Î≥º Ïàò ÏûàÏäµÎãàÎã§. Ïù¥ Ï†ïÎ≥¥Îäî Ïï°ÏÑ∏Ïä§ Ï†úÏñ¥, Ï†ïÏ±Ö ÏÉÅÏÜç Î∞è ÎîîÎ∞îÏù¥Ïä§ Ï°∞ÏßÅ Ï†ÑÎûµÏùÑ Ïù¥Ìï¥ÌïòÎäî Îç∞ Ï§ëÏöîÌï©ÎãàÎã§.",
                "next": "ÌäπÏ†ï Thing GroupÏùò ÏÉÅÏÑ∏Ìïú ÏÜçÏÑ±ÏùÑ Í≤ÄÌÜ†ÌïòÍ≤†ÏäµÎãàÎã§",
            },
            "describe_thing_type": {
                "title": "Thing Type ÏÑ§Î™Ö - ÌÖúÌîåÎ¶ø Î∂ÑÏÑù",
                "content": "Thing Type ÏÑ∏Î∂Ä Ï†ïÎ≥¥Îäî ÎîîÎ∞îÏù¥Ïä§ Ïπ¥ÌÖåÍ≥†Î¶¨Ïóê ÎåÄÌïú Ï≤≠ÏÇ¨ÏßÑ Ï†ïÏùòÎ•º Î≥¥Ïó¨Ï§çÎãàÎã§. Í≤ÄÏÉâ Í∞ÄÎä•Ìïú ÏÜçÏÑ±, ÏÜçÏÑ± Ï†úÏïΩ Ï°∞Í±¥ Î∞è Ïù¥ ÌÉÄÏûÖÏùò ÎîîÎ∞îÏù¥Ïä§Í∞Ä Ïñ¥ÎñªÍ≤å Íµ¨Ï°∞ÌôîÎêòÏñ¥Ïïº ÌïòÎäîÏßÄÎ•º Ï†ïÏùòÌïòÎäî Î©îÌÉÄÎç∞Ïù¥ÌÑ∞Î•º Í≤ÄÌÜ†Ìï† Ïàò ÏûàÏäµÎãàÎã§. Ïù¥Îäî ÏùºÍ¥ÄÎêú ÎîîÎ∞îÏù¥Ïä§ Îì±Î°ùÏùÑ Î≥¥Ïû•ÌïòÍ≥† Ìö®Ïú®Ï†ÅÏù∏ ÌîåÎ¶ø ÏøºÎ¶¨Î•º Í∞ÄÎä•ÌïòÍ≤å ÌïòÎäî Îç∞ ÎèÑÏõÄÏù¥ Îê©ÎãàÎã§.",
                "next": "ÌäπÏ†ï Thing TypeÏùò Ïä§ÌÇ§ÎßàÏôÄ ÏÜçÏÑ±ÏùÑ Î∂ÑÏÑùÌïòÍ≤†ÏäµÎãàÎã§",
            },
            "describe_endpoint": {
                "title": "ÏóîÎìúÌè¨Ïù∏Ìä∏ ÏÑ§Î™Ö - Ïó∞Í≤∞ Î∞úÍ≤¨",
                "content": "IoT ÏóîÎìúÌè¨Ïù∏Ìä∏Îäî ÎîîÎ∞îÏù¥Ïä§Í∞Ä AWS IoT CoreÏóê Ïó∞Í≤∞ÌïòÎäî Îç∞ ÏÇ¨Ïö©ÌïòÎäî Í≤åÏù¥Ìä∏Ïõ®Ïù¥ URLÏûÖÎãàÎã§. Îã§Î•∏ ÏóîÎìúÌè¨Ïù∏Ìä∏ ÌÉÄÏûÖÏùÄ Îã§Î•∏ Î™©Ï†ÅÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§: ÎîîÎ∞îÏù¥Ïä§ ÌÜµÏã†Ïö© Data-ATS, Ïù∏Ï¶ùÏö© CredentialProvider, ÎîîÎ∞îÏù¥Ïä§ Í¥ÄÎ¶¨Ïö© Jobs. ÏóîÎìúÌè¨Ïù∏Ìä∏Î•º Ïù¥Ìï¥ÌïòÎäî Í≤ÉÏùÄ ÎîîÎ∞îÏù¥Ïä§ Ïó∞Í≤∞ Íµ¨ÏÑ±Ïóê Ï§ëÏöîÌï©ÎãàÎã§.",
                "next": "ÎîîÎ∞îÏù¥Ïä§ Ïó∞Í≤∞ÏùÑ ÏúÑÌïú ÏóîÎìúÌè¨Ïù∏Ìä∏ URLÏùÑ Î∞úÍ≤¨ÌïòÍ≤†ÏäµÎãàÎã§",
            },
        },
        "api_desc_list_things_paginated": "ÌéòÏù¥ÏßÄ {} - ÏµúÎåÄ {} Things Í≤ÄÏÉâ",
        "api_desc_list_things_by_type": "Thing Type '{}'Î°ú ÌïÑÌÑ∞ÎßÅÎêú Things Í≤ÄÏÉâ",
        "api_desc_list_things_by_attribute": "ÏÜçÏÑ± '{}={}'Î°ú ÌïÑÌÑ∞ÎßÅÎêú Things Í≤ÄÏÉâ",
        "api_desc_list_things": "AWS Í≥ÑÏ†ïÏùò Î™®Îì† IoT ThingsÏùò ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖòÎêú Î™©Î°ù Í≤ÄÏÉâ",
        "api_desc_list_certificates": "AWS IoT Í≥ÑÏ†ïÏóê Îì±Î°ùÎêú X.509 Ïù∏Ï¶ùÏÑú Î™©Î°ù Í≤ÄÏÉâ",
        "api_desc_list_thing_groups": "IoT ÎîîÎ∞îÏù¥Ïä§Î•º Ï°∞ÏßÅÌïòÍ≥† Í¥ÄÎ¶¨ÌïòÎäî Îç∞ ÏÇ¨Ïö©ÎêòÎäî Thing Groups Î™©Î°ù Í≤ÄÏÉâ",
        "api_desc_list_thing_types": "ÎîîÎ∞îÏù¥Ïä§ ÌÖúÌîåÎ¶øÍ≥º ÏÜçÏÑ±ÏùÑ Ï†ïÏùòÌïòÎäî Thing Types Î™©Î°ù Í≤ÄÏÉâ",
        "api_desc_describe_thing": "ÌäπÏ†ï IoT ThingÏóê ÎåÄÌïú ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Í≤ÄÏÉâ",
        "api_desc_describe_thing_group": "ÌäπÏ†ï Thing GroupÏóê ÎåÄÌïú ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Í≤ÄÏÉâ",
        "api_desc_describe_thing_type": "ÌäπÏ†ï Thing TypeÏóê ÎåÄÌïú ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Í≤ÄÏÉâ",
        "api_desc_describe_endpoint": "AWS Í≥ÑÏ†ïÍ≥º Î¶¨Ï†ÑÏóê ÎåÄÌïú IoT ÏóîÎìúÌè¨Ïù∏Ìä∏ URL Í≤ÄÏÉâ",
        "api_explain_list_things": "Ïù¥Î¶Ñ, ÌÉÄÏûÖ, ÏÜçÏÑ± Î∞è ÏÉùÏÑ± ÎÇ†ÏßúÍ∞Ä Ìè¨Ìï®Îêú ÎîîÎ∞îÏù¥Ïä§ Ïù∏Î≤§ÌÜ†Î¶¨ ÌëúÏãú",
        "api_explain_list_certificates": "ID, ARN, ÏÉÅÌÉú Î∞è ÎßåÎ£å ÎÇ†ÏßúÍ∞Ä Ìè¨Ìï®Îêú Î≥¥Ïïà Ïù∏Ï¶ùÏÑú ÌëúÏãú",
        "api_explain_list_thing_groups": "Í∑∏Î£π Í≥ÑÏ∏µÍ≥º ÏÜçÏÑ±Ïù¥ Ìè¨Ìï®Îêú ÎîîÎ∞îÏù¥Ïä§ Ï°∞ÏßÅ Íµ¨Ï°∞ ÌëúÏãú",
        "api_explain_list_thing_types": "Í≤ÄÏÉâ Í∞ÄÎä•Ìïú ÏÜçÏÑ±Í≥º ÏÜçÏÑ± Ï†ïÏùòÍ∞Ä Ìè¨Ìï®Îêú ÎîîÎ∞îÏù¥Ïä§ ÌÖúÌîåÎ¶ø ÌëúÏãú",
        "api_explain_describe_thing": "ÏÜçÏÑ±, ÌÉÄÏûÖ Î∞è Î≤ÑÏ†Ñ Ï†ïÎ≥¥Î•º Ìè¨Ìï®Ìïú ÏôÑÏ†ÑÌïú ÎîîÎ∞îÏù¥Ïä§ ÌîÑÎ°úÌïÑ ÌëúÏãú",
        "api_explain_describe_thing_group": "Í∑∏Î£π Íµ¨ÏÑ±, Î∂ÄÎ™®/ÏûêÏãù Í¥ÄÍ≥Ñ Î∞è Ï†ÅÏö©Îêú Ï†ïÏ±Ö ÌëúÏãú",
        "api_explain_describe_thing_type": "ÌÖúÌîåÎ¶ø Ïä§ÌÇ§Îßà, Í≤ÄÏÉâ Í∞ÄÎä•Ìïú ÏÜçÏÑ± Î∞è ÏÜçÏÑ± Ï†úÏïΩ Ï°∞Í±¥ ÌëúÏãú",
        "api_explain_describe_endpoint": "ÎîîÎ∞îÏù¥Ïä§ ÌÜµÏã† Î∞è Îç∞Ïù¥ÌÑ∞ ÏûëÏóÖÏóê ÏÇ¨Ïö©ÎêòÎäî HTTPS ÏóîÎìúÌè¨Ïù∏Ìä∏ URL Î∞òÌôò",
        "api_call_label": "API Ìò∏Ï∂ú",
        "http_request_label": "HTTP ÏöîÏ≤≠",
        "description_label": "ÏÑ§Î™Ö",
        "input_parameters_label": "ÏûÖÎ†• Îß§Í∞úÎ≥ÄÏàò",
        "no_input_parameters": "ÏóÜÏùå (Ïù¥ APIÎäî ÏûÖÎ†• Îß§Í∞úÎ≥ÄÏàòÍ∞Ä ÌïÑÏöîÌïòÏßÄ ÏïäÏäµÎãàÎã§)",
        "response_explanation_label": "ÏùëÎãµ ÏÑ§Î™Ö",
        "response_payload_label": "ÏùëÎãµ ÌéòÏù¥Î°úÎìú",
        "thing_details": "üìä Thing ÏÑ∏Î∂Ä Ï†ïÎ≥¥:",
        "thing_group_details": "üìä Thing Group ÏÑ∏Î∂Ä Ï†ïÎ≥¥:",
        "thing_type_details": "üìä Thing Type ÏÑ∏Î∂Ä Ï†ïÎ≥¥:",
        "name_label": "Ïù¥Î¶Ñ",
        "type_label": "ÌÉÄÏûÖ",
        "description_simple": "ÏÑ§Î™Ö",
    },
}


def get_language():
    """Get user's preferred language"""
    # Check environment variable first
    env_lang = os.getenv("AWS_IOT_LANG", "").lower()
    if env_lang in ["es", "spanish", "espa√±ol"]:
        return "es"
    elif env_lang in ["en", "english"]:
        return "en"
    elif env_lang in ["ja", "japanese", "Êó•Êú¨Ë™û", "jp"]:
        return "ja"
    elif env_lang in ["zh-cn", "chinese", "‰∏≠Êñá", "zh"]:
        return "zh-CN"
    elif env_lang in ["pt-br", "portuguese", "portugu√™s", "pt"]:
        return "pt-BR"
    elif env_lang in ["ko", "korean", "ÌïúÍµ≠Ïñ¥", "kr"]:
        return "ko"

    # If no environment variable, ask user
    print("üåç Language Selection / Selecci√≥n de Idioma / Ë®ÄË™ûÈÅ∏Êäû / ËØ≠Ë®ÄÈÄâÊã© / Sele√ß√£o de Idioma / Ïñ∏Ïñ¥ ÏÑ†ÌÉù")
    print("=" * 80)
    print("1. English")
    print("2. Espa√±ol (Spanish)")
    print("3. Êó•Êú¨Ë™û (Japanese)")
    print("4. ‰∏≠Êñá (Chinese)")
    print("5. Portugu√™s (Portuguese)")
    print("6. ÌïúÍµ≠Ïñ¥ (Korean)")

    while True:
        try:
            choice = input(
                "\nSelect language / Seleccionar idioma / Ë®ÄË™û„ÇíÈÅ∏Êäû / ÈÄâÊã©ËØ≠Ë®Ä / Selecionar idioma / Ïñ∏Ïñ¥ ÏÑ†ÌÉù (1-6): "
            ).strip()
            if choice == "1":
                return "en"
            elif choice == "2":
                return "es"
            elif choice == "3":
                return "ja"
            elif choice == "4":
                return "zh-CN"
            elif choice == "5":
                return "pt-BR"
            elif choice == "6":
                return "ko"
            else:
                print(
                    "‚ùå Invalid selection / Selecci√≥n inv√°lida / ÁÑ°Âäπ„Å™ÈÅ∏Êäû„Åß„Åô / Êó†ÊïàÈÄâÊã© / Sele√ß√£o inv√°lida / ÏûòÎ™ªÎêú ÏÑ†ÌÉùÏûÖÎãàÎã§. Please select 1-6 / Por favor selecciona 1-6 / 1-6„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ / ËØ∑ÈÄâÊã© 1-6 / Por favor selecione 1-6 / 1-6ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî."
                )
        except KeyboardInterrupt:
            print("\n\nüëã Goodbye! / ¬°Adi√≥s! / „Åï„Çà„ÅÜ„Å™„ÇâÔºÅ / ÂÜçËßÅÔºÅ / Tchau! / ÏïàÎÖïÌûà Í∞ÄÏÑ∏Ïöî!")
            sys.exit(0)


def get_message(key, lang="en"):
    """Get localized message"""
    return MESSAGES.get(lang, MESSAGES["en"]).get(key, key)


def get_learning_moment(moment_key, lang="en"):
    """Get localized learning moment"""
    return MESSAGES.get(lang, MESSAGES["en"]).get("learning_moments", {}).get(moment_key, {})


def print_learning_moment(moment_key, lang="en"):
    """Print a formatted learning moment"""
    moment = get_learning_moment(moment_key, lang)
    if not moment:
        return

    print(f"\nüìö LEARNING MOMENT: {moment.get('title', '')}")
    print(moment.get("content", ""))
    print(f"\nüîÑ NEXT: {moment.get('next', '')}")


# Global language variable
USER_LANG = "en"


def check_credentials():
    """Validate AWS credentials are available"""
    required_vars = ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY"]
    missing = [var for var in required_vars if not os.getenv(var)]

    if missing:
        print("‚ùå Missing required environment variables:")
        for var in missing:
            print(f"   - {var}")
        print("\nPlease export your AWS credentials:")
        print("export AWS_ACCESS_KEY_ID=<your-access-key>")
        print("export AWS_SECRET_ACCESS_KEY=<your-secret-key>")
        print("export AWS_SESSION_TOKEN=<your-session-token>  # Optional for temporary credentials")
        sys.exit(1)


def get_http_info(operation, params=None):
    """Get HTTP method and path for the operation"""
    http_info = {
        "list_things": ("GET", "/things"),
        "list_certificates": ("GET", "/certificates"),
        "list_thing_groups": ("GET", "/thing-groups"),
        "list_thing_types": ("GET", "/thing-types"),
        "describe_thing": ("GET", f"/things/{params.get('thingName', '<thingName>') if params else '<thingName>'}"),
        "describe_thing_group": (
            "GET",
            f"/thing-groups/{params.get('thingGroupName', '<thingGroupName>') if params else '<thingGroupName>'}",
        ),
        "describe_thing_type": (
            "GET",
            f"/thing-types/{params.get('thingTypeName', '<thingTypeName>') if params else '<thingTypeName>'}",
        ),
        "describe_endpoint": ("GET", "/endpoint"),
    }
    return http_info.get(operation, ("GET", "/unknown"))


def print_api_call(operation, params=None, description=""):
    """Display the API call being made with explanation"""
    method, path = get_http_info(operation, params)
    print(f"\nüîÑ {get_message('api_call_label', USER_LANG)}: {operation}")
    print(f"üåê {get_message('http_request_label', USER_LANG)}: {method} https://iot.<region>.amazonaws.com{path}")
    if description:
        print(f"‚ÑπÔ∏è  {get_message('description_label', USER_LANG)}: {description}")
    if params:
        print(f"üì• {get_message('input_parameters_label', USER_LANG)}: {json.dumps(params, indent=2)}")
    else:
        print(f"üì• {get_message('input_parameters_label', USER_LANG)}: {get_message('no_input_parameters', USER_LANG)}")


def print_response(response, explanation=""):
    """Display the API response with explanation"""
    if explanation:
        print(f"üí° {get_message('response_explanation_label', USER_LANG)}: {explanation}")
    print(f"üì§ {get_message('response_payload_label', USER_LANG)}: {json.dumps(response, indent=2, default=str)}")


def list_things_paginated(iot, max_results, debug=False):
    """List Things with pagination"""
    print(f"\n{get_message('pagination_learning_title', USER_LANG)}")
    print(get_message("pagination_learning_content", USER_LANG))
    print(f"\n{get_message('pagination_listing', USER_LANG).format(max_results)}")

    next_token = None
    page = 1
    total_things = 0

    while True:
        params = {"maxResults": max_results}
        if next_token:
            params["nextToken"] = next_token

        safe_api_call(
            iot.list_things,
            "list_things",
            description=get_message("api_desc_list_things_paginated", USER_LANG).format(page, max_results),
            explanation=get_message("api_explain_list_things", USER_LANG),
            debug=debug,
            **params,
        )

        response = iot.list_things(**params)
        things = response.get("things", [])
        total_things += len(things)

        print(f"\n{get_message('page_summary', USER_LANG).format(page, len(things))}")

        next_token = response.get("nextToken")
        if not next_token or not things:
            break

        page += 1
        continue_paging = input(f"\n{get_message('continue_next_page', USER_LANG)}").strip().lower()
        if continue_paging not in ["y", "s"]:  # Accept both 'y' (yes) and 's' (s√≠) for Spanish
            break

    print(f"\n{get_message('pagination_complete', USER_LANG).format(total_things, page)}")


def list_things_by_type(iot, thing_type, debug=False):
    """List Things filtered by Thing Type"""
    print(f"\n{get_message('filter_by_type_learning_title', USER_LANG)}")
    print(get_message("filter_by_type_learning_content", USER_LANG))
    print(f"\n{get_message('filtering_by_type', USER_LANG).format(thing_type)}")

    safe_api_call(
        iot.list_things,
        "list_things",
        description=get_message("api_desc_list_things_by_type", USER_LANG).format(thing_type),
        explanation=get_message("api_explain_list_things", USER_LANG),
        debug=debug,
        thingTypeName=thing_type,
    )

    response = iot.list_things(thingTypeName=thing_type)
    things = response.get("things", [])
    print(f"\n{get_message('filter_type_results', USER_LANG).format(len(things), thing_type)}")


def list_things_by_attribute(iot, attr_name, attr_value, debug=False):
    """List Things filtered by attribute"""
    print(f"\n{get_message('filter_by_attribute_learning_title', USER_LANG)}")
    print(get_message("filter_by_attribute_learning_content", USER_LANG))
    print(f"\n{get_message('filtering_by_attribute', USER_LANG).format(attr_name, attr_value)}")

    safe_api_call(
        iot.list_things,
        "list_things",
        description=get_message("api_desc_list_things_by_attribute", USER_LANG).format(attr_name, attr_value),
        explanation=get_message("api_explain_list_things", USER_LANG),
        debug=debug,
        attributeName=attr_name,
        attributeValue=attr_value,
    )

    response = iot.list_things(attributeName=attr_name, attributeValue=attr_value)
    things = response.get("things", [])
    print(f"\n{get_message('filter_attribute_results', USER_LANG).format(len(things), attr_name, attr_value)}")


def safe_api_call(func, operation, description="", explanation="", debug=True, **kwargs):
    """Execute API call with error handling and explanations"""
    try:
        if debug:
            print_api_call(operation, kwargs if kwargs else None, description)
        else:
            print(f"{get_message('executing', USER_LANG)} {operation}")

        response = func(**kwargs)

        if debug:
            print_response(response, explanation)
        else:
            print(f"‚úÖ {operation} {get_message('completed', USER_LANG)}")
            # Show condensed response for non-debug mode
            if response:
                if isinstance(response, dict):
                    # Show key metrics instead of full response
                    if "things" in response:
                        print(get_message("found_things", USER_LANG).format(len(response["things"])))
                        if response["things"]:
                            print(get_message("thing_names", USER_LANG))
                            for thing in response["things"]:
                                thing_type = (
                                    f" ({thing.get('thingTypeName', 'No Type')})" if thing.get("thingTypeName") else ""
                                )
                                print(f"   ‚Ä¢ {thing['thingName']}{thing_type}")
                    elif "certificates" in response:
                        print(get_message("found_certificates", USER_LANG).format(len(response["certificates"])))
                        if response["certificates"]:
                            print(get_message("certificate_ids", USER_LANG))
                            for cert in response["certificates"]:
                                status = cert.get("status", "Unknown")
                                print(f"   ‚Ä¢ {cert['certificateId'][:16]}... ({status})")
                    elif "thingGroups" in response:
                        print(get_message("found_thing_groups", USER_LANG).format(len(response["thingGroups"])))
                        if response["thingGroups"]:
                            print(get_message("group_names", USER_LANG))
                            for group in response["thingGroups"]:
                                print(f"   ‚Ä¢ {group['groupName']}")
                    elif "thingTypes" in response:
                        print(get_message("found_thing_types", USER_LANG).format(len(response["thingTypes"])))
                        if response["thingTypes"]:
                            print(get_message("type_names", USER_LANG))
                            for thing_type in response["thingTypes"]:
                                print(f"   ‚Ä¢ {thing_type['thingTypeName']}")
                    elif "thingName" in response:
                        # Handle describe_thing response
                        print(get_message("thing_details", USER_LANG))
                        print(f"   {get_message('name_label', USER_LANG)}: {response['thingName']}")
                        if response.get("thingTypeName"):
                            print(f"   {get_message('type_label', USER_LANG)}: {response['thingTypeName']}")
                        if response.get("attributes"):
                            print(f"   Attributes: {len(response['attributes'])} defined")
                            for key, value in list(response["attributes"].items())[:3]:  # Show first 3 attributes
                                print(f"     ‚Ä¢ {key}: {value}")
                            if len(response["attributes"]) > 3:
                                print(f"     ... and {len(response['attributes']) - 3} more")
                        print(f"   Version: {response.get('version', 'Unknown')}")
                    elif "thingGroupName" in response:
                        # Handle describe_thing_group response
                        print(get_message("thing_group_details", USER_LANG))
                        print(f"   {get_message('name_label', USER_LANG)}: {response['thingGroupName']}")
                        if response.get("thingGroupProperties", {}).get("thingGroupDescription"):
                            print(
                                f"   {get_message('description_simple', USER_LANG)}: {response['thingGroupProperties']['thingGroupDescription']}"
                            )
                        if response.get("thingGroupProperties", {}).get("attributePayload", {}).get("attributes"):
                            attrs = response["thingGroupProperties"]["attributePayload"]["attributes"]
                            print(f"   Attributes: {len(attrs)} defined")
                    elif "thingTypeName" in response:
                        # Handle describe_thing_type response
                        print(get_message("thing_type_details", USER_LANG))
                        print(f"   {get_message('name_label', USER_LANG)}: {response['thingTypeName']}")
                        if response.get("thingTypeProperties", {}).get("description"):
                            print(
                                f"   {get_message('description_simple', USER_LANG)}: {response['thingTypeProperties']['description']}"
                            )
                        if response.get("thingTypeProperties", {}).get("searchableAttributes"):
                            attrs = response["thingTypeProperties"]["searchableAttributes"]
                            print(f"   Searchable Attributes: {', '.join(attrs)}")
                    elif "endpointAddress" in response:
                        # Handle describe_endpoint response
                        print("üìä IoT Endpoint:")
                        print(f"   URL: {response['endpointAddress']}")
                    else:
                        print("üìä Response received")

        return response
    except ClientError as e:
        print(f"{get_message('api_error', USER_LANG)} {e.response['Error']['Code']} - {e.response['Error']['Message']}")
        if debug:
            print(get_message("debug_full_error", USER_LANG))
            print(json.dumps(e.response, indent=2, default=str))
    except Exception as e:
        print(f"{get_message('error', USER_LANG)} {str(e)}")
        if debug:
            import traceback

            print(get_message("debug_full_traceback", USER_LANG))
            traceback.print_exc()


def main():
    try:
        # Get user's preferred language
        global USER_LANG
        USER_LANG = get_language()

        # Check for debug flag
        debug_mode = "--debug" in sys.argv or "-d" in sys.argv

        print(get_message("title", USER_LANG))
        print(get_message("separator", USER_LANG))

        # Display AWS context first
        try:
            sts = boto3.client("sts")
            iot = boto3.client("iot")
            identity = sts.get_caller_identity()

            print(get_message("aws_config", USER_LANG))
            print(f"   {get_message('account_id', USER_LANG)}: {identity['Account']}")
            print(f"   {get_message('region', USER_LANG)}: {iot.meta.region_name}")
            print()

        except Exception as e:
            print(f"{get_message('aws_context_error', USER_LANG)} {str(e)}")
            print(get_message("aws_credentials_reminder", USER_LANG))
            print()

        print(get_message("description", USER_LANG))

        if debug_mode:
            print(f"\n{get_message('debug_enabled', USER_LANG)}")
            for feature in get_message("debug_features", USER_LANG):
                print(feature)
        else:
            print(f"\n{get_message('tip', USER_LANG)}")
            for feature in get_message("tip_features", USER_LANG):
                print(feature)

        print(get_message("separator", USER_LANG))

        check_credentials()

        try:
            iot = boto3.client("iot")
            print(get_message("client_initialized", USER_LANG))

            if debug_mode:
                print("üîç DEBUG: Client configuration:")
                print(f"   Region: {iot.meta.region_name}")
                print(f"   Service: {iot.meta.service_model.service_name}")
                print(f"   API Version: {iot.meta.service_model.api_version}")
        except NoCredentialsError:
            print(get_message("invalid_credentials", USER_LANG))
            sys.exit(1)
        except NoRegionError:
            print(get_message("no_region_error", USER_LANG))
            for instruction in get_message("region_setup_instructions", USER_LANG):
                print(f"   {instruction}")
            sys.exit(1)

        print(f"\nüìö LEARNING MOMENT: {get_message('learning_intro_title', USER_LANG)}")
        print(get_message("learning_intro_content", USER_LANG))
        print(f"\nüîÑ NEXT: {get_message('learning_intro_next', USER_LANG)}")
        try:
            input(get_message("press_enter", USER_LANG))
        except KeyboardInterrupt:
            print(f"\n\n{get_message('goodbye', USER_LANG)}")
            return

        while True:
            try:
                print(f"\n{get_message('operations_menu', USER_LANG)}")
                for operation in get_message("operations", USER_LANG):
                    print(operation)

                choice = input(f"\n{get_message('select_operation', USER_LANG)} ").strip()
            except KeyboardInterrupt:
                print(f"\n\n{get_message('goodbye', USER_LANG)}")
                break

            if choice == "1":
                print_learning_moment("list_things", USER_LANG)
                input(get_message("press_enter", USER_LANG))

                # Ask for listing options
                print(f"\n{get_message('list_things_options', USER_LANG)}")
                for menu_item in get_message("list_things_menu", USER_LANG):
                    print(menu_item)

                option = input(get_message("select_option", USER_LANG)).strip()

                if option == "2":
                    max_results = input(get_message("max_results_prompt", USER_LANG)).strip()
                    max_results = int(max_results) if max_results.isdigit() else 5
                    list_things_paginated(iot, max_results, debug_mode)
                elif option == "3":
                    thing_type = input(get_message("thing_type_prompt", USER_LANG)).strip()
                    if thing_type:
                        list_things_by_type(iot, thing_type, debug_mode)
                    else:
                        print(get_message("no_thing_type", USER_LANG))
                elif option == "4":
                    attr_name = input(get_message("attribute_name_prompt", USER_LANG)).strip()
                    attr_value = input(get_message("attribute_value_prompt", USER_LANG)).strip()
                    if attr_name and attr_value:
                        list_things_by_attribute(iot, attr_name, attr_value, debug_mode)
                    else:
                        print(get_message("attribute_required", USER_LANG))
                else:
                    safe_api_call(
                        iot.list_things,
                        "list_things",
                        description=get_message("api_desc_list_things", USER_LANG),
                        explanation=get_message("api_explain_list_things", USER_LANG),
                        debug=debug_mode,
                    )

                input(f"\n{get_message('return_to_menu', USER_LANG)}")

            elif choice == "2":
                print_learning_moment("list_certificates", USER_LANG)
                input(get_message("press_enter", USER_LANG))

                safe_api_call(
                    iot.list_certificates,
                    "list_certificates",
                    description=get_message("api_desc_list_certificates", USER_LANG),
                    explanation=get_message("api_explain_list_certificates", USER_LANG),
                    debug=debug_mode,
                )
                input(f"\n{get_message('return_to_menu', USER_LANG)}")

            elif choice == "3":
                print_learning_moment("list_thing_groups", USER_LANG)
                input(get_message("press_enter", USER_LANG))

                safe_api_call(
                    iot.list_thing_groups,
                    "list_thing_groups",
                    description=get_message("api_desc_list_thing_groups", USER_LANG),
                    explanation=get_message("api_explain_list_thing_groups", USER_LANG),
                    debug=debug_mode,
                )
                input(f"\n{get_message('return_to_menu', USER_LANG)}")

            elif choice == "4":
                print_learning_moment("list_thing_types", USER_LANG)
                input(get_message("press_enter", USER_LANG))

                safe_api_call(
                    iot.list_thing_types,
                    "list_thing_types",
                    description=get_message("api_desc_list_thing_types", USER_LANG),
                    explanation=get_message("api_explain_list_thing_types", USER_LANG),
                    debug=debug_mode,
                )
                input(f"\n{get_message('return_to_menu', USER_LANG)}")

            elif choice == "5":
                print_learning_moment("describe_thing", USER_LANG)
                input(get_message("press_enter", USER_LANG))

                # Show available Things
                try:
                    things_response = iot.list_things()
                    if things_response.get("things"):
                        print(f"\n{get_message('available_things', USER_LANG)} ({len(things_response['things'])}):")
                        for i, thing in enumerate(things_response["things"][:10], 1):
                            thing_type = f" ({thing.get('thingTypeName', 'No Type')})" if thing.get("thingTypeName") else ""
                            print(f"   {i}. {thing['thingName']}{thing_type}")
                        if len(things_response["things"]) > 10:
                            print(f"   ... and {len(things_response['things']) - 10} more")
                    else:
                        print(f"\n{get_message('no_things_found', USER_LANG)}")
                except Exception as e:
                    print(f"\n{get_message('could_not_list_things', USER_LANG)} {str(e)}")

                thing_name = input(f"\n{get_message('enter_thing_name', USER_LANG)}").strip()
                if thing_name:
                    safe_api_call(
                        iot.describe_thing,
                        "describe_thing",
                        description=get_message("api_desc_describe_thing", USER_LANG),
                        explanation=get_message("api_explain_describe_thing", USER_LANG),
                        debug=debug_mode,
                        thingName=thing_name,
                    )
                    input(f"\n{get_message('return_to_menu', USER_LANG)}")

            elif choice == "6":
                print_learning_moment("describe_thing_group", USER_LANG)
                input(get_message("press_enter", USER_LANG))

                # Show available Thing Groups
                try:
                    groups_response = iot.list_thing_groups()
                    if groups_response.get("thingGroups"):
                        print(f"\n{get_message('available_groups', USER_LANG)} ({len(groups_response['thingGroups'])}):")
                        for i, group in enumerate(groups_response["thingGroups"], 1):
                            print(f"   {i}. {group['groupName']}")

                        selection = input(f"\n{get_message('enter_group_selection', USER_LANG)}").strip()
                        group_name = None

                        # Check if input is a number
                        if selection.isdigit():
                            group_index = int(selection) - 1
                            if 0 <= group_index < len(groups_response["thingGroups"]):
                                group_name = groups_response["thingGroups"][group_index]["groupName"]
                            else:
                                print(f"{get_message('invalid_selection', USER_LANG)} 1-{len(groups_response['thingGroups'])}")
                        else:
                            # Treat as group name
                            group_name = selection

                        if group_name:
                            safe_api_call(
                                iot.describe_thing_group,
                                "describe_thing_group",
                                description=get_message("api_desc_describe_thing_group", USER_LANG),
                                explanation=get_message("api_explain_describe_thing_group", USER_LANG),
                                debug=debug_mode,
                                thingGroupName=group_name,
                            )
                    else:
                        print(f"\n{get_message('no_groups_found', USER_LANG)}")
                except Exception as e:
                    print(f"\n{get_message('could_not_list_groups', USER_LANG)} {str(e)}")

                input(f"\n{get_message('return_to_menu', USER_LANG)}")

            elif choice == "7":
                print_learning_moment("describe_thing_type", USER_LANG)
                input(get_message("press_enter", USER_LANG))

                # Show available Thing Types
                try:
                    types_response = iot.list_thing_types()
                    if types_response.get("thingTypes"):
                        print(f"\n{get_message('available_types', USER_LANG)} ({len(types_response['thingTypes'])}):")
                        for i, thing_type in enumerate(types_response["thingTypes"], 1):
                            print(f"   {i}. {thing_type['thingTypeName']}")

                        selection = input(f"\n{get_message('enter_type_selection', USER_LANG)}").strip()
                        type_name = None

                        # Check if input is a number
                        if selection.isdigit():
                            type_index = int(selection) - 1
                            if 0 <= type_index < len(types_response["thingTypes"]):
                                type_name = types_response["thingTypes"][type_index]["thingTypeName"]
                            else:
                                print(f"{get_message('invalid_selection', USER_LANG)} 1-{len(types_response['thingTypes'])}")
                        else:
                            # Treat as type name
                            type_name = selection

                        if type_name:
                            safe_api_call(
                                iot.describe_thing_type,
                                "describe_thing_type",
                                description=get_message("api_desc_describe_thing_type", USER_LANG),
                                explanation=get_message("api_explain_describe_thing_type", USER_LANG),
                                debug=debug_mode,
                                thingTypeName=type_name,
                            )
                    else:
                        print(f"\n{get_message('no_types_found', USER_LANG)}")
                except Exception as e:
                    print(f"\n{get_message('could_not_list_types', USER_LANG)} {str(e)}")

                input(f"\n{get_message('return_to_menu', USER_LANG)}")

            elif choice == "8":
                print_learning_moment("describe_endpoint", USER_LANG)
                input(get_message("press_enter", USER_LANG))

                endpoint_type = input(get_message("endpoint_type_prompt", USER_LANG)).strip()
                if not endpoint_type:
                    endpoint_type = "iot:Data-ATS"
                safe_api_call(
                    iot.describe_endpoint,
                    "describe_endpoint",
                    description=get_message("api_desc_describe_endpoint", USER_LANG),
                    explanation=get_message("api_explain_describe_endpoint", USER_LANG),
                    debug=debug_mode,
                    endpointType=endpoint_type,
                )
                input(f"\n{get_message('return_to_menu', USER_LANG)}")

            elif choice == "9":
                print(get_message("goodbye", USER_LANG))
                break

            else:
                print(get_message("invalid_choice", USER_LANG))

            # Handle Ctrl+C in continue prompts
            if choice != "9":
                try:
                    pass  # Continue prompts are already handled in individual sections
                except KeyboardInterrupt:
                    print(f"\n\n{get_message('goodbye', USER_LANG)}")
                    break

    except KeyboardInterrupt:
        print(f"\n\n{get_message('goodbye', USER_LANG)}")


if __name__ == "__main__":
    main()
