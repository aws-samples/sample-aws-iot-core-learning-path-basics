#!/usr/bin/env python3
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

"""
AWS IoT Device Shadow Explorer
Educational tool for learning AWS IoT Device Shadow service through hands-on exploration.
"""
import json
import os
import re
import sys
import threading
import time
import uuid
from datetime import datetime

import boto3
from awscrt import mqtt
from awsiot import mqtt_connection_builder

# Simple translation system for learning content
MESSAGES = {
    "en": {
        "title": "üåü AWS IoT Device Shadow Explorer",
        "separator": "=" * 60,
        "aws_context_info": "üåç AWS Context Information:",
        "account_id": "Account ID",
        "region": "Region",
        "aws_context_error": "‚ö†Ô∏è Could not retrieve AWS context:",
        "aws_credentials_reminder": "   Make sure AWS credentials are configured",
        "description_intro": "This script teaches you AWS IoT Device Shadow concepts:",
        "shadow_concepts": [
            "‚Ä¢ Device Shadow service for state synchronization",
            "‚Ä¢ Shadow document structure (desired vs reported)",
            "‚Ä¢ MQTT topics for shadow operations",
            "‚Ä¢ Delta messages for state differences",
            "‚Ä¢ Real-time shadow updates and notifications",
            "‚Ä¢ Complete API details for each operation",
        ],
        "debug_enabled": "üîç DEBUG MODE ENABLED",
        "debug_features": [
            "‚Ä¢ Enhanced MQTT message logging",
            "‚Ä¢ Full shadow document analysis",
            "‚Ä¢ Extended educational information",
        ],
        "tip": "üí° Tip: Use --debug or -d flag for enhanced shadow logging",
        "press_enter": "Press Enter to continue...",
        "goodbye": "üëã Goodbye!",
        "main_menu": "üìã Device Shadow Operations:",
        "menu_options": [
            "1. Connect to Device & Subscribe to Shadow Topics",
            "2. Get Current Shadow Document",
            "3. Update Shadow Reported State (Device ‚Üí Cloud)",
            "4. Update Shadow Desired State (Cloud ‚Üí Device)",
            "5. Simulate Device State Changes",
            "6. View Shadow Message History",
            "7. Disconnect and Exit",
        ],
        "select_option": "Select option (1-7): ",
        "invalid_choice": "‚ùå Invalid choice. Please select 1-7.",
        "learning_moments": {
            "shadow_foundation": {
                "title": "üìö LEARNING MOMENT: Device Shadow Foundation",
                "content": "AWS IoT Device Shadow is a JSON document that stores and retrieves current state information for a device. The shadow acts as an intermediary between devices and applications, enabling reliable communication even when devices are offline. Understanding shadow concepts is essential for building robust IoT applications.",
                "next": "We will explore shadow operations and MQTT communication",
            },
            "shadow_connection": {
                "title": "üìö LEARNING MOMENT: Shadow MQTT Connection",
                "content": "Device Shadows use MQTT topics for communication. Each shadow operation (get, update, delete) has corresponding accepted/rejected response topics. Delta topics notify when desired state differs from reported state. This pub/sub model enables real-time, bidirectional communication between devices and applications.",
                "next": "We will establish MQTT connection and subscribe to shadow topics",
            },
            "shadow_document": {
                "title": "üìö LEARNING MOMENT: Shadow Document Structure",
                "content": "A shadow document contains 'desired' and 'reported' states. Desired state represents what the device should be, typically set by applications. Reported state represents the device's current state. When these differ, AWS IoT generates delta messages to notify the device of required changes.",
                "next": "We will retrieve and analyze the current shadow document",
            },
            "reported_state": {
                "title": "üìö LEARNING MOMENT: Reported State Updates",
                "content": "Devices update their reported state to inform the cloud of their current status. This is typically done after the device changes its physical state (temperature, status, etc.). Reported state updates help keep the shadow synchronized with the actual device state.",
                "next": "We will update the shadow's reported state from device",
            },
            "desired_state": {
                "title": "üìö LEARNING MOMENT: Desired State Updates",
                "content": "Applications set the desired state to request device changes. When desired state differs from reported state, AWS IoT sends delta messages to the device. This mechanism enables remote device control and configuration management through the cloud.",
                "next": "We will update the shadow's desired state from cloud",
            },
            "state_simulation": {
                "title": "üìö LEARNING MOMENT: Device State Simulation",
                "content": "Simulating device state changes helps understand the complete shadow workflow. We'll modify local device state and see how it propagates through the shadow service. This demonstrates the bidirectional nature of shadow communication and state synchronization.",
                "next": "We will simulate realistic device state changes",
            },
        },
        "workflow_titles": {
            "shadow_connection": "üîó Shadow Connection Workflow",
            "shadow_retrieval": "üì• Shadow Document Retrieval",
            "reported_update": "üì° Reported State Update",
            "desired_update": "üéØ Desired State Update",
            "state_simulation": "üîÑ Device State Simulation",
            "message_history": "üìú Shadow Message History",
        },
        "step_establishing_connection": "Establishing MQTT Connection for Shadow Operations",
        "step_subscribing_topics": "Subscribing to Shadow Topics",
        "step_requesting_shadow": "Requesting Shadow Document",
        "step_updating_reported": "Updating Reported State",
        "step_updating_desired": "Updating Desired State",
        "step_simulating_changes": "Simulating Device Changes",
        "shadow_connection_params": "üîó Shadow Connection Parameters:",
        "client_id": "Client ID",
        "thing_name": "Thing Name",
        "endpoint": "Endpoint",
        "port": "Port",
        "protocol": "Protocol",
        "authentication": "Authentication",
        "shadow_type": "Shadow Type",
        "connecting_to_iot": "üîÑ Connecting to AWS IoT Core...",
        "connection_established": "SHADOW CONNECTION ESTABLISHED",
        "connection_status": "Successfully connected to AWS IoT Core",
        "clean_session": "Clean Session",
        "keep_alive": "Keep Alive",
        "tls_version": "TLS Version",
        "certificate_auth": "Certificate Authentication",
        "shadow_connection_failed": "‚ùå Shadow connection failed:",
        "not_connected": "‚ùå Not connected to AWS IoT Core",
        "shadow_topics_for_thing": "üåü Shadow Topics for Thing:",
        "classic_shadow_topics": "üìã Classic Shadow Topics:",
        "subscription_successful": "‚úÖ Successfully subscribed to all {} shadow topics",
        "subscription_partial": "‚ö†Ô∏è  Only {}/{} subscriptions successful",
        "shadow_topic_explanations": "üìñ Shadow Topic Explanations:",
        "topic_get_accepted": "‚Ä¢ get/accepted - Shadow document retrieval success",
        "topic_get_rejected": "‚Ä¢ get/rejected - Shadow document retrieval failure",
        "topic_update_accepted": "‚Ä¢ update/accepted - Shadow update success",
        "topic_update_rejected": "‚Ä¢ update/rejected - Shadow update failure",
        "topic_update_delta": "‚Ä¢ update/delta - Desired ‚â† Reported (action needed)",
        "requesting_shadow_document": "üì• Requesting Shadow Document",
        "topic": "Topic",
        "thing": "Thing",
        "shadow_type_classic": "Classic",
        "shadow_get_request_sent": "‚úÖ Shadow GET request sent",
        "qos": "QoS",
        "packet_id": "Packet ID",
        "waiting_for_response": "‚è≥ Waiting for response on get/accepted or get/rejected...",
        "failed_request_shadow": "‚ùå Failed to request shadow document:",
        "shadow_message_received": "üåü SHADOW MESSAGE RECEIVED",
        "direction": "Direction",
        "received": "RECEIVED",
        "payload_size": "Payload Size",
        "timestamp": "Timestamp",
        "shadow_data": "Shadow Data",
        "error_processing_message": "‚ùå Error processing shadow message:",
        "shadow_get_accepted": "‚úÖ SHADOW GET ACCEPTED",
        "shadow_document_retrieved": "üìã Shadow Document Retrieved:",
        "version": "Version",
        "desired_state": "Desired State",
        "reported_state": "Reported State",
        "none": "None",
        "shadow_get_rejected": "‚ùå SHADOW GET REJECTED",
        "error_code": "Error Code",
        "message": "Message",
        "shadow_doesnt_exist": "Shadow doesn't exist yet - will create one on next update",
        "checking_shadow_exists": "Checking if shadow exists for {}...",
        "shadow_creation_normal": "This is normal for new devices - we'll create the shadow by reporting initial state",
        "creating_initial_shadow": "Shadow doesn't exist yet. Creating initial shadow...",
        "initial_shadow_created": "Initial shadow created successfully!",
        "retrieving_new_shadow": "Retrieving newly created shadow...",
        "shadow_already_exists": "Shadow already exists",
        "shadow_update_accepted": "‚úÖ SHADOW UPDATE ACCEPTED",
        "new_version": "New Version",
        "updated_desired": "Updated Desired",
        "updated_reported": "Updated Reported",
        "shadow_update_rejected": "‚ùå SHADOW UPDATE REJECTED",
        "shadow_delta_received": "üîÑ SHADOW DELTA RECEIVED",
        "description": "Description",
        "desired_differs_reported": "Desired state differs from reported state",
        "changes_needed": "Changes Needed",
        "state_comparison": "üîç State Comparison:",
        "local_state": "Local State",
        "delta": "Delta",
        "desired": "Desired",
        "differences_found": "‚ö†Ô∏è  Differences Found:",
        "apply_changes_prompt": "Apply these changes to local device? (y/N): ",
        "local_state_updated": "‚úÖ Local state updated successfully",
        "failed_update_local": "‚ùå Failed to update local state",
        "changes_not_applied": "‚è≠Ô∏è  Changes not applied to local device",
        "local_matches_desired": "‚úÖ Local state matches desired state - no changes needed",
        "automatically_reporting": "üì° Automatically reporting updated state to shadow...",
        "local_state_saved": "üíæ Local state saved to:",
        "created_default_state": "üìÑ Created default local state file:",
        "default_state": "üìä Default state:",
        "using_existing_state": "üìÑ Using existing local state file:",
        "current_local_state": "üìä Current local state:",
        "local_state_not_found": "‚ùå Local state file not found:",
        "invalid_json_state": "‚ùå Invalid JSON in state file:",
        "permission_denied_state": "‚ùå Permission denied accessing state file:",
        "unexpected_error_loading": "‚ùå Unexpected error loading local state:",
        "permission_denied_writing": "‚ùå Permission denied writing to state file:",
        "filesystem_error_saving": "‚ùå File system error saving state:",
        "invalid_state_data": "‚ùå Invalid state data type:",
        "unexpected_error_saving": "‚ùå Unexpected error saving local state:",
        "connection_interrupted": "CONNECTION INTERRUPTED",
        "error": "Error",
        "auto_reconnect": "Auto Reconnect",
        "sdk_will_reconnect": "AWS IoT SDK will attempt to reconnect automatically",
        "connection_resumed": "CONNECTION RESUMED",
        "return_code": "Return Code",
        "session_present": "Session Present",
        "status": "Status",
        "connection_restored": "Connection restored successfully",
        "iot_endpoint_discovery": "üåê AWS IoT Endpoint Discovery",
        "endpoint_type": "Endpoint Type",
        "endpoint_type_ats": "iot:Data-ATS (recommended)",
        "endpoint_url": "Endpoint URL",
        "port_mqtt_tls": "Port: 8883 (MQTT over TLS)",
        "protocol_mqtt": "Protocol: MQTT 3.1.1 over TLS",
        "error_getting_endpoint": "‚ùå Error getting IoT endpoint:",
        "available_devices": "üì± Available Devices ({} found):",
        "type": "Type",
        "selected_device": "‚úÖ Selected device:",
        "invalid_selection": "‚ùå Invalid selection. Please enter 1-{}",
        "enter_valid_number": "‚ùå Please enter a valid number",
        "operation_cancelled": "üõë Operation cancelled",
        "no_things_found": "‚ùå No Things found. Please run setup_sample_data.py first",
        "error_selecting_device": "‚ùå Error selecting device:",
        "no_certificates_found": "‚ùå No certificates found for device '{}'",
        "run_certificate_manager": "üí° Run certificate_manager.py to create and attach a certificate",
        "using_certificate": "‚úÖ Using certificate:",
        "multiple_certificates_found": "üîê Multiple certificates found:",
        "select_certificate": "Select certificate (1-{}): ",
        "invalid_selection_cert": "‚ùå Invalid selection",
        "certificate_files_found": "‚úÖ Certificate files found:",
        "certificate": "Certificate",
        "private_key": "Private Key",
        "cert_dir_not_found": "‚ùå Certificate directory not found:",
        "run_cert_manager_files": "üí° Run certificate_manager.py to create certificate files",
        "cert_files_not_found": "‚ùå Certificate files not found in {}",
        "looking_for_files": "Looking for: {}.crt and {}.key",
        "invalid_thing_name": "‚ö†Ô∏è Invalid thing name:",
        "unsafe_path_detected": "‚ö†Ô∏è Unsafe path detected:",
        "updating_shadow_reported": "üì° Updating Shadow Reported State",
        "reported_state_update": "üìä Reported State Update:",
        "current_local_state_label": "Current Local State",
        "shadow_update_payload": "Shadow Update Payload",
        "shadow_update_sent": "‚úÖ Shadow UPDATE (reported) sent",
        "failed_update_reported": "‚ùå Failed to update reported state:",
        "updating_shadow_desired": "üéØ Updating Shadow Desired State",
        "desired_state_update": "üìä Desired State Update:",
        "enter_property_name": "Enter property name: ",
        "property_name_required": "‚ùå Property name is required",
        "enter_property_value": "Enter property value: ",
        "property_value_required": "‚ùå Property value is required",
        "desired_state_to_set": "Desired State to Set",
        "property": "Property",
        "value": "Value",
        "shadow_update_desired_sent": "‚úÖ Shadow UPDATE (desired) sent",
        "failed_update_desired": "‚ùå Failed to update desired state:",
        "simulating_device_changes": "üîÑ Simulating Device State Changes",
        "simulation_options": "üìã Simulation Options:",
        "temperature_change": "1. Temperature change (¬±5¬∞C)",
        "humidity_change": "2. Humidity change (¬±10%)",
        "status_toggle": "3. Status toggle (online/offline)",
        "firmware_update": "4. Firmware version update",
        "custom_property": "5. Custom property change",
        "select_simulation": "Select simulation (1-5): ",
        "invalid_simulation": "‚ùå Invalid selection. Please select 1-5.",
        "temperature_changed": "üå°Ô∏è  Temperature changed: {} ‚Üí {}¬∞C",
        "humidity_changed": "üíß Humidity changed: {} ‚Üí {}%",
        "status_changed": "üîÑ Status changed: {} ‚Üí {}",
        "firmware_updated": "üîß Firmware updated: {} ‚Üí {}",
        "custom_property_changed": "üîß Custom property '{}' changed: {} ‚Üí {}",
        "state_change_summary": "üìä State Change Summary:",
        "previous_value": "Previous Value",
        "new_value": "New Value",
        "local_state_updated_sim": "üíæ Local state updated and saved",
        "reporting_to_shadow": "üì° Reporting change to shadow...",
        "simulation_complete": "‚úÖ Simulation complete",
        "viewing_message_history": "üìú Viewing Shadow Message History",
        "message_history": "üìä Shadow Message History ({} messages):",
        "no_messages_received": "üì≠ No shadow messages received yet",
        "try_other_operations": "üí° Try other operations first to generate shadow messages",
        "message_details": "Message Details:",
        "clear_history_prompt": "Clear message history? (y/N): ",
        "history_cleared": "üóëÔ∏è  Message history cleared",
        "history_not_cleared": "üìú Message history preserved",
        "disconnecting_from_iot": "üîå Disconnecting from AWS IoT Core...",
        "disconnection_complete": "‚úÖ Disconnection complete",
        "session_summary": "üìä Session Summary:",
        "total_messages": "Total Messages Received",
        "connection_duration": "Connection Duration",
        "shadow_operations": "Shadow Operations Performed",
        "thank_you_message": "Thank you for exploring AWS IoT Device Shadows!",
        "next_steps_suggestions": "üîç Next Steps:",
        "explore_iot_rules": "‚Ä¢ Explore iot_rules_explorer.py for message processing",
        "try_mqtt_client": "‚Ä¢ Try mqtt_client_explorer.py for direct MQTT communication",
        "check_registry": "‚Ä¢ Use iot_registry_explorer.py to view device details",
        "edit_local_state_title": "üìù Local State Editor",
        "current_state": "Current state:",
        "options": "Options:",
        "edit_individual_values": "1. Edit individual values",
        "replace_entire_state": "2. Replace entire state with JSON",
        "cancel": "3. Cancel",
        "select_option_1_3": "Select option (1-3): ",
        "current_values": "Current values:",
        "add_new_key": "Add new key",
        "done_editing": "Done editing",
        "select_item_to_edit": "Select item to edit (1-{}): ",
        "editing_key": "Editing '{}' (current: {})",
        "new_value_prompt": "New value (or press Enter to keep current): ",
        "updated_key": "‚úÖ Updated {} = {}",
        "new_key_name": "New key name: ",
        "value_for_key": "Value for '{}': ",
        "added_new_key": "‚úÖ Added new key: {} = {}",
        "enter_json_prompt": "Enter your JSON state (press Enter twice when done):",
        "invalid_json": "‚ùå Invalid JSON: {}",
        "state_updated_from_json": "‚úÖ State updated from JSON",
        "report_updated_state": "Report updated state to shadow? (y/N): ",
        "shadow_command_prompt": "üåü Shadow> ",
        "available_commands": "üìñ Available Commands:",
        "get_command": "   get                       - Request shadow document",
        "local_command": "   local                     - Show local device state",
        "edit_command": "   edit                      - Edit local device state",
        "report_command": "   report                    - Report local state to shadow",
        "desire_command": "   desire key=val [key=val]  - Set desired state",
        "status_command": "   status                    - Connection status",
        "messages_command": "   messages                  - Shadow message history",
        "debug_command": "   debug                     - Connection diagnostics",
        "quit_command": "   quit                      - Exit",
        "example_desire": "üí° Example: desire temperature=25.0 status=active",
        "current_local_device_state": "üì± Current Local Device State:",
        "usage_desire": "‚ùå Usage: desire key=value [key=value...]",
        "example_desire_usage": "üí° Example: desire temperature=25.0 status=active",
        "setting_desired_state": "üéØ Setting desired state: {}",
        "no_valid_pairs": "‚ùå No valid key=value pairs found",
        "shadow_connection_status": "üìä Shadow Connection Status:",
        "connected": "Connected",
        "yes": "‚úÖ Yes",
        "no": "‚ùå No",
        "shadow_message_history": "üì® Shadow Message History:",
        "unknown_command": "‚ùå Unknown command: {}. Type 'help' for available commands.",
        "client_id_prompt": "Enter custom Client ID (or press Enter for auto-generated): ",
        "client_id_auto_generated": "Auto-generated Client ID",
        "client_id_custom": "Custom Client ID",
        "client_id_invalid": "‚ùå Invalid Client ID. Must be 1-128 characters, alphanumeric, hyphens, and underscores only.",
        "client_id_guidelines": "üí° Client ID Guidelines:",
        "client_id_rules": [
            "‚Ä¢ Must be unique per connection",
            "‚Ä¢ 1-128 characters allowed",
            "‚Ä¢ Use alphanumeric, hyphens (-), and underscores (_)",
            "‚Ä¢ Avoid spaces and special characters",
            "‚Ä¢ Example: my-device-001, sensor_temp_01",
        ],
    },
    "es": {
        "title": "üåü Explorador de Device Shadow de AWS IoT",
        "separator": "=" * 60,
        "aws_context_info": "üåç Informaci√≥n de Contexto de AWS:",
        "account_id": "ID de Cuenta",
        "region": "Regi√≥n",
        "aws_context_error": "‚ö†Ô∏è No se pudo recuperar el contexto de AWS:",
        "aws_credentials_reminder": "   Aseg√∫rate de que las credenciales de AWS est√©n configuradas",
        "description_intro": "Este script te ense√±a conceptos de AWS IoT Device Shadow:",
        "shadow_concepts": [
            "‚Ä¢ Servicio Device Shadow para sincronizaci√≥n de estado",
            "‚Ä¢ Estructura del documento Shadow (deseado vs reportado)",
            "‚Ä¢ T√≥picos MQTT para operaciones de shadow",
            "‚Ä¢ Mensajes delta para diferencias de estado",
            "‚Ä¢ Actualizaciones de shadow en tiempo real y notificaciones",
            "‚Ä¢ Detalles completos de API para cada operaci√≥n",
        ],
        "debug_enabled": "üîç MODO DEBUG HABILITADO",
        "debug_features": [
            "‚Ä¢ Registro mejorado de mensajes MQTT",
            "‚Ä¢ An√°lisis completo de documentos shadow",
            "‚Ä¢ Informaci√≥n educativa extendida",
        ],
        "tip": "üí° Consejo: Usa la bandera --debug o -d para registro mejorado de shadow",
        "press_enter": "Presiona Enter para continuar...",
        "goodbye": "üëã ¬°Adi√≥s!",
        "main_menu": "üìã Operaciones de Device Shadow:",
        "menu_options": [
            "1. Conectar a Dispositivo y Suscribirse a T√≥picos Shadow",
            "2. Obtener Documento Shadow Actual",
            "3. Actualizar Estado Reportado del Shadow (Dispositivo ‚Üí Nube)",
            "4. Actualizar Estado Deseado del Shadow (Nube ‚Üí Dispositivo)",
            "5. Simular Cambios de Estado del Dispositivo",
            "6. Ver Historial de Mensajes Shadow",
            "7. Desconectar y Salir",
        ],
        "select_option": "Seleccionar opci√≥n (1-7): ",
        "invalid_choice": "‚ùå Selecci√≥n inv√°lida. Por favor selecciona 1-7.",
        "learning_moments": {
            "shadow_foundation": {
                "title": "üìö LEARNING MOMENT: Fundamentos de Device Shadow",
                "content": "AWS IoT Device Shadow es un documento JSON que almacena y recupera informaci√≥n del estado actual de un dispositivo. El shadow act√∫a como intermediario entre dispositivos y aplicaciones, permitiendo comunicaci√≥n confiable incluso cuando los dispositivos est√°n desconectados. Entender los conceptos de shadow es esencial para construir aplicaciones IoT robustas.",
                "next": "Exploraremos operaciones de shadow y comunicaci√≥n MQTT",
            },
            "shadow_connection": {
                "title": "üìö LEARNING MOMENT: Conexi√≥n MQTT de Shadow",
                "content": "Los Device Shadows usan t√≥picos MQTT para comunicaci√≥n. Cada operaci√≥n de shadow (get, update, delete) tiene t√≥picos de respuesta correspondientes accepted/rejected. Los t√≥picos delta notifican cuando el estado deseado difiere del reportado. Este modelo pub/sub permite comunicaci√≥n bidireccional en tiempo real entre dispositivos y aplicaciones.",
                "next": "Estableceremos conexi√≥n MQTT y nos suscribiremos a t√≥picos shadow",
            },
            "shadow_document": {
                "title": "üìö LEARNING MOMENT: Estructura del Documento Shadow",
                "content": "Un documento shadow contiene estados 'desired' y 'reported'. El estado deseado representa lo que el dispositivo deber√≠a ser, t√≠picamente establecido por aplicaciones. El estado reportado representa el estado actual del dispositivo. Cuando estos difieren, AWS IoT genera mensajes delta para notificar al dispositivo de los cambios requeridos.",
                "next": "Recuperaremos y analizaremos el documento shadow actual",
            },
            "reported_state": {
                "title": "üìö LEARNING MOMENT: Actualizaciones de Estado Reportado",
                "content": "Los dispositivos actualizan su estado reportado para informar a la nube de su estado actual. Esto se hace t√≠picamente despu√©s de que el dispositivo cambia su estado f√≠sico (temperatura, estado, etc.). Las actualizaciones de estado reportado ayudan a mantener el shadow sincronizado con el estado real del dispositivo.",
                "next": "Actualizaremos el estado reportado del shadow desde el dispositivo",
            },
            "desired_state": {
                "title": "üìö LEARNING MOMENT: Actualizaciones de Estado Deseado",
                "content": "Las aplicaciones establecen el estado deseado para solicitar cambios en el dispositivo. Cuando el estado deseado difiere del reportado, AWS IoT env√≠a mensajes delta al dispositivo. Este mecanismo permite control remoto de dispositivos y gesti√≥n de configuraci√≥n a trav√©s de la nube.",
                "next": "Actualizaremos el estado deseado del shadow desde la nube",
            },
            "state_simulation": {
                "title": "üìö LEARNING MOMENT: Simulaci√≥n de Estado del Dispositivo",
                "content": "Simular cambios de estado del dispositivo ayuda a entender el flujo completo del shadow. Modificaremos el estado local del dispositivo y veremos c√≥mo se propaga a trav√©s del servicio shadow. Esto demuestra la naturaleza bidireccional de la comunicaci√≥n shadow y sincronizaci√≥n de estado.",
                "next": "Simularemos cambios realistas de estado del dispositivo",
            },
        },
        "workflow_titles": {
            "shadow_connection": "üîó Flujo de Conexi√≥n Shadow",
            "shadow_retrieval": "üì• Recuperaci√≥n de Documento Shadow",
            "reported_update": "üì° Actualizaci√≥n de Estado Reportado",
            "desired_update": "üéØ Actualizaci√≥n de Estado Deseado",
            "state_simulation": "üîÑ Simulaci√≥n de Estado del Dispositivo",
            "message_history": "üìú Historial de Mensajes Shadow",
        },
        "step_establishing_connection": "Estableciendo Conexi√≥n MQTT para Operaciones Shadow",
        "step_subscribing_topics": "Suscribi√©ndose a T√≥picos Shadow",
        "step_requesting_shadow": "Solicitando Documento Shadow",
        "step_updating_reported": "Actualizando Estado Reportado",
        "step_updating_desired": "Actualizando Estado Deseado",
        "step_simulating_changes": "Simulando Cambios del Dispositivo",
        "shadow_connection_params": "üîó Par√°metros de Conexi√≥n Shadow:",
        "client_id": "ID de Cliente",
        "thing_name": "Nombre del Thing",
        "endpoint": "Endpoint",
        "port": "Puerto",
        "protocol": "Protocolo",
        "authentication": "Autenticaci√≥n",
        "shadow_type": "Tipo de Shadow",
        "connecting_to_iot": "üîÑ Conectando a AWS IoT Core...",
        "connection_established": "CONEXI√ìN SHADOW ESTABLECIDA",
        "connection_status": "Conectado exitosamente a AWS IoT Core",
        "clean_session": "Sesi√≥n Limpia",
        "keep_alive": "Keep Alive",
        "tls_version": "Versi√≥n TLS",
        "certificate_auth": "Autenticaci√≥n por Certificado",
        "shadow_connection_failed": "‚ùå Fall√≥ la conexi√≥n shadow:",
        "not_connected": "‚ùå No conectado a AWS IoT Core",
        "shadow_topics_for_thing": "üåü T√≥picos Shadow para Thing:",
        "classic_shadow_topics": "üìã T√≥picos Shadow Cl√°sicos:",
        "subscription_successful": "‚úÖ Suscrito exitosamente a todos los {} t√≥picos shadow",
        "subscription_partial": "‚ö†Ô∏è  Solo {}/{} suscripciones exitosas",
        "shadow_topic_explanations": "üìñ Explicaciones de T√≥picos Shadow:",
        "topic_get_accepted": "‚Ä¢ get/accepted - Recuperaci√≥n exitosa de documento shadow",
        "topic_get_rejected": "‚Ä¢ get/rejected - Fallo en recuperaci√≥n de documento shadow",
        "topic_update_accepted": "‚Ä¢ update/accepted - Actualizaci√≥n exitosa de shadow",
        "topic_update_rejected": "‚Ä¢ update/rejected - Fallo en actualizaci√≥n de shadow",
        "topic_update_delta": "‚Ä¢ update/delta - Deseado ‚â† Reportado (acci√≥n necesaria)",
        "requesting_shadow_document": "üì• Solicitando Documento Shadow",
        "topic": "T√≥pico",
        "thing": "Thing",
        "shadow_type_classic": "Cl√°sico",
        "shadow_get_request_sent": "‚úÖ Solicitud GET de shadow enviada",
        "qos": "QoS",
        "packet_id": "ID de Paquete",
        "waiting_for_response": "‚è≥ Esperando respuesta en get/accepted o get/rejected...",
        "failed_request_shadow": "‚ùå Fall√≥ la solicitud de documento shadow:",
        "shadow_message_received": "üåü MENSAJE SHADOW RECIBIDO",
        "direction": "Direcci√≥n",
        "received": "RECIBIDO",
        "payload_size": "Tama√±o de Payload",
        "timestamp": "Marca de Tiempo",
        "shadow_data": "Datos Shadow",
        "error_processing_message": "‚ùå Error procesando mensaje shadow:",
        "shadow_get_accepted": "‚úÖ SHADOW GET ACEPTADO",
        "shadow_document_retrieved": "üìã Documento Shadow Recuperado:",
        "version": "Versi√≥n",
        "desired_state": "Estado Deseado",
        "reported_state": "Estado Reportado",
        "none": "Ninguno",
        "shadow_get_rejected": "‚ùå SHADOW GET RECHAZADO",
        "error_code": "C√≥digo de Error",
        "message": "Mensaje",
        "shadow_doesnt_exist": "El shadow no existe a√∫n - se crear√° uno en la pr√≥xima actualizaci√≥n",
        "checking_shadow_exists": "Verificando si existe shadow para {}...",
        "shadow_creation_normal": "Esto es normal para dispositivos nuevos - crearemos el shadow reportando el estado inicial",
        "creating_initial_shadow": "El shadow no existe a√∫n. Creando shadow inicial...",
        "initial_shadow_created": "¬°Shadow inicial creado exitosamente!",
        "retrieving_new_shadow": "Recuperando shadow reci√©n creado...",
        "shadow_already_exists": "El shadow ya existe",
        "shadow_update_accepted": "‚úÖ ACTUALIZACI√ìN SHADOW ACEPTADA",
        "new_version": "Nueva Versi√≥n",
        "updated_desired": "Deseado Actualizado",
        "updated_reported": "Reportado Actualizado",
        "shadow_update_rejected": "‚ùå ACTUALIZACI√ìN SHADOW RECHAZADA",
        "shadow_delta_received": "üîÑ DELTA SHADOW RECIBIDO",
        "description": "Descripci√≥n",
        "desired_differs_reported": "El estado deseado difiere del estado reportado",
        "changes_needed": "Cambios Necesarios",
        "state_comparison": "üîç Comparaci√≥n de Estado:",
        "local_state": "Estado Local",
        "delta": "Delta",
        "desired": "Deseado",
        "differences_found": "‚ö†Ô∏è  Diferencias Encontradas:",
        "apply_changes_prompt": "¬øAplicar estos cambios al dispositivo local? (y/N): ",
        "local_state_updated": "‚úÖ Estado local actualizado exitosamente",
        "failed_update_local": "‚ùå Fall√≥ la actualizaci√≥n del estado local",
        "changes_not_applied": "‚è≠Ô∏è  Cambios no aplicados al dispositivo local",
        "local_matches_desired": "‚úÖ El estado local coincide con el estado deseado - no se necesitan cambios",
        "automatically_reporting": "üì° Reportando autom√°ticamente estado actualizado al shadow...",
        "local_state_saved": "üíæ Estado local guardado en:",
        "created_default_state": "üìÑ Archivo de estado local por defecto creado:",
        "default_state": "üìä Estado por defecto:",
        "using_existing_state": "üìÑ Usando archivo de estado local existente:",
        "current_local_state": "üìä Estado local actual:",
        "local_state_not_found": "‚ùå Archivo de estado local no encontrado:",
        "invalid_json_state": "‚ùå JSON inv√°lido en archivo de estado:",
        "permission_denied_state": "‚ùå Permiso denegado accediendo archivo de estado:",
        "unexpected_error_loading": "‚ùå Error inesperado cargando estado local:",
        "permission_denied_writing": "‚ùå Permiso denegado escribiendo archivo de estado:",
        "filesystem_error_saving": "‚ùå Error del sistema de archivos guardando estado:",
        "invalid_state_data": "‚ùå Tipo de datos de estado inv√°lido:",
        "unexpected_error_saving": "‚ùå Error inesperado guardando estado local:",
        "connection_interrupted": "CONEXI√ìN INTERRUMPIDA",
        "error": "Error",
        "auto_reconnect": "Reconexi√≥n Autom√°tica",
        "sdk_will_reconnect": "El SDK de AWS IoT intentar√° reconectar autom√°ticamente",
        "connection_resumed": "CONEXI√ìN RESTABLECIDA",
        "return_code": "C√≥digo de Retorno",
        "session_present": "Sesi√≥n Presente",
        "status": "Estado",
        "connection_restored": "Conexi√≥n restaurada exitosamente",
        "iot_endpoint_discovery": "üåê Descubrimiento de Endpoint de AWS IoT",
        "endpoint_type": "Tipo de Endpoint",
        "endpoint_type_ats": "iot:Data-ATS (recomendado)",
        "endpoint_url": "URL del Endpoint",
        "port_mqtt_tls": "Puerto: 8883 (MQTT sobre TLS)",
        "protocol_mqtt": "Protocolo: MQTT 3.1.1 sobre TLS",
        "error_getting_endpoint": "‚ùå Error obteniendo endpoint IoT:",
        "available_devices": "üì± Dispositivos Disponibles ({} encontrados):",
        "type": "Tipo",
        "selected_device": "‚úÖ Dispositivo seleccionado:",
        "invalid_selection": "‚ùå Selecci√≥n inv√°lida. Por favor ingresa 1-{}",
        "enter_valid_number": "‚ùå Por favor ingresa un n√∫mero v√°lido",
        "operation_cancelled": "üõë Operaci√≥n cancelada",
        "no_things_found": "‚ùå No se encontraron Things. Por favor ejecuta setup_sample_data.py primero",
        "error_selecting_device": "‚ùå Error seleccionando dispositivo:",
        "no_certificates_found": "‚ùå No se encontraron certificados para el dispositivo '{}'",
        "run_certificate_manager": "üí° Ejecuta certificate_manager.py para crear y vincular un certificado",
        "using_certificate": "‚úÖ Usando certificado:",
        "multiple_certificates_found": "üîê M√∫ltiples certificados encontrados:",
        "select_certificate": "Seleccionar certificado (1-{}): ",
        "invalid_selection_cert": "‚ùå Selecci√≥n inv√°lida",
        "certificate_files_found": "‚úÖ Archivos de certificado encontrados:",
        "certificate": "Certificado",
        "private_key": "Clave Privada",
        "cert_dir_not_found": "‚ùå Directorio de certificados no encontrado:",
        "run_cert_manager_files": "üí° Ejecuta certificate_manager.py para crear archivos de certificado",
        "cert_files_not_found": "‚ùå Archivos de certificado no encontrados en {}",
        "looking_for_files": "Buscando: {}.crt y {}.key",
        "invalid_thing_name": "‚ö†Ô∏è Nombre de thing inv√°lido:",
        "unsafe_path_detected": "‚ö†Ô∏è Ruta insegura detectada:",
        "updating_shadow_reported": "üì° Actualizando Estado Reportado del Shadow",
        "reported_state_update": "üìä Actualizaci√≥n de Estado Reportado:",
        "current_local_state_label": "Estado Local Actual",
        "shadow_update_payload": "Payload de Actualizaci√≥n Shadow",
        "shadow_update_sent": "‚úÖ UPDATE de shadow (reportado) enviado",
        "failed_update_reported": "‚ùå Fall√≥ la actualizaci√≥n del estado reportado:",
        "updating_shadow_desired": "üéØ Actualizando Estado Deseado del Shadow",
        "desired_state_update": "üìä Actualizaci√≥n de Estado Deseado:",
        "enter_property_name": "Ingresa nombre de propiedad: ",
        "property_name_required": "‚ùå El nombre de propiedad es requerido",
        "enter_property_value": "Ingresa valor de propiedad: ",
        "property_value_required": "‚ùå El valor de propiedad es requerido",
        "desired_state_to_set": "Estado Deseado a Establecer",
        "property": "Propiedad",
        "value": "Valor",
        "shadow_update_desired_sent": "‚úÖ UPDATE de shadow (deseado) enviado",
        "failed_update_desired": "‚ùå Fall√≥ la actualizaci√≥n del estado deseado:",
        "simulating_device_changes": "üîÑ Simulando Cambios de Estado del Dispositivo",
        "simulation_options": "üìã Opciones de Simulaci√≥n:",
        "temperature_change": "1. Cambio de temperatura (¬±5¬∞C)",
        "humidity_change": "2. Cambio de humedad (¬±10%)",
        "status_toggle": "3. Alternar estado (online/offline)",
        "firmware_update": "4. Actualizaci√≥n de versi√≥n de firmware",
        "custom_property": "5. Cambio de propiedad personalizada",
        "select_simulation": "Seleccionar simulaci√≥n (1-5): ",
        "invalid_simulation": "‚ùå Selecci√≥n inv√°lida. Por favor selecciona 1-5.",
        "temperature_changed": "üå°Ô∏è  Temperatura cambiada: {} ‚Üí {}¬∞C",
        "humidity_changed": "üíß Humedad cambiada: {} ‚Üí {}%",
        "status_changed": "üîÑ Estado cambiado: {} ‚Üí {}",
        "firmware_updated": "üîß Firmware actualizado: {} ‚Üí {}",
        "custom_property_changed": "üîß Propiedad personalizada '{}' cambiada: {} ‚Üí {}",
        "state_change_summary": "üìä Resumen de Cambio de Estado:",
        "previous_value": "Valor Anterior",
        "new_value": "Nuevo Valor",
        "local_state_updated_sim": "üíæ Estado local actualizado y guardado",
        "reporting_to_shadow": "üì° Reportando cambio al shadow...",
        "simulation_complete": "‚úÖ Simulaci√≥n completa",
        "viewing_message_history": "üìú Viendo Historial de Mensajes Shadow",
        "message_history": "üìä Historial de Mensajes Shadow ({} mensajes):",
        "no_messages_received": "üì≠ No se han recibido mensajes shadow a√∫n",
        "try_other_operations": "üí° Prueba otras operaciones primero para generar mensajes shadow",
        "message_details": "Detalles del Mensaje:",
        "clear_history_prompt": "¬øLimpiar historial de mensajes? (y/N): ",
        "history_cleared": "üóëÔ∏è  Historial de mensajes limpiado",
        "history_not_cleared": "üìú Historial de mensajes preservado",
        "disconnecting_from_iot": "üîå Desconectando de AWS IoT Core...",
        "disconnection_complete": "‚úÖ Desconexi√≥n completa",
        "session_summary": "üìä Resumen de Sesi√≥n:",
        "total_messages": "Total de Mensajes Recibidos",
        "connection_duration": "Duraci√≥n de Conexi√≥n",
        "shadow_operations": "Operaciones Shadow Realizadas",
        "thank_you_message": "¬°Gracias por explorar AWS IoT Device Shadows!",
        "next_steps_suggestions": "üîç Pr√≥ximos Pasos:",
        "explore_iot_rules": "‚Ä¢ Explora iot_rules_explorer.py para procesamiento de mensajes",
        "try_mqtt_client": "‚Ä¢ Prueba mqtt_client_explorer.py para comunicaci√≥n MQTT directa",
        "check_registry": "‚Ä¢ Usa iot_registry_explorer.py para ver detalles del dispositivo",
        "edit_local_state_title": "üìù Editor de Estado Local",
        "current_state": "Estado actual:",
        "options": "Opciones:",
        "edit_individual_values": "1. Editar valores individuales",
        "replace_entire_state": "2. Reemplazar todo el estado con JSON",
        "cancel": "3. Cancelar",
        "select_option_1_3": "Seleccionar opci√≥n (1-3): ",
        "current_values": "Valores actuales:",
        "add_new_key": "Agregar nueva clave",
        "done_editing": "Terminar edici√≥n",
        "select_item_to_edit": "Seleccionar elemento a editar (1-{}): ",
        "editing_key": "Editando '{}' (actual: {})",
        "new_value_prompt": "Nuevo valor (o presiona Enter para mantener actual): ",
        "updated_key": "‚úÖ Actualizado {} = {}",
        "new_key_name": "Nombre de nueva clave: ",
        "value_for_key": "Valor para '{}': ",
        "added_new_key": "‚úÖ Agregada nueva clave: {} = {}",
        "enter_json_prompt": "Ingresa tu estado JSON (presiona Enter dos veces cuando termines):",
        "invalid_json": "‚ùå JSON inv√°lido: {}",
        "state_updated_from_json": "‚úÖ Estado actualizado desde JSON",
        "report_updated_state": "¬øReportar estado actualizado al shadow? (y/N): ",
        "shadow_command_prompt": "üåü Shadow> ",
        "available_commands": "üìñ Comandos Disponibles:",
        "get_command": "   get                       - Solicitar documento shadow",
        "local_command": "   local                     - Mostrar estado local del dispositivo",
        "edit_command": "   edit                      - Editar estado local del dispositivo",
        "report_command": "   report                    - Reportar estado local al shadow",
        "desire_command": "   desire key=val [key=val]  - Establecer estado deseado",
        "status_command": "   status                    - Estado de conexi√≥n",
        "messages_command": "   messages                  - Historial de mensajes shadow",
        "debug_command": "   debug                     - Diagn√≥sticos de conexi√≥n",
        "quit_command": "   quit                      - Salir",
        "example_desire": "üí° Ejemplo: desire temperature=25.0 status=active",
        "current_local_device_state": "üì± Estado Actual del Dispositivo Local:",
        "usage_desire": "‚ùå Uso: desire key=value [key=value...]",
        "example_desire_usage": "üí° Ejemplo: desire temperature=25.0 status=active",
        "setting_desired_state": "üéØ Estableciendo estado deseado: {}",
        "no_valid_pairs": "‚ùå No se encontraron pares key=value v√°lidos",
        "shadow_connection_status": "üìä Estado de Conexi√≥n Shadow:",
        "connected": "Conectado",
        "yes": "‚úÖ S√≠",
        "no": "‚ùå No",
        "shadow_message_history": "üì® Historial de Mensajes Shadow:",
        "unknown_command": "‚ùå Comando desconocido: {}. Escribe 'help' para comandos disponibles.",
        "client_id_prompt": "Digite ID do Cliente personalizado (ou pressione Enter para auto-gerar): ",
        "client_id_auto_generated": "ID do Cliente Auto-gerado",
        "client_id_custom": "ID do Cliente Personalizado",
        "client_id_invalid": "‚ùå ID do Cliente inv√°lido. Deve ter 1-128 caracteres, apenas alfanum√©ricos, h√≠fens e sublinhados.",
        "client_id_guidelines": "üí° Diretrizes do ID do Cliente:",
        "client_id_rules": [
            "‚Ä¢ Deve ser √∫nico por conex√£o",
            "‚Ä¢ 1-128 caracteres permitidos",
            "‚Ä¢ Use alfanum√©ricos, h√≠fens (-) e sublinhados (_)",
            "‚Ä¢ Evite espa√ßos e caracteres especiais",
            "‚Ä¢ Exemplo: meu-dispositivo-001, sensor_temp_01",
        ],
    },
    "zh-CN": {
        "title": "üåü AWS IoT ËÆæÂ§áÂΩ±Â≠êÊé¢Á¥¢Âô®",
        "separator": "=" * 60,
        "aws_context_info": "üåç AWS ‰∏ä‰∏ãÊñá‰ø°ÊÅØÔºö",
        "account_id": "Ë¥¶Êà∑ ID",
        "region": "Âå∫Âüü",
        "aws_context_error": "‚ö†Ô∏è Êó†Ê≥ïÊ£ÄÁ¥¢ AWS ‰∏ä‰∏ãÊñáÔºö",
        "aws_credentials_reminder": "   ËØ∑Á°Æ‰øùÂ∑≤ÈÖçÁΩÆ AWS Âá≠ËØÅ",
        "description_intro": "Ê≠§ËÑöÊú¨ÊïôÊÇ® AWS IoT ËÆæÂ§áÂΩ±Â≠êÊ¶ÇÂøµÔºö",
        "shadow_concepts": [
            "‚Ä¢ Áî®‰∫éÁä∂ÊÄÅÂêåÊ≠•ÁöÑËÆæÂ§áÂΩ±Â≠êÊúçÂä°",
            "‚Ä¢ ÂΩ±Â≠êÊñáÊ°£ÁªìÊûÑÔºàÊúüÊúõÁä∂ÊÄÅ vs Êä•ÂëäÁä∂ÊÄÅÔºâ",
            "‚Ä¢ ÂΩ±Â≠êÊìç‰ΩúÁöÑ MQTT ‰∏ªÈ¢ò",
            "‚Ä¢ Áä∂ÊÄÅÂ∑ÆÂºÇÁöÑÂ¢ûÈáèÊ∂àÊÅØ",
            "‚Ä¢ ÂÆûÊó∂ÂΩ±Â≠êÊõ¥Êñ∞ÂíåÈÄöÁü•",
            "‚Ä¢ ÊØè‰∏™Êìç‰ΩúÁöÑÂÆåÊï¥ API ËØ¶ÁªÜ‰ø°ÊÅØ",
        ],
        "debug_enabled": "üîç Ë∞ÉËØïÊ®°ÂºèÂ∑≤ÂêØÁî®",
        "debug_features": [
            "‚Ä¢ Â¢ûÂº∫ÁöÑ MQTT Ê∂àÊÅØÊó•ÂøóËÆ∞ÂΩï",
            "‚Ä¢ ÂÆåÊï¥ÁöÑÂΩ±Â≠êÊñáÊ°£ÂàÜÊûê",
            "‚Ä¢ Êâ©Â±ïÁöÑÊïôËÇ≤‰ø°ÊÅØ",
        ],
        "tip": "üí° ÊèêÁ§∫Ôºö‰ΩøÁî® --debug Êàñ -d Ê†áÂøóËøõË°åÂ¢ûÂº∫ÁöÑÂΩ±Â≠êÊó•ÂøóËÆ∞ÂΩï",
        "press_enter": "Êåâ Enter ÈîÆÁªßÁª≠...",
        "goodbye": "üëã ÂÜçËßÅÔºÅ",
        "main_menu": "üìã ËÆæÂ§áÂΩ±Â≠êÊìç‰ΩúÔºö",
        "menu_options": [
            "1. ËøûÊé•Âà∞ËÆæÂ§áÂπ∂ËÆ¢ÈòÖÂΩ±Â≠ê‰∏ªÈ¢ò",
            "2. Ëé∑ÂèñÂΩìÂâçÂΩ±Â≠êÊñáÊ°£",
            "3. Êõ¥Êñ∞ÂΩ±Â≠êÊä•ÂëäÁä∂ÊÄÅÔºàËÆæÂ§á ‚Üí ‰∫ëÁ´ØÔºâ",
            "4. Êõ¥Êñ∞ÂΩ±Â≠êÊúüÊúõÁä∂ÊÄÅÔºà‰∫ëÁ´Ø ‚Üí ËÆæÂ§áÔºâ",
            "5. Ê®°ÊãüËÆæÂ§áÁä∂ÊÄÅÂèòÂåñ",
            "6. Êü•ÁúãÂΩ±Â≠êÊ∂àÊÅØÂéÜÂè≤",
            "7. Êñ≠ÂºÄËøûÊé•Âπ∂ÈÄÄÂá∫",
        ],
        "select_option": "ÈÄâÊã©ÈÄâÈ°π (1-7)Ôºö",
        "invalid_choice": "‚ùå Êó†ÊïàÈÄâÊã©„ÄÇËØ∑ÈÄâÊã© 1-7„ÄÇ",
        "learning_moments": {
            "shadow_foundation": {
                "title": "üìö Â≠¶‰π†Ë¶ÅÁÇπÔºöËÆæÂ§áÂΩ±Â≠êÂü∫Á°Ä",
                "content": "AWS IoT ËÆæÂ§áÂΩ±Â≠êÊòØ‰∏Ä‰∏™ JSON ÊñáÊ°£ÔºåÁî®‰∫éÂ≠òÂÇ®ÂíåÊ£ÄÁ¥¢ËÆæÂ§áÁöÑÂΩìÂâçÁä∂ÊÄÅ‰ø°ÊÅØ„ÄÇÂΩ±Â≠êÂÖÖÂΩìËÆæÂ§áÂíåÂ∫îÁî®Á®ãÂ∫è‰πãÈó¥ÁöÑ‰∏≠‰ªãÔºåÂç≥‰ΩøÂú®ËÆæÂ§áÁ¶ªÁ∫øÊó∂‰πüËÉΩÂÆûÁé∞ÂèØÈù†ÁöÑÈÄö‰ø°„ÄÇÁêÜËß£ÂΩ±Â≠êÊ¶ÇÂøµÂØπ‰∫éÊûÑÂª∫Âº∫Â§ßÁöÑ IoT Â∫îÁî®Á®ãÂ∫èËá≥ÂÖ≥ÈáçË¶Å„ÄÇ",
                "next": "Êàë‰ª¨Â∞ÜÊé¢Á¥¢ÂΩ±Â≠êÊìç‰ΩúÂíå MQTT ÈÄö‰ø°",
            },
            "shadow_connection": {
                "title": "üìö Â≠¶‰π†Ë¶ÅÁÇπÔºöÂΩ±Â≠ê MQTT ËøûÊé•",
                "content": "ËÆæÂ§áÂΩ±Â≠ê‰ΩøÁî® MQTT ‰∏ªÈ¢òËøõË°åÈÄö‰ø°„ÄÇÊØè‰∏™ÂΩ±Â≠êÊìç‰ΩúÔºàget„ÄÅupdate„ÄÅdeleteÔºâÈÉΩÊúâÁõ∏Â∫îÁöÑ accepted/rejected ÂìçÂ∫î‰∏ªÈ¢ò„ÄÇÂΩìÊúüÊúõÁä∂ÊÄÅ‰∏éÊä•ÂëäÁä∂ÊÄÅ‰∏çÂêåÊó∂ÔºåÂ¢ûÈáè‰∏ªÈ¢ò‰ºöÂèëÂá∫ÈÄöÁü•„ÄÇËøôÁßçÂèëÂ∏É/ËÆ¢ÈòÖÊ®°ÂûãÂÆûÁé∞‰∫ÜËÆæÂ§áÂíåÂ∫îÁî®Á®ãÂ∫è‰πãÈó¥ÁöÑÂÆûÊó∂ÂèåÂêëÈÄö‰ø°„ÄÇ",
                "next": "Êàë‰ª¨Â∞ÜÂª∫Á´ã MQTT ËøûÊé•Âπ∂ËÆ¢ÈòÖÂΩ±Â≠ê‰∏ªÈ¢ò",
            },
            "shadow_document": {
                "title": "üìö Â≠¶‰π†Ë¶ÅÁÇπÔºöÂΩ±Â≠êÊñáÊ°£ÁªìÊûÑ",
                "content": "ÂΩ±Â≠êÊñáÊ°£ÂåÖÂê´'desired'ÔºàÊúüÊúõÔºâÂíå'reported'ÔºàÊä•ÂëäÔºâÁä∂ÊÄÅ„ÄÇÊúüÊúõÁä∂ÊÄÅË°®Á§∫ËÆæÂ§áÂ∫îËØ•Â§Ñ‰∫éÁöÑÁä∂ÊÄÅÔºåÈÄöÂ∏∏Áî±Â∫îÁî®Á®ãÂ∫èËÆæÁΩÆ„ÄÇÊä•ÂëäÁä∂ÊÄÅË°®Á§∫ËÆæÂ§áÁöÑÂΩìÂâçÁä∂ÊÄÅ„ÄÇÂΩìËøô‰∏§ËÄÖ‰∏çÂêåÊó∂ÔºåAWS IoT ‰ºöÁîüÊàêÂ¢ûÈáèÊ∂àÊÅØÊù•ÈÄöÁü•ËÆæÂ§áÊâÄÈúÄÁöÑÊõ¥Êîπ„ÄÇ",
                "next": "Êàë‰ª¨Â∞ÜÊ£ÄÁ¥¢Âπ∂ÂàÜÊûêÂΩìÂâçÁöÑÂΩ±Â≠êÊñáÊ°£",
            },
            "reported_state": {
                "title": "üìö Â≠¶‰π†Ë¶ÅÁÇπÔºöÊä•ÂëäÁä∂ÊÄÅÊõ¥Êñ∞",
                "content": "ËÆæÂ§áÊõ¥Êñ∞ÂÖ∂Êä•ÂëäÁä∂ÊÄÅ‰ª•ÂëäÁü•‰∫ëÁ´ØÂÖ∂ÂΩìÂâçÁä∂ÊÄÅ„ÄÇËøôÈÄöÂ∏∏Âú®ËÆæÂ§áÊõ¥ÊîπÂÖ∂Áâ©ÁêÜÁä∂ÊÄÅÔºàÊ∏©Â∫¶„ÄÅÁä∂ÊÄÅÁ≠âÔºâÂêéËøõË°å„ÄÇÊä•ÂëäÁä∂ÊÄÅÊõ¥Êñ∞ÊúâÂä©‰∫é‰øùÊåÅÂΩ±Â≠ê‰∏éÂÆûÈôÖËÆæÂ§áÁä∂ÊÄÅÂêåÊ≠•„ÄÇ",
                "next": "Êàë‰ª¨Â∞Ü‰ªéËÆæÂ§áÊõ¥Êñ∞ÂΩ±Â≠êÁöÑÊä•ÂëäÁä∂ÊÄÅ",
            },
            "desired_state": {
                "title": "üìö Â≠¶‰π†Ë¶ÅÁÇπÔºöÊúüÊúõÁä∂ÊÄÅÊõ¥Êñ∞",
                "content": "Â∫îÁî®Á®ãÂ∫èËÆæÁΩÆÊúüÊúõÁä∂ÊÄÅ‰ª•ËØ∑Ê±ÇËÆæÂ§áÊõ¥Êîπ„ÄÇÂΩìÊúüÊúõÁä∂ÊÄÅ‰∏éÊä•ÂëäÁä∂ÊÄÅ‰∏çÂêåÊó∂ÔºåAWS IoT ‰ºöÂêëËÆæÂ§áÂèëÈÄÅÂ¢ûÈáèÊ∂àÊÅØ„ÄÇËøôÁßçÊú∫Âà∂ÈÄöËøá‰∫ëÁ´ØÂÆûÁé∞ËøúÁ®ãËÆæÂ§áÊéßÂà∂ÂíåÈÖçÁΩÆÁÆ°ÁêÜ„ÄÇ",
                "next": "Êàë‰ª¨Â∞Ü‰ªé‰∫ëÁ´ØÊõ¥Êñ∞ÂΩ±Â≠êÁöÑÊúüÊúõÁä∂ÊÄÅ",
            },
            "state_simulation": {
                "title": "üìö Â≠¶‰π†Ë¶ÅÁÇπÔºöËÆæÂ§áÁä∂ÊÄÅÊ®°Êãü",
                "content": "Ê®°ÊãüËÆæÂ§áÁä∂ÊÄÅÂèòÂåñÊúâÂä©‰∫éÁêÜËß£ÂÆåÊï¥ÁöÑÂΩ±Â≠êÂ∑•‰ΩúÊµÅÁ®ã„ÄÇÊàë‰ª¨Â∞Ü‰øÆÊîπÊú¨Âú∞ËÆæÂ§áÁä∂ÊÄÅÂπ∂ËßÇÂØüÂÆÉÂ¶Ç‰ΩïÈÄöËøáÂΩ±Â≠êÊúçÂä°‰º†Êí≠„ÄÇËøôÂ±ïÁ§∫‰∫ÜÂΩ±Â≠êÈÄö‰ø°ÂíåÁä∂ÊÄÅÂêåÊ≠•ÁöÑÂèåÂêëÊÄßË¥®„ÄÇ",
                "next": "Êàë‰ª¨Â∞ÜÊ®°ÊãüÁúüÂÆûÁöÑËÆæÂ§áÁä∂ÊÄÅÂèòÂåñ",
            },
        },
        "workflow_titles": {
            "shadow_connection": "üîó ÂΩ±Â≠êËøûÊé•Â∑•‰ΩúÊµÅ",
            "shadow_retrieval": "üì• ÂΩ±Â≠êÊñáÊ°£Ê£ÄÁ¥¢",
            "reported_update": "üì° Êä•ÂëäÁä∂ÊÄÅÊõ¥Êñ∞",
            "desired_update": "üéØ ÊúüÊúõÁä∂ÊÄÅÊõ¥Êñ∞",
            "state_simulation": "üîÑ ËÆæÂ§áÁä∂ÊÄÅÊ®°Êãü",
            "message_history": "üìú ÂΩ±Â≠êÊ∂àÊÅØÂéÜÂè≤",
        },
        "step_establishing_connection": "Âª∫Á´ãÂΩ±Â≠êÊìç‰ΩúÁöÑ MQTT ËøûÊé•",
        "step_subscribing_topics": "ËÆ¢ÈòÖÂΩ±Â≠ê‰∏ªÈ¢ò",
        "step_requesting_shadow": "ËØ∑Ê±ÇÂΩ±Â≠êÊñáÊ°£",
        "step_updating_reported": "Êõ¥Êñ∞Êä•ÂëäÁä∂ÊÄÅ",
        "step_updating_desired": "Êõ¥Êñ∞ÊúüÊúõÁä∂ÊÄÅ",
        "step_simulating_changes": "Ê®°ÊãüËÆæÂ§áÂèòÂåñ",
        "shadow_connection_params": "üîó ÂΩ±Â≠êËøûÊé•ÂèÇÊï∞Ôºö",
        "client_id": "ÂÆ¢Êà∑Á´Ø ID",
        "thing_name": "Áâ©ÂìÅÂêçÁß∞",
        "endpoint": "Á´ØÁÇπ",
        "port": "Á´ØÂè£",
        "protocol": "ÂçèËÆÆ",
        "authentication": "Ë∫´‰ªΩÈ™åËØÅ",
        "shadow_type": "ÂΩ±Â≠êÁ±ªÂûã",
        "connecting_to_iot": "üîÑ Ê≠£Âú®ËøûÊé•Âà∞ AWS IoT Core...",
        "connection_established": "ÂΩ±Â≠êËøûÊé•Â∑≤Âª∫Á´ã",
        "connection_status": "ÊàêÂäüËøûÊé•Âà∞ AWS IoT Core",
        "clean_session": "Ê∏ÖÊ¥Å‰ºöËØù",
        "keep_alive": "‰øùÊåÅÊ¥ªÂä®",
        "tls_version": "TLS ÁâàÊú¨",
        "certificate_auth": "ËØÅ‰π¶Ë∫´‰ªΩÈ™åËØÅ",
        "shadow_connection_failed": "‚ùå ÂΩ±Â≠êËøûÊé•Â§±Ë¥•Ôºö",
        "not_connected": "‚ùå Êú™ËøûÊé•Âà∞ AWS IoT Core",
        "shadow_topics_for_thing": "üåü Áâ©ÂìÅÁöÑÂΩ±Â≠ê‰∏ªÈ¢òÔºö",
        "classic_shadow_topics": "üìã ÁªèÂÖ∏ÂΩ±Â≠ê‰∏ªÈ¢òÔºö",
        "subscription_successful": "‚úÖ ÊàêÂäüËÆ¢ÈòÖÊâÄÊúâ {} ‰∏™ÂΩ±Â≠ê‰∏ªÈ¢ò",
        "subscription_partial": "‚ö†Ô∏è  Âè™Êúâ {}/{} ‰∏™ËÆ¢ÈòÖÊàêÂäü",
        "shadow_topic_explanations": "üìñ ÂΩ±Â≠ê‰∏ªÈ¢òËØ¥ÊòéÔºö",
        "topic_get_accepted": "‚Ä¢ get/accepted - ÂΩ±Â≠êÊñáÊ°£Ê£ÄÁ¥¢ÊàêÂäü",
        "topic_get_rejected": "‚Ä¢ get/rejected - ÂΩ±Â≠êÊñáÊ°£Ê£ÄÁ¥¢Â§±Ë¥•",
        "topic_update_accepted": "‚Ä¢ update/accepted - ÂΩ±Â≠êÊõ¥Êñ∞ÊàêÂäü",
        "topic_update_rejected": "‚Ä¢ update/rejected - ÂΩ±Â≠êÊõ¥Êñ∞Â§±Ë¥•",
        "topic_update_delta": "‚Ä¢ update/delta - ÊúüÊúõ ‚â† Êä•ÂëäÔºàÈúÄË¶ÅÊìç‰ΩúÔºâ",
        "requesting_shadow_document": "üì• ËØ∑Ê±ÇÂΩ±Â≠êÊñáÊ°£",
        "topic": "‰∏ªÈ¢ò",
        "thing": "Áâ©ÂìÅ",
        "shadow_type_classic": "ÁªèÂÖ∏",
        "shadow_get_request_sent": "‚úÖ ÂΩ±Â≠ê GET ËØ∑Ê±ÇÂ∑≤ÂèëÈÄÅ",
        "qos": "QoS",
        "packet_id": "Êï∞ÊçÆÂåÖ ID",
        "waiting_for_response": "‚è≥ Á≠âÂæÖ get/accepted Êàñ get/rejected ÁöÑÂìçÂ∫î...",
        "failed_request_shadow": "‚ùå ËØ∑Ê±ÇÂΩ±Â≠êÊñáÊ°£Â§±Ë¥•Ôºö",
        "shadow_message_received": "üåü Êî∂Âà∞ÂΩ±Â≠êÊ∂àÊÅØ",
        "direction": "ÊñπÂêë",
        "received": "Â∑≤Êé•Êî∂",
        "payload_size": "Ë¥üËΩΩÂ§ßÂ∞è",
        "timestamp": "Êó∂Èó¥Êà≥",
        "shadow_data": "ÂΩ±Â≠êÊï∞ÊçÆ",
        "error_processing_message": "‚ùå Â§ÑÁêÜÂΩ±Â≠êÊ∂àÊÅØÊó∂Âá∫ÈîôÔºö",
        "shadow_get_accepted": "‚úÖ ÂΩ±Â≠ê GET Â∑≤Êé•Âèó",
        "shadow_document_retrieved": "üìã Â∑≤Ê£ÄÁ¥¢ÂΩ±Â≠êÊñáÊ°£Ôºö",
        "version": "ÁâàÊú¨",
        "desired_state": "ÊúüÊúõÁä∂ÊÄÅ",
        "reported_state": "Êä•ÂëäÁä∂ÊÄÅ",
        "none": "Êó†",
        "shadow_get_rejected": "‚ùå ÂΩ±Â≠ê GET Ë¢´ÊãíÁªù",
        "error_code": "ÈîôËØØ‰ª£Á†Å",
        "message": "Ê∂àÊÅØ",
        "shadow_doesnt_exist": "ÂΩ±Â≠êÂ∞ö‰∏çÂ≠òÂú® - Â∞ÜÂú®‰∏ãÊ¨°Êõ¥Êñ∞Êó∂ÂàõÂª∫",
        "checking_shadow_exists": "Ê£ÄÊü• {} ÁöÑÂΩ±Â≠êÊòØÂê¶Â≠òÂú®...",
        "shadow_creation_normal": "ËøôÂØπ‰∫éÊñ∞ËÆæÂ§áÊòØÊ≠£Â∏∏ÁöÑ - Êàë‰ª¨Â∞ÜÈÄöËøáÊä•ÂëäÂàùÂßãÁä∂ÊÄÅÊù•ÂàõÂª∫ÂΩ±Â≠ê",
        "creating_initial_shadow": "ÂΩ±Â≠êÂ∞ö‰∏çÂ≠òÂú®„ÄÇÊ≠£Âú®ÂàõÂª∫ÂàùÂßãÂΩ±Â≠ê...",
        "initial_shadow_created": "ÂàùÂßãÂΩ±Â≠êÂàõÂª∫ÊàêÂäüÔºÅ",
        "retrieving_new_shadow": "Ê£ÄÁ¥¢Êñ∞ÂàõÂª∫ÁöÑÂΩ±Â≠ê...",
        "shadow_already_exists": "ÂΩ±Â≠êÂ∑≤Â≠òÂú®",
        "shadow_update_accepted": "‚úÖ ÂΩ±Â≠êÊõ¥Êñ∞Â∑≤Êé•Âèó",
        "new_version": "Êñ∞ÁâàÊú¨",
        "updated_desired": "Â∑≤Êõ¥Êñ∞ÊúüÊúõ",
        "updated_reported": "Â∑≤Êõ¥Êñ∞Êä•Âëä",
        "shadow_update_rejected": "‚ùå ÂΩ±Â≠êÊõ¥Êñ∞Ë¢´ÊãíÁªù",
        "shadow_delta_received": "üîÑ Êî∂Âà∞ÂΩ±Â≠êÂ¢ûÈáè",
        "description": "ÊèèËø∞",
        "desired_differs_reported": "ÊúüÊúõÁä∂ÊÄÅ‰∏éÊä•ÂëäÁä∂ÊÄÅ‰∏çÂêå",
        "changes_needed": "ÈúÄË¶ÅÁöÑÊõ¥Êîπ",
        "state_comparison": "üîç Áä∂ÊÄÅÊØîËæÉÔºö",
        "local_state": "Êú¨Âú∞Áä∂ÊÄÅ",
        "delta": "Â¢ûÈáè",
        "desired": "ÊúüÊúõ",
        "differences_found": "‚ö†Ô∏è  ÂèëÁé∞Â∑ÆÂºÇÔºö",
        "apply_changes_prompt": "Â∞ÜËøô‰∫õÊõ¥ÊîπÂ∫îÁî®Âà∞Êú¨Âú∞ËÆæÂ§áÔºü(y/N)Ôºö",
        "local_state_updated": "‚úÖ Êú¨Âú∞Áä∂ÊÄÅÊõ¥Êñ∞ÊàêÂäü",
        "failed_update_local": "‚ùå Êõ¥Êñ∞Êú¨Âú∞Áä∂ÊÄÅÂ§±Ë¥•",
        "changes_not_applied": "‚è≠Ô∏è  Êõ¥ÊîπÊú™Â∫îÁî®Âà∞Êú¨Âú∞ËÆæÂ§á",
        "local_matches_desired": "‚úÖ Êú¨Âú∞Áä∂ÊÄÅ‰∏éÊúüÊúõÁä∂ÊÄÅÂåπÈÖç - Êó†ÈúÄÊõ¥Êîπ",
        "automatically_reporting": "üì° Ëá™Âä®ÂêëÂΩ±Â≠êÊä•ÂëäÊõ¥Êñ∞Áä∂ÊÄÅ...",
        "local_state_saved": "üíæ Êú¨Âú∞Áä∂ÊÄÅÂ∑≤‰øùÂ≠òÂà∞Ôºö",
        "created_default_state": "üìÑ Â∑≤ÂàõÂª∫ÈªòËÆ§Êú¨Âú∞Áä∂ÊÄÅÊñá‰ª∂Ôºö",
        "default_state": "üìä ÈªòËÆ§Áä∂ÊÄÅÔºö",
        "using_existing_state": "üìÑ ‰ΩøÁî®Áé∞ÊúâÊú¨Âú∞Áä∂ÊÄÅÊñá‰ª∂Ôºö",
        "current_local_state": "üìä ÂΩìÂâçÊú¨Âú∞Áä∂ÊÄÅÔºö",
        "local_state_not_found": "‚ùå Êú™ÊâæÂà∞Êú¨Âú∞Áä∂ÊÄÅÊñá‰ª∂Ôºö",
        "invalid_json_state": "‚ùå Áä∂ÊÄÅÊñá‰ª∂‰∏≠ÁöÑ JSON Êó†ÊïàÔºö",
        "permission_denied_state": "‚ùå ËÆøÈóÆÁä∂ÊÄÅÊñá‰ª∂ÊùÉÈôêË¢´ÊãíÁªùÔºö",
        "unexpected_error_loading": "‚ùå Âä†ËΩΩÊú¨Âú∞Áä∂ÊÄÅÊó∂Âá∫Áé∞ÊÑèÂ§ñÈîôËØØÔºö",
        "permission_denied_writing": "‚ùå ÂÜôÂÖ•Áä∂ÊÄÅÊñá‰ª∂ÊùÉÈôêË¢´ÊãíÁªùÔºö",
        "filesystem_error_saving": "‚ùå ‰øùÂ≠òÁä∂ÊÄÅÊó∂Êñá‰ª∂Á≥ªÁªüÈîôËØØÔºö",
        "invalid_state_data": "‚ùå Êó†ÊïàÁöÑÁä∂ÊÄÅÊï∞ÊçÆÁ±ªÂûãÔºö",
        "unexpected_error_saving": "‚ùå ‰øùÂ≠òÊú¨Âú∞Áä∂ÊÄÅÊó∂Âá∫Áé∞ÊÑèÂ§ñÈîôËØØÔºö",
        "connection_interrupted": "ËøûÊé•‰∏≠Êñ≠",
        "error": "ÈîôËØØ",
        "auto_reconnect": "Ëá™Âä®ÈáçËøû",
        "sdk_will_reconnect": "AWS IoT SDK Â∞ÜÂ∞ùËØïËá™Âä®ÈáçÊñ∞ËøûÊé•",
        "connection_resumed": "ËøûÊé•Â∑≤ÊÅ¢Â§ç",
        "return_code": "ËøîÂõû‰ª£Á†Å",
        "session_present": "‰ºöËØùÂ≠òÂú®",
        "status": "Áä∂ÊÄÅ",
        "connection_restored": "ËøûÊé•ÊàêÂäüÊÅ¢Â§ç",
        "iot_endpoint_discovery": "üåê AWS IoT Á´ØÁÇπÂèëÁé∞",
        "endpoint_type": "Á´ØÁÇπÁ±ªÂûã",
        "endpoint_type_ats": "iot:Data-ATSÔºàÊé®ËçêÔºâ",
        "endpoint_url": "Á´ØÁÇπ URL",
        "port_mqtt_tls": "Á´ØÂè£Ôºö8883ÔºàMQTT over TLSÔºâ",
        "protocol_mqtt": "ÂçèËÆÆÔºöMQTT 3.1.1 over TLS",
        "error_getting_endpoint": "‚ùå Ëé∑Âèñ IoT Á´ØÁÇπÊó∂Âá∫ÈîôÔºö",
        "available_devices": "üì± ÂèØÁî®ËÆæÂ§áÔºàÊâæÂà∞ {} ‰∏™ÔºâÔºö",
        "type": "Á±ªÂûã",
        "selected_device": "‚úÖ Â∑≤ÈÄâÊã©ËÆæÂ§áÔºö",
        "invalid_selection": "‚ùå Êó†ÊïàÈÄâÊã©„ÄÇËØ∑ËæìÂÖ• 1-{}",
        "enter_valid_number": "‚ùå ËØ∑ËæìÂÖ•ÊúâÊïàÊï∞Â≠ó",
        "operation_cancelled": "üõë Êìç‰ΩúÂ∑≤ÂèñÊ∂à",
        "no_things_found": "‚ùå Êú™ÊâæÂà∞Áâ©ÂìÅ„ÄÇËØ∑ÂÖàËøêË°å setup_sample_data.py",
        "error_selecting_device": "‚ùå ÈÄâÊã©ËÆæÂ§áÊó∂Âá∫ÈîôÔºö",
        "no_certificates_found": "‚ùå Êú™ÊâæÂà∞ËÆæÂ§á '{}' ÁöÑËØÅ‰π¶",
        "run_certificate_manager": "üí° ËøêË°å certificate_manager.py ÂàõÂª∫Âπ∂ÈôÑÂä†ËØÅ‰π¶",
        "using_certificate": "‚úÖ ‰ΩøÁî®ËØÅ‰π¶Ôºö",
        "multiple_certificates_found": "üîê ÊâæÂà∞Â§ö‰∏™ËØÅ‰π¶Ôºö",
        "select_certificate": "ÈÄâÊã©ËØÅ‰π¶ (1-{})Ôºö",
        "invalid_selection_cert": "‚ùå Êó†ÊïàÈÄâÊã©",
        "certificate_files_found": "‚úÖ ÊâæÂà∞ËØÅ‰π¶Êñá‰ª∂Ôºö",
        "certificate": "ËØÅ‰π¶",
        "private_key": "ÁßÅÈí•",
        "cert_dir_not_found": "‚ùå Êú™ÊâæÂà∞ËØÅ‰π¶ÁõÆÂΩïÔºö",
        "run_cert_manager_files": "üí° ËøêË°å certificate_manager.py ÂàõÂª∫ËØÅ‰π¶Êñá‰ª∂",
        "cert_files_not_found": "‚ùå Âú® {} ‰∏≠Êú™ÊâæÂà∞ËØÅ‰π¶Êñá‰ª∂",
        "looking_for_files": "Êü•ÊâæÔºö{}.crt Âíå {}.key",
        "invalid_thing_name": "‚ö†Ô∏è Êó†ÊïàÁöÑÁâ©ÂìÅÂêçÁß∞Ôºö",
        "unsafe_path_detected": "‚ö†Ô∏è Ê£ÄÊµãÂà∞‰∏çÂÆâÂÖ®Ë∑ØÂæÑÔºö",
        "updating_shadow_reported": "üì° Êõ¥Êñ∞ÂΩ±Â≠êÊä•ÂëäÁä∂ÊÄÅ",
        "reported_state_update": "üìä Êä•ÂëäÁä∂ÊÄÅÊõ¥Êñ∞Ôºö",
        "current_local_state_label": "ÂΩìÂâçÊú¨Âú∞Áä∂ÊÄÅ",
        "shadow_update_payload": "ÂΩ±Â≠êÊõ¥Êñ∞Ë¥üËΩΩ",
        "shadow_update_sent": "‚úÖ ÂΩ±Â≠ê UPDATEÔºàÊä•ÂëäÔºâÂ∑≤ÂèëÈÄÅ",
        "failed_update_reported": "‚ùå Êõ¥Êñ∞Êä•ÂëäÁä∂ÊÄÅÂ§±Ë¥•Ôºö",
        "updating_shadow_desired": "üéØ Êõ¥Êñ∞ÂΩ±Â≠êÊúüÊúõÁä∂ÊÄÅ",
        "desired_state_update": "üìä ÊúüÊúõÁä∂ÊÄÅÊõ¥Êñ∞Ôºö",
        "enter_property_name": "ËæìÂÖ•Â±ûÊÄßÂêçÁß∞Ôºö",
        "property_name_required": "‚ùå Â±ûÊÄßÂêçÁß∞ÊòØÂøÖÈúÄÁöÑ",
        "enter_property_value": "ËæìÂÖ•Â±ûÊÄßÂÄºÔºö",
        "property_value_required": "‚ùå Â±ûÊÄßÂÄºÊòØÂøÖÈúÄÁöÑ",
        "desired_state_to_set": "Ë¶ÅËÆæÁΩÆÁöÑÊúüÊúõÁä∂ÊÄÅ",
        "property": "Â±ûÊÄß",
        "value": "ÂÄº",
        "shadow_update_desired_sent": "‚úÖ ÂΩ±Â≠ê UPDATEÔºàÊúüÊúõÔºâÂ∑≤ÂèëÈÄÅ",
        "failed_update_desired": "‚ùå Êõ¥Êñ∞ÊúüÊúõÁä∂ÊÄÅÂ§±Ë¥•Ôºö",
        "simulating_device_changes": "üîÑ Ê®°ÊãüËÆæÂ§áÁä∂ÊÄÅÂèòÂåñ",
        "simulation_options": "üìã Ê®°ÊãüÈÄâÈ°πÔºö",
        "temperature_change": "1. Ê∏©Â∫¶ÂèòÂåñÔºà¬±5¬∞CÔºâ",
        "humidity_change": "2. ÊπøÂ∫¶ÂèòÂåñÔºà¬±10%Ôºâ",
        "status_toggle": "3. Áä∂ÊÄÅÂàáÊç¢ÔºàÂú®Á∫ø/Á¶ªÁ∫øÔºâ",
        "firmware_update": "4. Âõ∫‰ª∂ÁâàÊú¨Êõ¥Êñ∞",
        "custom_property": "5. Ëá™ÂÆö‰πâÂ±ûÊÄßÂèòÂåñ",
        "select_simulation": "ÈÄâÊã©Ê®°Êãü (1-5)Ôºö",
        "invalid_simulation": "‚ùå Êó†ÊïàÈÄâÊã©„ÄÇËØ∑ÈÄâÊã© 1-5„ÄÇ",
        "temperature_changed": "üå°Ô∏è  Ê∏©Â∫¶Â∑≤ÂèòÂåñÔºö{} ‚Üí {}¬∞C",
        "humidity_changed": "üíß ÊπøÂ∫¶Â∑≤ÂèòÂåñÔºö{} ‚Üí {}%",
        "status_changed": "üîÑ Áä∂ÊÄÅÂ∑≤ÂèòÂåñÔºö{} ‚Üí {}",
        "firmware_updated": "üîß Âõ∫‰ª∂Â∑≤Êõ¥Êñ∞Ôºö{} ‚Üí {}",
        "custom_property_changed": "üîß Ëá™ÂÆö‰πâÂ±ûÊÄß '{}' Â∑≤ÂèòÂåñÔºö{} ‚Üí {}",
        "state_change_summary": "üìä Áä∂ÊÄÅÂèòÂåñÊëòË¶ÅÔºö",
        "previous_value": "ÂÖàÂâçÂÄº",
        "new_value": "Êñ∞ÂÄº",
        "local_state_updated_sim": "üíæ Êú¨Âú∞Áä∂ÊÄÅÂ∑≤Êõ¥Êñ∞Âπ∂‰øùÂ≠ò",
        "reporting_to_shadow": "üì° ÂêëÂΩ±Â≠êÊä•ÂëäÂèòÂåñ...",
        "simulation_complete": "‚úÖ Ê®°ÊãüÂÆåÊàê",
        "viewing_message_history": "üìú Êü•ÁúãÂΩ±Â≠êÊ∂àÊÅØÂéÜÂè≤",
        "message_history": "üìä ÂΩ±Â≠êÊ∂àÊÅØÂéÜÂè≤Ôºà{} Êù°Ê∂àÊÅØÔºâÔºö",
        "no_messages_received": "üì≠ Â∞öÊú™Êî∂Âà∞ÂΩ±Â≠êÊ∂àÊÅØ",
        "try_other_operations": "üí° ËØ∑ÂÖàÂ∞ùËØïÂÖ∂‰ªñÊìç‰Ωú‰ª•ÁîüÊàêÂΩ±Â≠êÊ∂àÊÅØ",
        "message_details": "Ê∂àÊÅØËØ¶ÁªÜ‰ø°ÊÅØÔºö",
        "clear_history_prompt": "Ê∏ÖÈô§Ê∂àÊÅØÂéÜÂè≤Ôºü(y/N)Ôºö",
        "history_cleared": "üóëÔ∏è  Ê∂àÊÅØÂéÜÂè≤Â∑≤Ê∏ÖÈô§",
        "history_not_cleared": "üìú Ê∂àÊÅØÂéÜÂè≤Â∑≤‰øùÁïô",
        "disconnecting_from_iot": "üîå Ê≠£Âú®Êñ≠ÂºÄ‰∏é AWS IoT Core ÁöÑËøûÊé•...",
        "disconnection_complete": "‚úÖ Êñ≠ÂºÄËøûÊé•ÂÆåÊàê",
        "session_summary": "üìä ‰ºöËØùÊëòË¶ÅÔºö",
        "total_messages": "Êî∂Âà∞ÁöÑÊ∂àÊÅØÊÄªÊï∞",
        "connection_duration": "ËøûÊé•ÊåÅÁª≠Êó∂Èó¥",
        "shadow_operations": "ÊâßË°åÁöÑÂΩ±Â≠êÊìç‰Ωú",
        "thank_you_message": "ÊÑüË∞¢ÊÇ®Êé¢Á¥¢ AWS IoT ËÆæÂ§áÂΩ±Â≠êÔºÅ",
        "next_steps_suggestions": "üîç ‰∏ã‰∏ÄÊ≠•Ôºö",
        "explore_iot_rules": "‚Ä¢ Êé¢Á¥¢ iot_rules_explorer.py ËøõË°åÊ∂àÊÅØÂ§ÑÁêÜ",
        "try_mqtt_client": "‚Ä¢ Â∞ùËØï mqtt_client_explorer.py ËøõË°åÁõ¥Êé• MQTT ÈÄö‰ø°",
        "check_registry": "‚Ä¢ ‰ΩøÁî® iot_registry_explorer.py Êü•ÁúãËÆæÂ§áËØ¶ÁªÜ‰ø°ÊÅØ",
        "edit_local_state_title": "üìù Êú¨Âú∞Áä∂ÊÄÅÁºñËæëÂô®",
        "current_state": "ÂΩìÂâçÁä∂ÊÄÅÔºö",
        "options": "ÈÄâÈ°πÔºö",
        "edit_individual_values": "1. ÁºñËæëÂçï‰∏™ÂÄº",
        "replace_entire_state": "2. Áî® JSON ÊõøÊç¢Êï¥‰∏™Áä∂ÊÄÅ",
        "cancel": "3. ÂèñÊ∂à",
        "select_option_1_3": "ÈÄâÊã©ÈÄâÈ°π (1-3)Ôºö",
        "current_values": "ÂΩìÂâçÂÄºÔºö",
        "add_new_key": "Ê∑ªÂä†Êñ∞ÈîÆ",
        "done_editing": "ÂÆåÊàêÁºñËæë",
        "select_item_to_edit": "ÈÄâÊã©Ë¶ÅÁºñËæëÁöÑÈ°πÁõÆ (1-{})Ôºö",
        "editing_key": "ÁºñËæë '{}'ÔºàÂΩìÂâçÔºö{}Ôºâ",
        "new_value_prompt": "Êñ∞ÂÄºÔºàÊàñÊåâ Enter ‰øùÊåÅÂΩìÂâçÂÄºÔºâÔºö",
        "updated_key": "‚úÖ Â∑≤Êõ¥Êñ∞ {} = {}",
        "new_key_name": "Êñ∞ÈîÆÂêçÁß∞Ôºö",
        "value_for_key": "'{}' ÁöÑÂÄºÔºö",
        "added_new_key": "‚úÖ Â∑≤Ê∑ªÂä†Êñ∞ÈîÆÔºö{} = {}",
        "enter_json_prompt": "ËæìÂÖ•ÊÇ®ÁöÑ JSON Áä∂ÊÄÅÔºàÂÆåÊàêÂêéÊåâ‰∏§Ê¨° EnterÔºâÔºö",
        "invalid_json": "‚ùå Êó†ÊïàÁöÑ JSONÔºö{}",
        "state_updated_from_json": "‚úÖ Áä∂ÊÄÅÂ∑≤‰ªé JSON Êõ¥Êñ∞",
        "report_updated_state": "ÂêëÂΩ±Â≠êÊä•ÂëäÊõ¥Êñ∞Áä∂ÊÄÅÔºü(y/N)Ôºö",
        "shadow_command_prompt": "üåü ÂΩ±Â≠ê> ",
        "available_commands": "üìñ ÂèØÁî®ÂëΩ‰ª§Ôºö",
        "get_command": "   get                       - ËØ∑Ê±ÇÂΩ±Â≠êÊñáÊ°£",
        "local_command": "   local                     - ÊòæÁ§∫Êú¨Âú∞ËÆæÂ§áÁä∂ÊÄÅ",
        "edit_command": "   edit                      - ÁºñËæëÊú¨Âú∞ËÆæÂ§áÁä∂ÊÄÅ",
        "report_command": "   report                    - ÂêëÂΩ±Â≠êÊä•ÂëäÊú¨Âú∞Áä∂ÊÄÅ",
        "desire_command": "   desire key=val [key=val]  - ËÆæÁΩÆÊúüÊúõÁä∂ÊÄÅ",
        "status_command": "   status                    - ËøûÊé•Áä∂ÊÄÅ",
        "messages_command": "   messages                  - ÂΩ±Â≠êÊ∂àÊÅØÂéÜÂè≤",
        "debug_command": "   debug                     - ËøûÊé•ËØäÊñ≠",
        "quit_command": "   quit                      - ÈÄÄÂá∫",
        "example_desire": "üí° Á§∫‰æãÔºödesire temperature=25.0 status=active",
        "current_local_device_state": "üì± ÂΩìÂâçÊú¨Âú∞ËÆæÂ§áÁä∂ÊÄÅÔºö",
        "usage_desire": "‚ùå Áî®Ê≥ïÔºödesire key=value [key=value...]",
        "example_desire_usage": "üí° Á§∫‰æãÔºödesire temperature=25.0 status=active",
        "setting_desired_state": "üéØ ËÆæÁΩÆÊúüÊúõÁä∂ÊÄÅÔºö{}",
        "no_valid_pairs": "‚ùå Êú™ÊâæÂà∞ÊúâÊïàÁöÑ key=value ÂØπ",
        "shadow_connection_status": "üìä ÂΩ±Â≠êËøûÊé•Áä∂ÊÄÅÔºö",
        "connected": "Â∑≤ËøûÊé•",
        "yes": "‚úÖ ÊòØ",
        "no": "‚ùå Âê¶",
        "shadow_message_history": "üì® ÂΩ±Â≠êÊ∂àÊÅØÂéÜÂè≤Ôºö",
        "unknown_command": "‚ùå Êú™Áü•ÂëΩ‰ª§Ôºö{}„ÄÇËæìÂÖ• 'help' Êü•ÁúãÂèØÁî®ÂëΩ‰ª§„ÄÇ",
        "client_id_prompt": "ËæìÂÖ•Ëá™ÂÆö‰πâÂÆ¢Êà∑Á´Ø IDÔºàÊàñÊåâ Enter Ëá™Âä®ÁîüÊàêÔºâÔºö",
        "client_id_auto_generated": "Ëá™Âä®ÁîüÊàêÁöÑÂÆ¢Êà∑Á´Ø ID",
        "client_id_custom": "Ëá™ÂÆö‰πâÂÆ¢Êà∑Á´Ø ID",
        "client_id_invalid": "‚ùå Êó†ÊïàÁöÑÂÆ¢Êà∑Á´Ø ID„ÄÇÂøÖÈ°ªÊòØ 1-128 ‰∏™Â≠óÁ¨¶Ôºå‰ªÖÈôêÂ≠óÊØçÊï∞Â≠ó„ÄÅËøûÂ≠óÁ¨¶Âíå‰∏ãÂàíÁ∫ø„ÄÇ",
        "client_id_guidelines": "üí° ÂÆ¢Êà∑Á´Ø ID ÊåáÂçóÔºö",
        "client_id_rules": [
            "‚Ä¢ ÊØè‰∏™ËøûÊé•ÂøÖÈ°ªÂîØ‰∏Ä",
            "‚Ä¢ ÂÖÅËÆ∏ 1-128 ‰∏™Â≠óÁ¨¶",
            "‚Ä¢ ‰ΩøÁî®Â≠óÊØçÊï∞Â≠ó„ÄÅËøûÂ≠óÁ¨¶ (-) Âíå‰∏ãÂàíÁ∫ø (_)",
            "‚Ä¢ ÈÅøÂÖçÁ©∫Ê†ºÂíåÁâπÊÆäÂ≠óÁ¨¶",
            "‚Ä¢ Á§∫‰æãÔºömy-device-001, sensor_temp_01",
        ],
    },
    "debug_messages": {
        "en": {
            "debug_raw_topic": "üîç DEBUG: Raw topic:",
            "debug_qos_duplicate": "üîç DEBUG: QoS: {}, Duplicate: {}, Retain: {}",
            "debug_payload_size": "üîç DEBUG: Payload size: {} bytes",
            "debug_message_count": "üîç DEBUG: Message count: {}",
            "debug_unrecognized_topic": "üîç DEBUG: Unrecognized shadow topic pattern",
            "debug_comparing_desired": "üîç DEBUG: Comparing desired state with local state",
            "debug_desired_keys": "üîç DEBUG: Desired keys: {}",
            "debug_no_desired_state": "üîç DEBUG: No desired state in shadow document",
            "debug_normal_for_new": "üîç DEBUG: This is normal for new devices - shadow created on first update",
            "debug_error_code_indicates": "üîç DEBUG: Error code {} indicates: {}",
            "debug_processing_delta": "üîç DEBUG: Processing delta with {} changed properties",
            "debug_delta_keys": "üîç DEBUG: Delta keys: {}",
            "debug_loaded_local_state": "üîç DEBUG: Loaded local state with {} properties",
            "debug_comparing_properties": "üîç DEBUG: Comparing {} desired properties",
            "debug_differences_found": "üîç DEBUG: Found {} differences out of {} desired properties",
            "debug_type_change": "üîç DEBUG: Type change: {} ‚Üí {}",
            "debug_updated_properties": "üîç DEBUG: Updated {} properties in local state",
            "debug_new_state_size": "üîç DEBUG: New local state size: {} properties",
            "debug_all_match": "üîç DEBUG: All {} desired properties match local state",
            "debug_setting_up_state": "üîç DEBUG: Setting up local state file: {}",
            "debug_cert_directory": "üîç DEBUG: Certificate directory: {}",
            "debug_file_exists": "üîç DEBUG: File exists: {}",
            "debug_created_new_state": "üîç DEBUG: Created new state file with {} properties",
            "debug_loaded_existing_state": "üîç DEBUG: Loaded existing state file with {} properties",
            "debug_file_size": "üîç DEBUG: File size: {} bytes",
            "debug_calling_describe_endpoint": "üîç DEBUG: Calling describe_endpoint API",
            "debug_input_parameters": "üì• Input Parameters: {'endpointType': 'iot:Data-ATS'}",
            "debug_api_response": "üì§ API Response: {}",
            "debug_full_traceback": "üîç DEBUG: Full traceback:",
            "debug_calling_list_things": "üîç DEBUG: Calling list_things API",
            "debug_input_params_none": "üì• Input Parameters: None",
            "debug_found_things": "üì§ API Response: Found {} Things",
            "debug_thing_names": "üìä Thing Names: {}",
            "debug_calling_list_principals": "üîç DEBUG: Calling list_thing_principals API",
            "debug_input_thing_name": "üì• Input Parameters: {'thingName': '{}'}",
            "debug_found_principals": "üì§ API Response: Found {} principals, {} certificates",
            "debug_cert_arns": "üìä Certificate ARNs: {}",
            "debug_shadow_connection_setup": "üîç DEBUG: Shadow MQTT Connection Setup",
            "debug_thing_name": "   Thing Name: {}",
            "debug_cert_file": "   Certificate File: {}",
            "debug_private_key_file": "   Private Key File: {}",
            "debug_endpoint": "   Endpoint: {}",
            "debug_connection_result": "üîç DEBUG: Connection result: {}",
            "debug_subscribing_topic": "üîç DEBUG: Subscribing to shadow topic: {}",
            "debug_subscription_successful": "üîç DEBUG: Subscription successful, packet ID: {}",
            "debug_publishing_shadow_get": "üîç DEBUG: Publishing shadow get request",
            "debug_topic": "   Topic: {}",
            "debug_payload_empty": "   Payload: Empty (shadow get requests have no payload)",
            "debug_publishing_shadow_update": "üîç DEBUG: Publishing shadow update request",
            "debug_payload_json": "   Payload: {}",
            "debug_update_type": "   Update Type: {}",
            "debug_simulation_type": "üîç DEBUG: Simulation type: {}",
            "debug_property_change": "üîç DEBUG: Property '{}' changed from {} to {}",
            "debug_state_before": "üîç DEBUG: State before: {}",
            "debug_state_after": "üîç DEBUG: State after: {}",
        },
        "es": {
            "debug_raw_topic": "üîç DEBUG: T√≥pico crudo:",
            "debug_qos_duplicate": "üîç DEBUG: QoS: {}, Duplicado: {}, Retener: {}",
            "debug_payload_size": "üîç DEBUG: Tama√±o de payload: {} bytes",
            "debug_message_count": "üîç DEBUG: Conteo de mensajes: {}",
            "debug_unrecognized_topic": "üîç DEBUG: Patr√≥n de t√≥pico shadow no reconocido",
            "debug_comparing_desired": "üîç DEBUG: Comparando estado deseado con estado local",
            "debug_desired_keys": "üîç DEBUG: Claves deseadas: {}",
            "debug_no_desired_state": "üîç DEBUG: No hay estado deseado en documento shadow",
            "debug_normal_for_new": "üîç DEBUG: Esto es normal para dispositivos nuevos - shadow creado en primera actualizaci√≥n",
            "debug_error_code_indicates": "üîç DEBUG: C√≥digo de error {} indica: {}",
            "debug_processing_delta": "üîç DEBUG: Procesando delta con {} propiedades cambiadas",
            "debug_delta_keys": "üîç DEBUG: Claves delta: {}",
            "debug_loaded_local_state": "üîç DEBUG: Estado local cargado con {} propiedades",
            "debug_comparing_properties": "üîç DEBUG: Comparando {} propiedades deseadas",
            "debug_differences_found": "üîç DEBUG: Encontradas {} diferencias de {} propiedades deseadas",
            "debug_type_change": "üîç DEBUG: Cambio de tipo: {} ‚Üí {}",
            "debug_updated_properties": "üîç DEBUG: Actualizadas {} propiedades en estado local",
            "debug_new_state_size": "üîç DEBUG: Nuevo tama√±o de estado local: {} propiedades",
            "debug_all_match": "üîç DEBUG: Todas las {} propiedades deseadas coinciden con estado local",
            "debug_setting_up_state": "üîç DEBUG: Configurando archivo de estado local: {}",
            "debug_cert_directory": "üîç DEBUG: Directorio de certificados: {}",
            "debug_file_exists": "üîç DEBUG: Archivo existe: {}",
            "debug_created_new_state": "üîç DEBUG: Creado nuevo archivo de estado con {} propiedades",
            "debug_loaded_existing_state": "üîç DEBUG: Cargado archivo de estado existente con {} propiedades",
            "debug_file_size": "üîç DEBUG: Tama√±o de archivo: {} bytes",
            "debug_calling_describe_endpoint": "üîç DEBUG: Llamando API describe_endpoint",
            "debug_input_parameters": "üì• Par√°metros de Entrada: {'endpointType': 'iot:Data-ATS'}",
            "debug_api_response": "üì§ Respuesta de API: {}",
            "debug_full_traceback": "üîç DEBUG: Traza completa:",
            "debug_calling_list_things": "üîç DEBUG: Llamando API list_things",
            "debug_input_params_none": "üì• Par√°metros de Entrada: Ninguno",
            "debug_found_things": "üì§ Respuesta de API: Encontrados {} Things",
            "debug_thing_names": "üìä Nombres de Things: {}",
            "debug_calling_list_principals": "üîç DEBUG: Llamando API list_thing_principals",
            "debug_input_thing_name": "üì• Par√°metros de Entrada: {'thingName': '{}'}",
            "debug_found_principals": "üì§ Respuesta de API: Encontrados {} principales, {} certificados",
            "debug_cert_arns": "üìä ARNs de Certificados: {}",
            "debug_shadow_connection_setup": "üîç DEBUG: Configuraci√≥n de Conexi√≥n MQTT Shadow",
            "debug_thing_name": "   Nombre del Thing: {}",
            "debug_cert_file": "   Archivo de Certificado: {}",
            "debug_private_key_file": "   Archivo de Clave Privada: {}",
            "debug_endpoint": "   Endpoint: {}",
            "debug_connection_result": "üîç DEBUG: Resultado de conexi√≥n: {}",
            "debug_subscribing_topic": "üîç DEBUG: Suscribi√©ndose a t√≥pico shadow: {}",
            "debug_subscription_successful": "üîç DEBUG: Suscripci√≥n exitosa, ID de paquete: {}",
            "debug_publishing_shadow_get": "üîç DEBUG: Publicando solicitud shadow get",
            "debug_topic": "   T√≥pico: {}",
            "debug_payload_empty": "   Payload: Vac√≠o (solicitudes shadow get no tienen payload)",
            "debug_publishing_shadow_update": "üîç DEBUG: Publicando solicitud shadow update",
            "debug_payload_json": "   Payload: {}",
            "debug_update_type": "   Tipo de Actualizaci√≥n: {}",
            "debug_simulation_type": "üîç DEBUG: Tipo de simulaci√≥n: {}",
            "debug_property_change": "üîç DEBUG: Propiedad '{}' cambiada de {} a {}",
            "debug_state_before": "üîç DEBUG: Estado antes: {}",
            "debug_state_after": "üîç DEBUG: Estado despu√©s: {}",
        },
        "pt-BR": {
            "debug_raw_topic": "üîç DEBUG: T√≥pico bruto:",
            "debug_qos_duplicate": "üîç DEBUG: QoS: {}, Duplicado: {}, Reter: {}",
            "debug_payload_size": "üîç DEBUG: Tamanho do payload: {} bytes",
            "debug_message_count": "üîç DEBUG: Contagem de mensagens: {}",
            "debug_unrecognized_topic": "üîç DEBUG: Padr√£o de t√≥pico shadow n√£o reconhecido",
            "debug_comparing_desired": "üîç DEBUG: Comparando estado desejado com estado local",
            "debug_desired_keys": "üîç DEBUG: Chaves desejadas: {}",
            "debug_no_desired_state": "üîç DEBUG: Nenhum estado desejado no documento shadow",
            "debug_normal_for_new": "üîç DEBUG: Isso √© normal para novos dispositivos - shadow criado na primeira atualiza√ß√£o",
            "debug_error_code_indicates": "üîç DEBUG: C√≥digo de erro {} indica: {}",
            "debug_processing_delta": "üîç DEBUG: Processando delta com {} propriedades alteradas",
            "debug_delta_keys": "üîç DEBUG: Chaves delta: {}",
            "debug_loaded_local_state": "üîç DEBUG: Estado local carregado com {} propriedades",
            "debug_comparing_properties": "üîç DEBUG: Comparando {} propriedades desejadas",
            "debug_differences_found": "üîç DEBUG: Encontradas {} diferen√ßas de {} propriedades desejadas",
            "debug_type_change": "üîç DEBUG: Mudan√ßa de tipo: {} ‚Üí {}",
            "debug_updated_properties": "üîç DEBUG: Atualizadas {} propriedades no estado local",
            "debug_new_state_size": "üîç DEBUG: Novo tamanho do estado local: {} propriedades",
            "debug_all_match": "üîç DEBUG: Todas as {} propriedades desejadas coincidem com o estado local",
            "debug_setting_up_state": "üîç DEBUG: Configurando arquivo de estado local: {}",
            "debug_cert_directory": "üîç DEBUG: Diret√≥rio de certificados: {}",
            "debug_file_exists": "üîç DEBUG: Arquivo existe: {}",
            "debug_created_new_state": "üîç DEBUG: Criado novo arquivo de estado com {} propriedades",
            "debug_loaded_existing_state": "üîç DEBUG: Carregado arquivo de estado existente com {} propriedades",
            "debug_file_size": "üîç DEBUG: Tamanho do arquivo: {} bytes",
            "debug_calling_describe_endpoint": "üîç DEBUG: Chamando API describe_endpoint",
            "debug_input_parameters": "üì• Par√¢metros de Entrada: {'endpointType': 'iot:Data-ATS'}",
            "debug_api_response": "üì§ Resposta da API: {}",
            "debug_full_traceback": "üîç DEBUG: Rastreamento completo:",
            "debug_calling_list_things": "üîç DEBUG: Chamando API list_things",
            "debug_input_params_none": "üì• Par√¢metros de Entrada: Nenhum",
            "debug_found_things": "üì§ Resposta da API: Encontrados {} Things",
            "debug_thing_names": "üìä Nomes dos Things: {}",
            "debug_calling_list_principals": "üîç DEBUG: Chamando API list_thing_principals",
            "debug_input_thing_name": "üì• Par√¢metros de Entrada: {'thingName': '{}'}",
            "debug_found_principals": "üì§ Resposta da API: Encontrados {} principais, {} certificados",
            "debug_cert_arns": "üìä ARNs dos Certificados: {}",
            "debug_shadow_connection_setup": "üîç DEBUG: Configura√ß√£o da Conex√£o MQTT Shadow",
            "debug_thing_name": "   Nome do Thing: {}",
            "debug_cert_file": "   Arquivo de Certificado: {}",
            "debug_private_key_file": "   Arquivo de Chave Privada: {}",
            "debug_endpoint": "   Endpoint: {}",
            "debug_connection_result": "üîç DEBUG: Resultado da conex√£o: {}",
            "debug_subscribing_topic": "üîç DEBUG: Inscrevendo-se no t√≥pico shadow: {}",
            "debug_subscription_successful": "üîç DEBUG: Inscri√ß√£o bem-sucedida, ID do pacote: {}",
            "debug_publishing_shadow_get": "üîç DEBUG: Publicando solicita√ß√£o shadow get",
            "debug_topic": "   T√≥pico: {}",
            "debug_payload_empty": "   Payload: Vazio (solicita√ß√µes shadow get n√£o t√™m payload)",
            "debug_publishing_shadow_update": "üîç DEBUG: Publicando solicita√ß√£o shadow update",
            "debug_payload_json": "   Payload: {}",
            "debug_update_type": "   Tipo de Atualiza√ß√£o: {}",
            "debug_simulation_type": "üîç DEBUG: Tipo de simula√ß√£o: {}",
            "debug_property_change": "üîç DEBUG: Propriedade '{}' alterada de {} para {}",
            "debug_state_before": "üîç DEBUG: Estado antes: {}",
            "debug_state_after": "üîç DEBUG: Estado depois: {}",
        },
        "ja": {
            "debug_raw_topic": "üîç DEBUG: Áîü„Éà„Éî„ÉÉ„ÇØ:",
            "debug_qos_duplicate": "üîç DEBUG: QoS: {}, ÈáçË§á: {}, ‰øùÊåÅ: {}",
            "debug_payload_size": "üîç DEBUG: „Éö„Ç§„É≠„Éº„Éâ„Çµ„Ç§„Ç∫: {} „Éê„Ç§„Éà",
            "debug_message_count": "üîç DEBUG: „É°„ÉÉ„Çª„Éº„Ç∏Êï∞: {}",
            "debug_unrecognized_topic": "üîç DEBUG: Ë™çË≠ò„Åï„Çå„Å™„ÅÑ„Ç∑„É£„Éâ„Ç¶„Éà„Éî„ÉÉ„ÇØ„Éë„Çø„Éº„É≥",
            "debug_comparing_desired": "üîç DEBUG: Â∏åÊúõÁä∂ÊÖã„Å®„É≠„Éº„Ç´„É´Áä∂ÊÖã„ÇíÊØîËºÉ‰∏≠",
            "debug_desired_keys": "üîç DEBUG: Â∏åÊúõ„Ç≠„Éº: {}",
            "debug_no_desired_state": "üîç DEBUG: „Ç∑„É£„Éâ„Ç¶„Éâ„Ç≠„É•„É°„É≥„Éà„Å´Â∏åÊúõÁä∂ÊÖã„Åå„ÅÇ„Çä„Åæ„Åõ„Çì",
            "debug_normal_for_new": "üîç DEBUG: „Åì„Çå„ÅØÊñ∞„Åó„ÅÑ„Éá„Éê„Ç§„Çπ„Åß„ÅØÊ≠£Â∏∏„Åß„Åô - ÊúÄÂàù„ÅÆÊõ¥Êñ∞„Åß„Ç∑„É£„Éâ„Ç¶„Åå‰ΩúÊàê„Åï„Çå„Åæ„Åô",
            "debug_error_code_indicates": "üîç DEBUG: „Ç®„É©„Éº„Ç≥„Éº„Éâ {} „ÅØÊ¨°„ÇíÁ§∫„Åó„Åæ„Åô: {}",
            "debug_processing_delta": "üîç DEBUG: {} ÂÄã„ÅÆÂ§âÊõ¥„Åï„Çå„Åü„Éó„É≠„Éë„ÉÜ„Ç£„Åß„Éá„É´„Çø„ÇíÂá¶ÁêÜ‰∏≠",
            "debug_delta_keys": "üîç DEBUG: „Éá„É´„Çø„Ç≠„Éº: {}",
            "debug_loaded_local_state": "üîç DEBUG: {} ÂÄã„ÅÆ„Éó„É≠„Éë„ÉÜ„Ç£„Åß„É≠„Éº„Ç´„É´Áä∂ÊÖã„Çí„É≠„Éº„Éâ",
            "debug_comparing_properties": "üîç DEBUG: {} ÂÄã„ÅÆÂ∏åÊúõ„Éó„É≠„Éë„ÉÜ„Ç£„ÇíÊØîËºÉ‰∏≠",
            "debug_differences_found": "üîç DEBUG: {} ÂÄã„ÅÆÂ∏åÊúõ„Éó„É≠„Éë„ÉÜ„Ç£„ÅÆ„ÅÜ„Å° {} ÂÄã„ÅÆÈÅï„ÅÑ„ÇíÁô∫Ë¶ã",
            "debug_type_change": "üîç DEBUG: „Çø„Ç§„ÉóÂ§âÊõ¥: {} ‚Üí {}",
            "debug_updated_properties": "üîç DEBUG: „É≠„Éº„Ç´„É´Áä∂ÊÖã„Åß {} ÂÄã„ÅÆ„Éó„É≠„Éë„ÉÜ„Ç£„ÇíÊõ¥Êñ∞",
            "debug_new_state_size": "üîç DEBUG: Êñ∞„Åó„ÅÑ„É≠„Éº„Ç´„É´Áä∂ÊÖã„Çµ„Ç§„Ç∫: {} ÂÄã„ÅÆ„Éó„É≠„Éë„ÉÜ„Ç£",
            "debug_all_match": "üîç DEBUG: „Åô„Åπ„Å¶„ÅÆ {} ÂÄã„ÅÆÂ∏åÊúõ„Éó„É≠„Éë„ÉÜ„Ç£„Åå„É≠„Éº„Ç´„É´Áä∂ÊÖã„Å®‰∏ÄËá¥",
            "debug_setting_up_state": "üîç DEBUG: „É≠„Éº„Ç´„É´Áä∂ÊÖã„Éï„Ç°„Ç§„É´„ÇíË®≠ÂÆö‰∏≠: {}",
            "debug_cert_directory": "üîç DEBUG: Ë®ºÊòéÊõ∏„Éá„Ç£„É¨„ÇØ„Éà„É™: {}",
            "debug_file_exists": "üîç DEBUG: „Éï„Ç°„Ç§„É´Â≠òÂú®: {}",
            "debug_created_new_state": "üîç DEBUG: {} ÂÄã„ÅÆ„Éó„É≠„Éë„ÉÜ„Ç£„ÅßÊñ∞„Åó„ÅÑÁä∂ÊÖã„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê",
            "debug_loaded_existing_state": "üîç DEBUG: {} ÂÄã„ÅÆ„Éó„É≠„Éë„ÉÜ„Ç£„ÅßÊó¢Â≠ò„ÅÆÁä∂ÊÖã„Éï„Ç°„Ç§„É´„Çí„É≠„Éº„Éâ",
            "debug_file_size": "üîç DEBUG: „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫: {} „Éê„Ç§„Éà",
            "debug_calling_describe_endpoint": "üîç DEBUG: describe_endpoint API „ÇíÂëº„Å≥Âá∫„Åó‰∏≠",
            "debug_input_parameters": "üì• ÂÖ•Âäõ„Éë„É©„É°„Éº„Çø: {'endpointType': 'iot:Data-ATS'}",
            "debug_api_response": "üì§ API „É¨„Çπ„Éù„É≥„Çπ: {}",
            "debug_full_traceback": "üîç DEBUG: ÂÆåÂÖ®„Å™„Éà„É¨„Éº„Çπ„Éê„ÉÉ„ÇØ:",
            "debug_calling_list_things": "üîç DEBUG: list_things API „ÇíÂëº„Å≥Âá∫„Åó‰∏≠",
            "debug_input_params_none": "üì• ÂÖ•Âäõ„Éë„É©„É°„Éº„Çø: „Å™„Åó",
            "debug_found_things": "üì§ API „É¨„Çπ„Éù„É≥„Çπ: {} ÂÄã„ÅÆ Thing „ÇíÁô∫Ë¶ã",
            "debug_thing_names": "üìä Thing Âêç: {}",
            "debug_calling_list_principals": "üîç DEBUG: list_thing_principals API „ÇíÂëº„Å≥Âá∫„Åó‰∏≠",
            "debug_input_thing_name": "üì• ÂÖ•Âäõ„Éë„É©„É°„Éº„Çø: {'thingName': '{}'}",
            "debug_found_principals": "üì§ API „É¨„Çπ„Éù„É≥„Çπ: {} ÂÄã„ÅÆ„Éó„É™„É≥„Ç∑„Éë„É´„ÄÅ{} ÂÄã„ÅÆË®ºÊòéÊõ∏„ÇíÁô∫Ë¶ã",
            "debug_cert_arns": "üìä Ë®ºÊòéÊõ∏ ARN: {}",
            "debug_shadow_connection_setup": "üîç DEBUG: „Ç∑„É£„Éâ„Ç¶ MQTT Êé•Á∂öË®≠ÂÆö",
            "debug_thing_name": "   Thing Âêç: {}",
            "debug_cert_file": "   Ë®ºÊòéÊõ∏„Éï„Ç°„Ç§„É´: {}",
            "debug_private_key_file": "   ÁßòÂØÜÈçµ„Éï„Ç°„Ç§„É´: {}",
            "debug_endpoint": "   „Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà: {}",
            "debug_connection_result": "üîç DEBUG: Êé•Á∂öÁµêÊûú: {}",
            "debug_subscribing_topic": "üîç DEBUG: „Ç∑„É£„Éâ„Ç¶„Éà„Éî„ÉÉ„ÇØ„ÇíË≥ºË™≠‰∏≠: {}",
            "debug_subscription_successful": "üîç DEBUG: Ë≥ºË™≠ÊàêÂäü„ÄÅ„Éë„Ç±„ÉÉ„Éà ID: {}",
            "debug_publishing_shadow_get": "üîç DEBUG: „Ç∑„É£„Éâ„Ç¶ get „É™„ÇØ„Ç®„Çπ„Éà„ÇíÂÖ¨Èñã‰∏≠",
            "debug_topic": "   „Éà„Éî„ÉÉ„ÇØ: {}",
            "debug_payload_empty": "   „Éö„Ç§„É≠„Éº„Éâ: Á©∫Ôºà„Ç∑„É£„Éâ„Ç¶ get „É™„ÇØ„Ç®„Çπ„Éà„Å´„ÅØ„Éö„Ç§„É≠„Éº„Éâ„Åå„ÅÇ„Çä„Åæ„Åõ„ÇìÔºâ",
            "debug_publishing_shadow_update": "üîç DEBUG: „Ç∑„É£„Éâ„Ç¶ update „É™„ÇØ„Ç®„Çπ„Éà„ÇíÂÖ¨Èñã‰∏≠",
            "debug_payload_json": "   „Éö„Ç§„É≠„Éº„Éâ: {}",
            "debug_update_type": "   Êõ¥Êñ∞„Çø„Ç§„Éó: {}",
            "debug_simulation_type": "üîç DEBUG: „Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥„Çø„Ç§„Éó: {}",
            "debug_property_change": "üîç DEBUG: „Éó„É≠„Éë„ÉÜ„Ç£ '{}' „Åå {} „Åã„Çâ {} „Å´Â§âÊõ¥",
            "debug_state_before": "üîç DEBUG: Â§âÊõ¥Ââç„ÅÆÁä∂ÊÖã: {}",
            "debug_state_after": "üîç DEBUG: Â§âÊõ¥Âæå„ÅÆÁä∂ÊÖã: {}",
        },
        "zh-CN": {
            "debug_raw_topic": "üîç DEBUG: ÂéüÂßã‰∏ªÈ¢ò:",
            "debug_qos_duplicate": "üîç DEBUG: QoS: {}, ÈáçÂ§ç: {}, ‰øùÁïô: {}",
            "debug_payload_size": "üîç DEBUG: Ë¥üËΩΩÂ§ßÂ∞è: {} Â≠óËäÇ",
            "debug_message_count": "üîç DEBUG: Ê∂àÊÅØËÆ°Êï∞: {}",
            "debug_unrecognized_topic": "üîç DEBUG: Êó†Ê≥ïËØÜÂà´ÁöÑÂΩ±Â≠ê‰∏ªÈ¢òÊ®°Âºè",
            "debug_comparing_desired": "üîç DEBUG: Ê≠£Âú®ÊØîËæÉÊúüÊúõÁä∂ÊÄÅ‰∏éÊú¨Âú∞Áä∂ÊÄÅ",
            "debug_desired_keys": "üîç DEBUG: ÊúüÊúõÈîÆ: {}",
            "debug_no_desired_state": "üîç DEBUG: ÂΩ±Â≠êÊñáÊ°£‰∏≠Ê≤°ÊúâÊúüÊúõÁä∂ÊÄÅ",
            "debug_normal_for_new": "üîç DEBUG: ËøôÂØπÊñ∞ËÆæÂ§áÊòØÊ≠£Â∏∏ÁöÑ - ÂΩ±Â≠êÂú®È¶ñÊ¨°Êõ¥Êñ∞Êó∂ÂàõÂª∫",
            "debug_error_code_indicates": "üîç DEBUG: ÈîôËØØ‰ª£Á†Å {} Ë°®Á§∫: {}",
            "debug_processing_delta": "üîç DEBUG: Ê≠£Âú®Â§ÑÁêÜÂåÖÂê´ {} ‰∏™Êõ¥ÊîπÂ±ûÊÄßÁöÑÂ¢ûÈáè",
            "debug_delta_keys": "üîç DEBUG: Â¢ûÈáèÈîÆ: {}",
            "debug_loaded_local_state": "üîç DEBUG: Â∑≤Âä†ËΩΩÂåÖÂê´ {} ‰∏™Â±ûÊÄßÁöÑÊú¨Âú∞Áä∂ÊÄÅ",
            "debug_comparing_properties": "üîç DEBUG: Ê≠£Âú®ÊØîËæÉ {} ‰∏™ÊúüÊúõÂ±ûÊÄß",
            "debug_differences_found": "üîç DEBUG: Âú® {} ‰∏™ÊúüÊúõÂ±ûÊÄß‰∏≠ÂèëÁé∞ {} ‰∏™Â∑ÆÂºÇ",
            "debug_type_change": "üîç DEBUG: Á±ªÂûãÊõ¥Êîπ: {} ‚Üí {}",
            "debug_updated_properties": "üîç DEBUG: Âú®Êú¨Âú∞Áä∂ÊÄÅ‰∏≠Êõ¥Êñ∞‰∫Ü {} ‰∏™Â±ûÊÄß",
            "debug_new_state_size": "üîç DEBUG: Êñ∞Êú¨Âú∞Áä∂ÊÄÅÂ§ßÂ∞è: {} ‰∏™Â±ûÊÄß",
            "debug_all_match": "üîç DEBUG: ÊâÄÊúâ {} ‰∏™ÊúüÊúõÂ±ûÊÄßÈÉΩ‰∏éÊú¨Âú∞Áä∂ÊÄÅÂåπÈÖç",
            "debug_setting_up_state": "üîç DEBUG: Ê≠£Âú®ËÆæÁΩÆÊú¨Âú∞Áä∂ÊÄÅÊñá‰ª∂: {}",
            "debug_cert_directory": "üîç DEBUG: ËØÅ‰π¶ÁõÆÂΩï: {}",
            "debug_file_exists": "üîç DEBUG: Êñá‰ª∂Â≠òÂú®: {}",
            "debug_created_new_state": "üîç DEBUG: ÂàõÂª∫‰∫ÜÂåÖÂê´ {} ‰∏™Â±ûÊÄßÁöÑÊñ∞Áä∂ÊÄÅÊñá‰ª∂",
            "debug_loaded_existing_state": "üîç DEBUG: Âä†ËΩΩ‰∫ÜÂåÖÂê´ {} ‰∏™Â±ûÊÄßÁöÑÁé∞ÊúâÁä∂ÊÄÅÊñá‰ª∂",
            "debug_file_size": "üîç DEBUG: Êñá‰ª∂Â§ßÂ∞è: {} Â≠óËäÇ",
            "debug_calling_describe_endpoint": "üîç DEBUG: Ê≠£Âú®Ë∞ÉÁî® describe_endpoint API",
            "debug_input_parameters": "üì• ËæìÂÖ•ÂèÇÊï∞: {'endpointType': 'iot:Data-ATS'}",
            "debug_api_response": "üì§ API ÂìçÂ∫î: {}",
            "debug_full_traceback": "üîç DEBUG: ÂÆåÊï¥ÂõûÊ∫Ø:",
            "debug_calling_list_things": "üîç DEBUG: Ê≠£Âú®Ë∞ÉÁî® list_things API",
            "debug_input_params_none": "üì• ËæìÂÖ•ÂèÇÊï∞: Êó†",
            "debug_found_things": "üì§ API ÂìçÂ∫î: ÊâæÂà∞ {} ‰∏™ Thing",
            "debug_thing_names": "üìä Thing ÂêçÁß∞: {}",
            "debug_calling_list_principals": "üîç DEBUG: Ê≠£Âú®Ë∞ÉÁî® list_thing_principals API",
            "debug_input_thing_name": "üì• ËæìÂÖ•ÂèÇÊï∞: {'thingName': '{}'}",
            "debug_found_principals": "üì§ API ÂìçÂ∫î: ÊâæÂà∞ {} ‰∏™‰∏ª‰ΩìÔºå{} ‰∏™ËØÅ‰π¶",
            "debug_cert_arns": "üìä ËØÅ‰π¶ ARN: {}",
            "debug_shadow_connection_setup": "üîç DEBUG: ÂΩ±Â≠ê MQTT ËøûÊé•ËÆæÁΩÆ",
            "debug_thing_name": "   Thing ÂêçÁß∞: {}",
            "debug_cert_file": "   ËØÅ‰π¶Êñá‰ª∂: {}",
            "debug_private_key_file": "   ÁßÅÈí•Êñá‰ª∂: {}",
            "debug_endpoint": "   Á´ØÁÇπ: {}",
            "debug_connection_result": "üîç DEBUG: ËøûÊé•ÁªìÊûú: {}",
            "debug_subscribing_topic": "üîç DEBUG: Ê≠£Âú®ËÆ¢ÈòÖÂΩ±Â≠ê‰∏ªÈ¢ò: {}",
            "debug_subscription_successful": "üîç DEBUG: ËÆ¢ÈòÖÊàêÂäüÔºåÊï∞ÊçÆÂåÖ ID: {}",
            "debug_publishing_shadow_get": "üîç DEBUG: Ê≠£Âú®ÂèëÂ∏ÉÂΩ±Â≠ê get ËØ∑Ê±Ç",
            "debug_topic": "   ‰∏ªÈ¢ò: {}",
            "debug_payload_empty": "   Ë¥üËΩΩ: Á©∫ÔºàÂΩ±Â≠ê get ËØ∑Ê±ÇÊ≤°ÊúâË¥üËΩΩÔºâ",
            "debug_publishing_shadow_update": "üîç DEBUG: Ê≠£Âú®ÂèëÂ∏ÉÂΩ±Â≠ê update ËØ∑Ê±Ç",
            "debug_payload_json": "   Ë¥üËΩΩ: {}",
            "debug_update_type": "   Êõ¥Êñ∞Á±ªÂûã: {}",
            "debug_simulation_type": "üîç DEBUG: Ê®°ÊãüÁ±ªÂûã: {}",
            "debug_property_change": "üîç DEBUG: Â±ûÊÄß '{}' ‰ªé {} Êõ¥Êîπ‰∏∫ {}",
            "debug_state_before": "üîç DEBUG: Êõ¥ÊîπÂâçÁä∂ÊÄÅ: {}",
            "debug_state_after": "üîç DEBUG: Êõ¥ÊîπÂêéÁä∂ÊÄÅ: {}",
        },
        "ko": {
            "debug_raw_topic": "üîç DEBUG: ÏõêÏãú ÌÜ†ÌîΩ:",
            "debug_qos_duplicate": "üîç DEBUG: QoS: {}, Ï§ëÎ≥µ: {}, Î≥¥Ïú†: {}",
            "debug_payload_size": "üîç DEBUG: ÌéòÏù¥Î°úÎìú ÌÅ¨Í∏∞: {} Î∞îÏù¥Ìä∏",
            "debug_message_count": "üîç DEBUG: Î©îÏãúÏßÄ Ïàò: {}",
            "debug_unrecognized_topic": "üîç DEBUG: Ïù∏ÏãùÎêòÏßÄ ÏïäÎäî ÏÑÄÎèÑÏö∞ ÌÜ†ÌîΩ Ìå®ÌÑ¥",
            "debug_comparing_desired": "üîç DEBUG: ÏõêÌïòÎäî ÏÉÅÌÉúÏôÄ Î°úÏª¨ ÏÉÅÌÉú ÎπÑÍµê Ï§ë",
            "debug_desired_keys": "üîç DEBUG: ÏõêÌïòÎäî ÌÇ§: {}",
            "debug_no_desired_state": "üîç DEBUG: ÏÑÄÎèÑÏö∞ Î¨∏ÏÑúÏóê ÏõêÌïòÎäî ÏÉÅÌÉúÍ∞Ä ÏóÜÏùå",
            "debug_normal_for_new": "üîç DEBUG: ÏÉà Ïû•ÏπòÏóêÏÑúÎäî Ï†ïÏÉÅÏûÖÎãàÎã§ - Ï≤´ Î≤àÏß∏ ÏóÖÎç∞Ïù¥Ìä∏ÏóêÏÑú ÏÑÄÎèÑÏö∞Í∞Ä ÏÉùÏÑ±Îê®",
            "debug_error_code_indicates": "üîç DEBUG: Ïò§Î•ò ÏΩîÎìú {}Îäî Îã§ÏùåÏùÑ ÎÇòÌÉÄÎÉÖÎãàÎã§: {}",
            "debug_processing_delta": "üîç DEBUG: {} Í∞úÏùò Î≥ÄÍ≤ΩÎêú ÏÜçÏÑ±ÏúºÎ°ú Îç∏ÌÉÄ Ï≤òÎ¶¨ Ï§ë",
            "debug_delta_keys": "üîç DEBUG: Îç∏ÌÉÄ ÌÇ§: {}",
            "debug_loaded_local_state": "üîç DEBUG: {} Í∞úÏùò ÏÜçÏÑ±ÏúºÎ°ú Î°úÏª¨ ÏÉÅÌÉú Î°úÎìúÎê®",
            "debug_comparing_properties": "üîç DEBUG: {} Í∞úÏùò ÏõêÌïòÎäî ÏÜçÏÑ± ÎπÑÍµê Ï§ë",
            "debug_differences_found": "üîç DEBUG: {} Í∞úÏùò ÏõêÌïòÎäî ÏÜçÏÑ± Ï§ë {} Í∞úÏùò Ï∞®Ïù¥Ï†ê Î∞úÍ≤¨",
            "debug_type_change": "üîç DEBUG: ÌÉÄÏûÖ Î≥ÄÍ≤Ω: {} ‚Üí {}",
            "debug_updated_properties": "üîç DEBUG: Î°úÏª¨ ÏÉÅÌÉúÏóêÏÑú {} Í∞úÏùò ÏÜçÏÑ± ÏóÖÎç∞Ïù¥Ìä∏Îê®",
            "debug_new_state_size": "üîç DEBUG: ÏÉà Î°úÏª¨ ÏÉÅÌÉú ÌÅ¨Í∏∞: {} Í∞úÏùò ÏÜçÏÑ±",
            "debug_all_match": "üîç DEBUG: Î™®Îì† {} Í∞úÏùò ÏõêÌïòÎäî ÏÜçÏÑ±Ïù¥ Î°úÏª¨ ÏÉÅÌÉúÏôÄ ÏùºÏπò",
            "debug_setting_up_state": "üîç DEBUG: Î°úÏª¨ ÏÉÅÌÉú ÌååÏùº ÏÑ§Ï†ï Ï§ë: {}",
            "debug_cert_directory": "üîç DEBUG: Ïù∏Ï¶ùÏÑú ÎîîÎ†âÌÜ†Î¶¨: {}",
            "debug_file_exists": "üîç DEBUG: ÌååÏùº Ï°¥Ïû¨: {}",
            "debug_created_new_state": "üîç DEBUG: {} Í∞úÏùò ÏÜçÏÑ±ÏúºÎ°ú ÏÉà ÏÉÅÌÉú ÌååÏùº ÏÉùÏÑ±Îê®",
            "debug_loaded_existing_state": "üîç DEBUG: {} Í∞úÏùò ÏÜçÏÑ±ÏúºÎ°ú Í∏∞Ï°¥ ÏÉÅÌÉú ÌååÏùº Î°úÎìúÎê®",
            "debug_file_size": "üîç DEBUG: ÌååÏùº ÌÅ¨Í∏∞: {} Î∞îÏù¥Ìä∏",
            "debug_calling_describe_endpoint": "üîç DEBUG: describe_endpoint API Ìò∏Ï∂ú Ï§ë",
            "debug_input_parameters": "üì• ÏûÖÎ†• Îß§Í∞úÎ≥ÄÏàò: {'endpointType': 'iot:Data-ATS'}",
            "debug_api_response": "üì§ API ÏùëÎãµ: {}",
            "debug_full_traceback": "üîç DEBUG: Ï†ÑÏ≤¥ Ï∂îÏ†Å:",
            "debug_calling_list_things": "üîç DEBUG: list_things API Ìò∏Ï∂ú Ï§ë",
            "debug_input_params_none": "üì• ÏûÖÎ†• Îß§Í∞úÎ≥ÄÏàò: ÏóÜÏùå",
            "debug_found_things": "üì§ API ÏùëÎãµ: {} Í∞úÏùò Thing Î∞úÍ≤¨",
            "debug_thing_names": "üìä Thing Ïù¥Î¶Ñ: {}",
            "debug_calling_list_principals": "üîç DEBUG: list_thing_principals API Ìò∏Ï∂ú Ï§ë",
            "debug_input_thing_name": "üì• ÏûÖÎ†• Îß§Í∞úÎ≥ÄÏàò: {'thingName': '{}'}",
            "debug_found_principals": "üì§ API ÏùëÎãµ: {} Í∞úÏùò Ï£ºÏ≤¥, {} Í∞úÏùò Ïù∏Ï¶ùÏÑú Î∞úÍ≤¨",
            "debug_cert_arns": "üìä Ïù∏Ï¶ùÏÑú ARN: {}",
            "debug_shadow_connection_setup": "üîç DEBUG: ÏÑÄÎèÑÏö∞ MQTT Ïó∞Í≤∞ ÏÑ§Ï†ï",
            "debug_thing_name": "   Thing Ïù¥Î¶Ñ: {}",
            "debug_cert_file": "   Ïù∏Ï¶ùÏÑú ÌååÏùº: {}",
            "debug_private_key_file": "   Í∞úÏù∏ ÌÇ§ ÌååÏùº: {}",
            "debug_endpoint": "   ÏóîÎìúÌè¨Ïù∏Ìä∏: {}",
            "debug_connection_result": "üîç DEBUG: Ïó∞Í≤∞ Í≤∞Í≥º: {}",
            "debug_subscribing_topic": "üîç DEBUG: ÏÑÄÎèÑÏö∞ ÌÜ†ÌîΩ Íµ¨ÎèÖ Ï§ë: {}",
            "debug_subscription_successful": "üîç DEBUG: Íµ¨ÎèÖ ÏÑ±Í≥µ, Ìå®ÌÇ∑ ID: {}",
            "debug_publishing_shadow_get": "üîç DEBUG: ÏÑÄÎèÑÏö∞ get ÏöîÏ≤≠ Í≤åÏãú Ï§ë",
            "debug_topic": "   ÌÜ†ÌîΩ: {}",
            "debug_payload_empty": "   ÌéòÏù¥Î°úÎìú: ÎπÑÏñ¥ÏûàÏùå (ÏÑÄÎèÑÏö∞ get ÏöîÏ≤≠ÏóêÎäî ÌéòÏù¥Î°úÎìúÍ∞Ä ÏóÜÏùå)",
            "debug_publishing_shadow_update": "üîç DEBUG: ÏÑÄÎèÑÏö∞ update ÏöîÏ≤≠ Í≤åÏãú Ï§ë",
            "debug_payload_json": "   ÌéòÏù¥Î°úÎìú: {}",
            "debug_update_type": "   ÏóÖÎç∞Ïù¥Ìä∏ ÌÉÄÏûÖ: {}",
            "debug_simulation_type": "üîç DEBUG: ÏãúÎÆ¨Î†àÏù¥ÏÖò ÌÉÄÏûÖ: {}",
            "debug_property_change": "üîç DEBUG: ÏÜçÏÑ± '{}'Ïù¥ {}ÏóêÏÑú {}Î°ú Î≥ÄÍ≤ΩÎê®",
            "debug_state_before": "üîç DEBUG: Î≥ÄÍ≤Ω Ï†Ñ ÏÉÅÌÉú: {}",
            "debug_state_after": "üîç DEBUG: Î≥ÄÍ≤Ω ÌõÑ ÏÉÅÌÉú: {}",
        },
    },
    "ja": {
        "title": "üåü AWS IoT Device Shadow „Ç®„ÇØ„Çπ„Éó„É≠„Éº„É©„Éº",
        "separator": "=" * 45,
        "aws_config": "üìç AWSË®≠ÂÆö:",
        "account_id": "„Ç¢„Ç´„Ç¶„É≥„ÉàID",
        "region": "„É™„Éº„Ç∏„Éß„É≥",
        "description": "Device Shadow„Çí‰ΩøÁî®„Åó„Åü„Éá„Éê„Ç§„ÇπÁä∂ÊÖãÂêåÊúü„ÅÆÂ≠¶Áøí„ÄÇ",
        "debug_enabled": "üîç „Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâÊúâÂäπ",
        "debug_features": ["‚Ä¢ Ë©≥Á¥∞„Å™ShadowÊìç‰Ωú„É≠„Ç∞", "‚Ä¢ ÂÆåÂÖ®„Å™Áä∂ÊÖãÂ§âÊõ¥ËøΩË∑°", "‚Ä¢ Êã°Âºµ„Ç®„É©„ÉºË®∫Êñ≠"],
        "tip": "üí° „Éí„É≥„Éà: Ë©≥Á¥∞„Å™Shadow„É≠„Ç∞„Å´„ÅØ--debug„Éï„É©„Ç∞„Çí‰ΩøÁî®",
        "client_initialized": "‚úÖ AWS IoT„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅåÂàùÊúüÂåñ„Åï„Çå„Åæ„Åó„Åü",
        "invalid_credentials": "‚ùå ÁÑ°Âäπ„Å™AWSË™çË®ºÊÉÖÂ†±",
        "no_region_error": "‚ùå AWS„É™„Éº„Ç∏„Éß„É≥„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì",
        "region_setup_instructions": [
            "‰ª•‰∏ã„ÅÆ„ÅÑ„Åö„Çå„Åã„ÅÆÊñπÊ≥ï„ÅßAWS„É™„Éº„Ç∏„Éß„É≥„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ:",
            "1. Áí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆö: export AWS_DEFAULT_REGION=us-east-1",
            "2. AWS CLI„ÇíË®≠ÂÆö: aws configure",
            "3. AWSË™çË®ºÊÉÖÂ†±„Éï„Ç°„Ç§„É´„Åß„É™„Éº„Ç∏„Éß„É≥„ÇíË®≠ÂÆö",
        ],
        "aws_context_error": "‚ö†Ô∏è AWS„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü:",
        "aws_credentials_reminder": "   AWSË™çË®ºÊÉÖÂ†±„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
        "shadow_intro_title": "Device Shadow - „Éá„Éê„Ç§„ÇπÁä∂ÊÖãÂêåÊúü",
        "shadow_intro_content": "AWS IoT Device Shadow„ÅØ„ÄÅ„Éá„Éê„Ç§„Çπ„ÅÆÁèæÂú®„ÅÆÁä∂ÊÖã„Å®Â∏åÊúõ„Åô„ÇãÁä∂ÊÖã„ÇíÂêåÊúü„Åô„Çã„Çµ„Éº„Éì„Çπ„Åß„Åô„ÄÇ„Éá„Éê„Ç§„Çπ„Åå„Ç™„Éï„É©„Ç§„É≥„Åß„ÇÇÁä∂ÊÖã„Çí‰øùÊåÅ„Åó„ÄÅÂÜçÊé•Á∂öÊôÇ„Å´ÂêåÊúü„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇ„Åì„Çå„Å´„Çà„Çä„ÄÅ‰ø°È†ºÊÄß„ÅÆÈ´ò„ÅÑIoT„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆÊßãÁØâ„ÅåÂèØËÉΩ„Å´„Å™„Çä„Åæ„Åô„ÄÇ",
        "shadow_intro_next": "Device Shadow„ÅÆÊìç‰Ωú„ÇíÊé¢Á¥¢„Åó„ÄÅÁä∂ÊÖãÁÆ°ÁêÜ„ÇíÂ≠¶Áøí„Åó„Åæ„Åô",
        "press_enter": "Enter„Ç≠„Éº„ÇíÊäº„Åó„Å¶Á∂öË°å...",
        "goodbye": "üëã „Åï„Çà„ÅÜ„Å™„ÇâÔºÅ",
        "thing_selection_title": "üì± ThingÈÅ∏Êäû",
        "available_things": "Âà©Áî®ÂèØËÉΩ„Å™Things:",
        "no_things_found": "‚ùå Things„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇsetup_sample_data.py„ÇíÂÆüË°å„Åó„Å¶„Çµ„É≥„Éó„É´„Éá„Éº„Çø„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
        "select_thing": "Thing„ÇíÈÅ∏Êäû (1-{}): ",
        "invalid_thing_choice": "‚ùå ÁÑ°Âäπ„Å™ÈÅ∏Êäû„Åß„Åô„ÄÇ1-{}„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
        "selected_thing": "‚úÖ ÈÅ∏Êäû„Åï„Çå„ÅüThing: {}",
        "operations_menu": "üìã Âà©Áî®ÂèØËÉΩ„Å™Êìç‰Ωú:",
        "operations": [
            "1. Shadow„ÇíÂèñÂæó",
            "2. Â∏åÊúõ„Åô„ÇãÁä∂ÊÖã„ÇíÊõ¥Êñ∞",
            "3. Â†±Âëä„Åï„Çå„ÅüÁä∂ÊÖã„ÇíÊõ¥Êñ∞",
            "4. Shadow„ÇíÂâäÈô§",
            "5. Âà•„ÅÆThing„ÇíÈÅ∏Êäû",
            "6. ÁµÇ‰∫Ü",
        ],
        "select_operation": "Êìç‰Ωú„ÇíÈÅ∏Êäû (1-6): ",
        "invalid_choice": "‚ùå ÁÑ°Âäπ„Å™ÈÅ∏Êäû„Åß„Åô„ÄÇ1-6„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
        "get_shadow_learning_title": "üìö Â≠¶Áøí„Éù„Ç§„É≥„Éà: ShadowÂèñÂæó",
        "get_shadow_learning_content": "ShadowÂèñÂæó„Å´„Çà„Çä„ÄÅ„Éá„Éê„Ç§„Çπ„ÅÆÁèæÂú®„ÅÆÁä∂ÊÖã„ÄÅÂ∏åÊúõ„Åô„ÇãÁä∂ÊÖã„ÄÅ„Åä„Çà„Å≥Â∑ÆÂàÜÔºàdeltaÔºâ„ÇíÁ¢∫Ë™ç„Åß„Åç„Åæ„Åô„ÄÇ„Åì„Çå„ÅØ„ÄÅ„Éá„Éê„Ç§„Çπ„ÅÆÁèæÂú®„ÅÆË®≠ÂÆö„ÇíÁêÜËß£„Åó„ÄÅÂêåÊúü„ÅåÂøÖË¶Å„Å™Â§âÊõ¥„ÇíÁâπÂÆö„Åô„Çã„Åü„ÇÅ„Å´ÈáçË¶Å„Åß„Åô„ÄÇ",
        "get_shadow_learning_next": "Shadow„Éâ„Ç≠„É•„É°„É≥„Éà„ÇíÂèñÂæó„Åó„ÄÅ„Åù„ÅÆÊßãÈÄ†„ÇíË™øÊüª„Åó„Åæ„Åô",
        "getting_shadow": "üîç Thing '{}'„ÅÆShadow„ÇíÂèñÂæó‰∏≠...",
        "shadow_retrieved": "‚úÖ ShadowÂèñÂæóÊàêÂäü",
        "shadow_not_found": "üì≠ Shadow„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„ÇìÔºà„Åæ„Å†‰ΩúÊàê„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„ÇìÔºâ",
        "shadow_get_failed": "‚ùå ShadowÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: {}",
        "shadow_structure_title": "üìä ShadowÊßãÈÄ†:",
        "shadow_state_title": "Áä∂ÊÖã:",
        "shadow_desired_title": "Â∏åÊúõ„Åô„ÇãÁä∂ÊÖã:",
        "shadow_reported_title": "Â†±Âëä„Åï„Çå„ÅüÁä∂ÊÖã:",
        "shadow_delta_title": "Â∑ÆÂàÜÔºàDeltaÔºâ:",
        "shadow_metadata_title": "„É°„Çø„Éá„Éº„Çø:",
        "shadow_version_title": "„Éê„Éº„Ç∏„Éß„É≥:",
        "shadow_timestamp_title": "„Çø„Ç§„É†„Çπ„Çø„É≥„Éó:",
        "no_desired_state": "Â∏åÊúõ„Åô„ÇãÁä∂ÊÖã„Å™„Åó",
        "no_reported_state": "Â†±Âëä„Åï„Çå„ÅüÁä∂ÊÖã„Å™„Åó",
        "no_delta": "Â∑ÆÂàÜ„Å™„Åó",
        "update_desired_learning_title": "üìö Â≠¶Áøí„Éù„Ç§„É≥„Éà: Â∏åÊúõ„Åô„ÇãÁä∂ÊÖã„ÅÆÊõ¥Êñ∞",
        "update_desired_learning_content": "Â∏åÊúõ„Åô„ÇãÁä∂ÊÖã„ÅÆÊõ¥Êñ∞„Å´„Çà„Çä„ÄÅ„Éá„Éê„Ç§„Çπ„ÅåÈÅîÊàê„Åô„Åπ„ÅçÁõÆÊ®ôË®≠ÂÆö„ÇíÂÆöÁæ©„Åß„Åç„Åæ„Åô„ÄÇ„Éá„Éê„Ç§„Çπ„ÅØ„ÄÅ„Åì„ÅÆÂ∏åÊúõ„Åô„ÇãÁä∂ÊÖã„Å®ÁèæÂú®„ÅÆÂ†±Âëä„Åï„Çå„ÅüÁä∂ÊÖã„ÅÆÂ∑ÆÂàÜ„ÇíÂèó‰ø°„Åó„ÄÅÂøÖË¶Å„Å™Â§âÊõ¥„ÇíÈÅ©Áî®„Åó„Åæ„Åô„ÄÇ",
        "update_desired_learning_next": "Â∏åÊúõ„Åô„ÇãÁä∂ÊÖã„ÇíÊõ¥Êñ∞„Åó„ÄÅ„Éá„Éê„Ç§„ÇπÂêåÊúü„ÇíÈñãÂßã„Åó„Åæ„Åô",
        "enter_desired_state": "Â∏åÊúõ„Åô„ÇãÁä∂ÊÖã„ÇíJSONÂΩ¢Âºè„ÅßÂÖ•Âäõ:",
        "example_desired_state": '‰æã: {"temperature": 22, "humidity": 45}',
        "updating_desired_state": "üîÑ Â∏åÊúõ„Åô„ÇãÁä∂ÊÖã„ÇíÊõ¥Êñ∞‰∏≠...",
        "desired_state_updated": "‚úÖ Â∏åÊúõ„Åô„ÇãÁä∂ÊÖã„ÅåÊõ¥Êñ∞„Åï„Çå„Åæ„Åó„Åü",
        "desired_update_failed": "‚ùå Â∏åÊúõ„Åô„ÇãÁä∂ÊÖã„ÅÆÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: {}",
        "invalid_json": "‚ùå ÁÑ°Âäπ„Å™JSONÂΩ¢Âºè„Åß„Åô„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶Ë©¶„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
        "update_reported_learning_title": "üìö Â≠¶Áøí„Éù„Ç§„É≥„Éà: Â†±Âëä„Åï„Çå„ÅüÁä∂ÊÖã„ÅÆÊõ¥Êñ∞",
        "update_reported_learning_content": "Â†±Âëä„Åï„Çå„ÅüÁä∂ÊÖã„ÅÆÊõ¥Êñ∞„Å´„Çà„Çä„ÄÅ„Éá„Éê„Ç§„Çπ„ÅÆÁèæÂú®„ÅÆÂÆüÈöõ„ÅÆÁä∂ÊÖã„ÇíË®òÈå≤„Åß„Åç„Åæ„Åô„ÄÇ„Åì„Çå„ÅØÈÄöÂ∏∏„ÄÅ„Éá„Éê„Ç§„ÇπËá™‰Ωì„ÅåË°å„ÅÑ„Åæ„Åô„Åå„ÄÅ„ÉÜ„Çπ„ÉàÁõÆÁöÑ„Åß„Ç∑„Éü„É•„É¨„Éº„Éà„Åß„Åç„Åæ„Åô„ÄÇ",
        "update_reported_learning_next": "Â†±Âëä„Åï„Çå„ÅüÁä∂ÊÖã„ÇíÊõ¥Êñ∞„Åó„ÄÅ„Éá„Éê„Ç§„Çπ„ÅÆÁèæÂú®„ÅÆÁä∂ÊÖã„ÇíË®òÈå≤„Åó„Åæ„Åô",
        "enter_reported_state": "Â†±Âëä„Åï„Çå„ÅüÁä∂ÊÖã„ÇíJSONÂΩ¢Âºè„ÅßÂÖ•Âäõ:",
        "example_reported_state": '‰æã: {"temperature": 21, "humidity": 43}',
        "updating_reported_state": "üîÑ Â†±Âëä„Åï„Çå„ÅüÁä∂ÊÖã„ÇíÊõ¥Êñ∞‰∏≠...",
        "reported_state_updated": "‚úÖ Â†±Âëä„Åï„Çå„ÅüÁä∂ÊÖã„ÅåÊõ¥Êñ∞„Åï„Çå„Åæ„Åó„Åü",
        "reported_update_failed": "‚ùå Â†±Âëä„Åï„Çå„ÅüÁä∂ÊÖã„ÅÆÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: {}",
        "delete_shadow_learning_title": "üìö Â≠¶Áøí„Éù„Ç§„É≥„Éà: ShadowÂâäÈô§",
        "delete_shadow_learning_content": "ShadowÂâäÈô§„Å´„Çà„Çä„ÄÅ„Éá„Éê„Ç§„Çπ„ÅÆ„Åô„Åπ„Å¶„ÅÆÁä∂ÊÖãÊÉÖÂ†±„ÇíÂÆåÂÖ®„Å´ÂâäÈô§„Åß„Åç„Åæ„Åô„ÄÇ„Åì„Çå„ÅØ„ÄÅ„Éá„Éê„Ç§„Çπ„ÅÆ„É™„Çª„ÉÉ„Éà„ÇÑÂÜçÂàùÊúüÂåñ„Å´‰ΩøÁî®„Åï„Çå„Åæ„Åô„ÄÇÂâäÈô§Âæå„ÄÅÊñ∞„Åó„ÅÑShadow„Éâ„Ç≠„É•„É°„É≥„Éà„Çí‰ΩúÊàê„Åß„Åç„Åæ„Åô„ÄÇ",
        "delete_shadow_learning_next": "Shadow„Éâ„Ç≠„É•„É°„É≥„Éà„ÇíÂâäÈô§„Åó„ÄÅÁä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà„Åó„Åæ„Åô",
        "confirm_delete": "Êú¨ÂΩì„Å´Thing '{}'„ÅÆShadow„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü (y/N): ",
        "delete_cancelled": "ÂâäÈô§„Åå„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åæ„Åó„Åü",
        "deleting_shadow": "üóëÔ∏è Shadow„ÇíÂâäÈô§‰∏≠...",
        "shadow_deleted": "‚úÖ Shadow„ÅåÂâäÈô§„Åï„Çå„Åæ„Åó„Åü",
        "shadow_delete_failed": "‚ùå ShadowÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: {}",
        "debug_full_error": "üîç „Éá„Éê„ÉÉ„Ç∞: ÂÆåÂÖ®„Å™„Ç®„É©„Éº„É¨„Çπ„Éù„É≥„Çπ:",
        "debug_full_traceback": "üîç „Éá„Éê„ÉÉ„Ç∞: ÂÆåÂÖ®„Å™„Éà„É¨„Éº„Çπ„Éê„ÉÉ„ÇØ:",
        "api_error": "‚ùå API„Ç®„É©„Éº:",
        "error": "‚ùå „Ç®„É©„Éº:",
        "learning_moments": {
            "shadow_concepts": {
                "title": "üìö Â≠¶Áøí„Éù„Ç§„É≥„Éà: Device ShadowÊ¶ÇÂøµ",
                "content": "Device Shadow„ÅØ„ÄÅ„Éá„Éê„Ç§„Çπ„ÅÆÁä∂ÊÖã„ÇíË°®„ÅôJSON„Éâ„Ç≠„É•„É°„É≥„Éà„Åß„Åô„ÄÇ'desired'ÔºàÂ∏åÊúõ„Åô„ÇãÁä∂ÊÖãÔºâ„ÄÅ'reported'ÔºàÂ†±Âëä„Åï„Çå„ÅüÁä∂ÊÖãÔºâ„ÄÅ'delta'ÔºàÂ∑ÆÂàÜÔºâ„ÅÆ3„Å§„ÅÆ‰∏ªË¶Å„Çª„ÇØ„Ç∑„Éß„É≥„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ„Åì„Çå„Å´„Çà„Çä„ÄÅ„Éá„Éê„Ç§„Çπ„Åå„Ç™„Éï„É©„Ç§„É≥„Åß„ÇÇÁä∂ÊÖãÁÆ°ÁêÜ„ÅåÂèØËÉΩ„Å´„Å™„Çä„Åæ„Åô„ÄÇ",
                "next": "ShadowÊìç‰Ωú„ÇíÈÄö„Åò„Å¶„Åì„Çå„Çâ„ÅÆÊ¶ÇÂøµ„ÇíÊé¢Á¥¢„Åó„Åæ„Åô",
            },
            "state_synchronization": {
                "title": "üìö Â≠¶Áøí„Éù„Ç§„É≥„Éà: Áä∂ÊÖãÂêåÊúü",
                "content": "Áä∂ÊÖãÂêåÊúü„ÅØ„ÄÅÂ∏åÊúõ„Åô„ÇãÁä∂ÊÖã„Å®Â†±Âëä„Åï„Çå„ÅüÁä∂ÊÖã„ÅÆÂ∑ÆÂàÜ„ÇíÈÄö„Åò„Å¶Ë°å„Çè„Çå„Åæ„Åô„ÄÇ„Éá„Éê„Ç§„Çπ„ÅØÂ∑ÆÂàÜ„ÇíÂèó‰ø°„Åó„ÄÅÂøÖË¶Å„Å™Â§âÊõ¥„ÇíÈÅ©Áî®„Åó„Å¶„Åã„Çâ„ÄÅÊñ∞„Åó„ÅÑÂ†±Âëä„Åï„Çå„ÅüÁä∂ÊÖã„ÇíÈÄÅ‰ø°„Åó„Åæ„Åô„ÄÇ„Åì„Çå„Å´„Çà„Çä„ÄÅÁ¢∫ÂÆü„Å™Áä∂ÊÖãÁÆ°ÁêÜ„ÅåÂÆüÁèæ„Åï„Çå„Åæ„Åô„ÄÇ",
                "next": "Áä∂ÊÖãÊõ¥Êñ∞„ÇíÈÄö„Åò„Å¶ÂêåÊúü„Éó„É≠„Çª„Çπ„Çí‰ΩìÈ®ì„Åó„Åæ„Åô",
            },
            "version_control": {
                "title": "üìö Â≠¶Áøí„Éù„Ç§„É≥„Éà: „Éê„Éº„Ç∏„Éß„É≥Âà∂Âæ°",
                "content": "ÂêÑShadowÊõ¥Êñ∞„ÅØ„Éê„Éº„Ç∏„Éß„É≥Áï™Âè∑„ÇíÂ¢óÂä†„Åï„Åõ„Åæ„Åô„ÄÇ„Åì„Çå„Å´„Çà„Çä„ÄÅÁ´∂ÂêàÁä∂ÊÖã„ÇíÈò≤„Åé„ÄÅÊõ¥Êñ∞„ÅÆÈ†ÜÂ∫è„Çí‰øùË®º„Åó„Åæ„Åô„ÄÇ„Éê„Éº„Ç∏„Éß„É≥Âà∂Âæ°„ÅØ„ÄÅË§áÊï∞„ÅÆ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅåÂêå„Åò„Éá„Éê„Ç§„Çπ„ÇíÁÆ°ÁêÜ„Åô„ÇãÂ†¥Âêà„Å´ÈáçË¶Å„Åß„Åô„ÄÇ",
                "next": "„Éê„Éº„Ç∏„Éß„É≥Â§âÊõ¥„ÇíË¶≥ÂØü„Åó„Å™„Åå„ÇâÊõ¥Êñ∞„ÇíÂÆüË°å„Åó„Åæ„Åô",
            },
            "debug_state_before": "üîç „Éá„Éê„ÉÉ„Ç∞: Êõ¥Êñ∞Ââç„ÅÆÁä∂ÊÖã: {}",
            "debug_state_after": "üîç „Éá„Éê„ÉÉ„Ç∞: Êõ¥Êñ∞Âæå„ÅÆÁä∂ÊÖã: {}",
        },
        "client_id_prompt": "„Ç´„Çπ„Çø„É†„ÇØ„É©„Ç§„Ç¢„É≥„ÉàID„ÇíÂÖ•Âäõ („Åæ„Åü„ÅØËá™ÂãïÁîüÊàê„Åô„Çã„Å´„ÅØEnter„ÇíÊäº„Åô): ",
        "client_id_auto_generated": "Ëá™ÂãïÁîüÊàê„ÇØ„É©„Ç§„Ç¢„É≥„ÉàID",
        "client_id_custom": "„Ç´„Çπ„Çø„É†„ÇØ„É©„Ç§„Ç¢„É≥„ÉàID",
        "client_id_invalid": "‚ùå ÁÑ°Âäπ„Å™„ÇØ„É©„Ç§„Ç¢„É≥„ÉàID„ÄÇ1-128ÊñáÂ≠ó„ÄÅËã±Êï∞Â≠ó„ÄÅ„Éè„Ç§„Éï„É≥„ÄÅ„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÅÆ„Åø‰ΩøÁî®ÂèØËÉΩ„ÄÇ",
        "client_id_guidelines": "üí° „ÇØ„É©„Ç§„Ç¢„É≥„ÉàID„Ç¨„Ç§„Éâ„É©„Ç§„É≥:",
        "client_id_rules": [
            "‚Ä¢ Êé•Á∂ö„Åî„Å®„Å´‰∏ÄÊÑè„Åß„ÅÇ„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô",
            "‚Ä¢ 1-128ÊñáÂ≠ó„ÅåË®±ÂèØ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô",
            "‚Ä¢ Ëã±Êï∞Â≠ó„ÄÅ„Éè„Ç§„Éï„É≥(-)„ÄÅ„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢(_)„Çí‰ΩøÁî®",
            "‚Ä¢ „Çπ„Éö„Éº„Çπ„ÇÑÁâπÊÆäÊñáÂ≠ó„ÅØÈÅø„Åë„Çã",
            "‚Ä¢ ‰æã: my-device-001, sensor_temp_01",
        ],
    },
    "pt-BR": {
        "title": "üåü Explorador de Device Shadow AWS IoT",
        "separator": "=" * 60,
        "aws_context_info": "üåç Informa√ß√µes de Contexto AWS:",
        "account_id": "ID da Conta",
        "region": "Regi√£o",
        "aws_context_error": "‚ö†Ô∏è N√£o foi poss√≠vel recuperar o contexto AWS:",
        "aws_credentials_reminder": "   Certifique-se de que as credenciais AWS est√£o configuradas",
        "description_intro": "Este script ensina conceitos de AWS IoT Device Shadow:",
        "shadow_concepts": [
            "‚Ä¢ Servi√ßo Device Shadow para sincroniza√ß√£o de estado",
            "‚Ä¢ Estrutura do documento Shadow (desejado vs reportado)",
            "‚Ä¢ T√≥picos MQTT para opera√ß√µes de shadow",
            "‚Ä¢ Mensagens delta para diferen√ßas de estado",
            "‚Ä¢ Atualiza√ß√µes de shadow em tempo real e notifica√ß√µes",
            "‚Ä¢ Detalhes completos da API para cada opera√ß√£o",
        ],
        "debug_enabled": "üîç MODO DEBUG HABILITADO",
        "debug_features": [
            "‚Ä¢ Log aprimorado de mensagens MQTT",
            "‚Ä¢ An√°lise completa de documentos shadow",
            "‚Ä¢ Informa√ß√µes educacionais estendidas",
        ],
        "tip": "üí° Dica: Use a flag --debug ou -d para log aprimorado de shadow",
        "press_enter": "Pressione Enter para continuar...",
        "goodbye": "üëã Tchau!",
        "main_menu": "üìã Opera√ß√µes de Device Shadow:",
        "menu_options": [
            "1. Conectar ao Dispositivo e Inscrever-se nos T√≥picos Shadow",
            "2. Obter Documento Shadow Atual",
            "3. Atualizar Estado Reportado do Shadow (Dispositivo ‚Üí Nuvem)",
            "4. Atualizar Estado Desejado do Shadow (Nuvem ‚Üí Dispositivo)",
            "5. Simular Mudan√ßas de Estado do Dispositivo",
            "6. Ver Hist√≥rico de Mensagens Shadow",
            "7. Desconectar e Sair",
        ],
        "select_option": "Selecionar op√ß√£o (1-7): ",
        "invalid_choice": "‚ùå Escolha inv√°lida. Por favor selecione 1-7.",
        "learning_moments": {
            "shadow_foundation": {
                "title": "üìö MOMENTO DE APRENDIZADO: Fundamentos do Device Shadow",
                "content": "AWS IoT Device Shadow √© um documento JSON que armazena e recupera informa√ß√µes do estado atual de um dispositivo. O shadow atua como intermedi√°rio entre dispositivos e aplica√ß√µes, permitindo comunica√ß√£o confi√°vel mesmo quando dispositivos est√£o offline. Compreender conceitos de shadow √© essencial para construir aplica√ß√µes IoT robustas.",
                "next": "Exploraremos opera√ß√µes de shadow e comunica√ß√£o MQTT",
            },
            "shadow_connection": {
                "title": "üìö MOMENTO DE APRENDIZADO: Conex√£o MQTT do Shadow",
                "content": "Device Shadows usam t√≥picos MQTT para comunica√ß√£o. Cada opera√ß√£o de shadow (get, update, delete) tem t√≥picos de resposta correspondentes accepted/rejected. T√≥picos delta notificam quando o estado desejado difere do reportado. Este modelo pub/sub permite comunica√ß√£o bidirecional em tempo real entre dispositivos e aplica√ß√µes.",
                "next": "Estabeleceremos conex√£o MQTT e nos inscreveremos nos t√≥picos shadow",
            },
        },
        "not_connected": "‚ùå N√£o conectado ao AWS IoT Core",
        "connection_established": "CONEX√ÉO SHADOW ESTABELECIDA",
        "shadow_get_accepted": "‚úÖ SHADOW GET ACEITO",
        "shadow_get_rejected": "‚ùå SHADOW GET REJEITADO",
        "shadow_update_accepted": "‚úÖ ATUALIZA√á√ÉO SHADOW ACEITA",
        "shadow_update_rejected": "‚ùå ATUALIZA√á√ÉO SHADOW REJEITADA",
        "shadow_delta_received": "üîÑ DELTA SHADOW RECEBIDO",
        "operation_cancelled": "üõë Opera√ß√£o cancelada",
        "no_things_found": "‚ùå Nenhum Thing encontrado. Por favor execute setup_sample_data.py primeiro",
        "available_devices": "üì± Dispositivos Dispon√≠veis ({} encontrados):",
        "selected_device": "‚úÖ Dispositivo selecionado:",
        "using_certificate": "‚úÖ Usando certificado:",
        "certificate_files_found": "‚úÖ Arquivos de certificado encontrados:",
        "certificate": "Certificado",
        "private_key": "Chave Privada",
        "connecting_to_iot": "üîÑ Conectando ao AWS IoT Core...",
        "shadow_connection_params": "üîó Par√¢metros de Conex√£o Shadow:",
        "client_id": "ID do Cliente",
        "thing_name": "Nome do Thing",
        "endpoint": "Endpoint",
        "port": "Porta",
        "protocol": "Protocolo",
        "authentication": "Autentica√ß√£o",
        "shadow_type": "Tipo de Shadow",
        "shadow_type_classic": "Cl√°ssico",
        "requesting_shadow_document": "üì• Solicitando Documento Shadow",
        "topic": "T√≥pico",
        "thing": "Thing",
        "shadow_get_request_sent": "‚úÖ Solicita√ß√£o GET do shadow enviada",
        "qos": "QoS",
        "packet_id": "ID do Pacote",
        "waiting_for_response": "‚è≥ Aguardando resposta em get/accepted ou get/rejected...",
        "shadow_message_received": "üåü MENSAGEM SHADOW RECEBIDA",
        "direction": "Dire√ß√£o",
        "received": "RECEBIDO",
        "payload_size": "Tamanho do Payload",
        "timestamp": "Timestamp",
        "shadow_data": "Dados Shadow",
        "shadow_document_retrieved": "üìã Documento Shadow Recuperado:",
        "version": "Vers√£o",
        "desired_state": "Estado Desejado",
        "reported_state": "Estado Reportado",
        "none": "Nenhum",
        "error_code": "C√≥digo de Erro",
        "message": "Mensagem",
        "shadow_doesnt_exist": "Shadow n√£o existe ainda - ser√° criado na pr√≥xima atualiza√ß√£o",
        "new_version": "Nova Vers√£o",
        "updated_desired": "Desejado Atualizado",
        "updated_reported": "Reportado Atualizado",
        "description": "Descri√ß√£o",
        "desired_differs_reported": "Estado desejado difere do estado reportado",
        "changes_needed": "Mudan√ßas Necess√°rias",
        "state_comparison": "üîç Compara√ß√£o de Estado:",
        "local_state": "Estado Local",
        "delta": "Delta",
        "desired": "Desejado",
        "differences_found": "‚ö†Ô∏è  Diferen√ßas Encontradas:",
        "apply_changes_prompt": "Aplicar essas mudan√ßas ao dispositivo local? (s/N): ",
        "local_state_updated": "‚úÖ Estado local atualizado com sucesso",
        "failed_update_local": "‚ùå Falha ao atualizar estado local",
        "changes_not_applied": "‚è≠Ô∏è  Mudan√ßas n√£o aplicadas ao dispositivo local",
        "local_matches_desired": "‚úÖ Estado local corresponde ao estado desejado - nenhuma mudan√ßa necess√°ria",
        "automatically_reporting": "üì° Reportando automaticamente estado atualizado ao shadow...",
        "local_state_saved": "üíæ Estado local salvo em:",
        "created_default_state": "üìÑ Arquivo de estado local padr√£o criado:",
        "default_state": "üìã Estado padr√£o:",
        "using_existing_state": "üìÑ Usando arquivo de estado local existente:",
        "current_local_state": "üìã Estado local atual:",
        "thank_you_message": "Obrigado por explorar AWS IoT Device Shadows!",
        "shadow_command_prompt": "üåü Shadow> ",
        "unknown_command": "‚ùå Comando desconhecido: {}. Digite 'help' para comandos dispon√≠veis.",
        "client_id_prompt": "Digite ID do Cliente personalizado (ou pressione Enter para auto-gerar): ",
        "client_id_auto_generated": "ID do Cliente Auto-gerado",
        "client_id_custom": "ID do Cliente Personalizado",
        "client_id_invalid": "‚ùå ID do Cliente inv√°lido. Deve ter 1-128 caracteres, apenas alfanum√©ricos, h√≠fens e sublinhados.",
        "client_id_guidelines": "üí° Diretrizes do ID do Cliente:",
        "client_id_rules": [
            "‚Ä¢ Deve ser √∫nico por conex√£o",
            "‚Ä¢ 1-128 caracteres permitidos",
            "‚Ä¢ Use alfanum√©ricos, h√≠fens (-) e sublinhados (_)",
            "‚Ä¢ Evite espa√ßos e caracteres especiais",
            "‚Ä¢ Exemplo: meu-dispositivo-001, sensor_temp_01",
        ],
    },
    "ko": {
        "title": "üåü AWS IoT Device Shadow ÌÉêÏÉâÍ∏∞",
        "separator": "=" * 60,
        "aws_context_info": "üåç AWS Ïª®ÌÖçÏä§Ìä∏ Ï†ïÎ≥¥:",
        "account_id": "Í≥ÑÏ†ï ID",
        "region": "Î¶¨Ï†Ñ",
        "aws_context_error": "‚ö†Ô∏è AWS Ïª®ÌÖçÏä§Ìä∏Î•º Í≤ÄÏÉâÌï† Ïàò ÏóÜÏäµÎãàÎã§:",
        "aws_credentials_reminder": "   AWS ÏûêÍ≤© Ï¶ùÎ™ÖÏù¥ Íµ¨ÏÑ±ÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏ÌïòÏÑ∏Ïöî",
        "description_intro": "Ïù¥ Ïä§ÌÅ¨Î¶ΩÌä∏Îäî AWS IoT Device Shadow Í∞úÎÖêÏùÑ Í∞ÄÎ•¥Ïπ©ÎãàÎã§:",
        "shadow_concepts": [
            "‚Ä¢ ÏÉÅÌÉú ÎèôÍ∏∞ÌôîÎ•º ÏúÑÌïú Device Shadow ÏÑúÎπÑÏä§",
            "‚Ä¢ Shadow Î¨∏ÏÑú Íµ¨Ï°∞ (ÏõêÌïòÎäî ÏÉÅÌÉú vs Î≥¥Í≥†Îêú ÏÉÅÌÉú)",
            "‚Ä¢ Shadow ÏûëÏóÖÏùÑ ÏúÑÌïú MQTT Ï£ºÏ†ú",
            "‚Ä¢ ÏÉÅÌÉú Ï∞®Ïù¥Î•º ÏúÑÌïú Îç∏ÌÉÄ Î©îÏãúÏßÄ",
            "‚Ä¢ Ïã§ÏãúÍ∞Ñ Shadow ÏóÖÎç∞Ïù¥Ìä∏ Î∞è ÏïåÎ¶º",
            "‚Ä¢ Í∞Å ÏûëÏóÖÏóê ÎåÄÌïú ÏôÑÏ†ÑÌïú API ÏÑ∏Î∂Ä Ï†ïÎ≥¥",
        ],
        "debug_enabled": "üîç ÎîîÎ≤ÑÍ∑∏ Î™®Îìú ÌôúÏÑ±Ìôî",
        "debug_features": [
            "‚Ä¢ Ìñ•ÏÉÅÎêú MQTT Î©îÏãúÏßÄ Î°úÍπÖ",
            "‚Ä¢ ÏôÑÏ†ÑÌïú Shadow Î¨∏ÏÑú Î∂ÑÏÑù",
            "‚Ä¢ ÌôïÏû•Îêú ÍµêÏú° Ï†ïÎ≥¥",
        ],
        "tip": "üí° ÌåÅ: Ìñ•ÏÉÅÎêú Shadow Î°úÍπÖÏùÑ ÏúÑÌï¥ --debug ÎòêÎäî -d ÌîåÎûòÍ∑∏Î•º ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî",
        "press_enter": "Í≥ÑÏÜçÌïòÎ†§Î©¥ EnterÎ•º ÎàÑÎ•¥ÏÑ∏Ïöî...",
        "goodbye": "üëã ÏïàÎÖïÌûà Í∞ÄÏÑ∏Ïöî!",
        "main_menu": "üìã Device Shadow ÏûëÏóÖ:",
        "menu_options": [
            "1. ÎîîÎ∞îÏù¥Ïä§Ïóê Ïó∞Í≤∞ Î∞è Shadow Ï£ºÏ†ú Íµ¨ÎèÖ",
            "2. ÌòÑÏû¨ Shadow Î¨∏ÏÑú Í∞ÄÏ†∏Ïò§Í∏∞",
            "3. Shadow Î≥¥Í≥†Îêú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (ÎîîÎ∞îÏù¥Ïä§ ‚Üí ÌÅ¥ÎùºÏö∞Îìú)",
            "4. Shadow ÏõêÌïòÎäî ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (ÌÅ¥ÎùºÏö∞Îìú ‚Üí ÎîîÎ∞îÏù¥Ïä§)",
            "5. ÎîîÎ∞îÏù¥Ïä§ ÏÉÅÌÉú Î≥ÄÍ≤Ω ÏãúÎÆ¨Î†àÏù¥ÏÖò",
            "6. Shadow Î©îÏãúÏßÄ Í∏∞Î°ù Î≥¥Í∏∞",
            "7. Ïó∞Í≤∞ Ìï¥Ï†ú Î∞è Ï¢ÖÎ£å",
        ],
        "select_option": "ÏòµÏÖò ÏÑ†ÌÉù (1-7): ",
        "invalid_choice": "‚ùå ÏûòÎ™ªÎêú ÏÑ†ÌÉùÏûÖÎãàÎã§. 1-7ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.",
        "not_connected": "‚ùå AWS IoT CoreÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå",
        "connection_established": "SHADOW Ïó∞Í≤∞ ÏÑ§Ï†ïÎê®",
        "shadow_get_accepted": "‚úÖ SHADOW GET ÏäπÏù∏Îê®",
        "shadow_get_rejected": "‚ùå SHADOW GET Í±∞Î∂ÄÎê®",
        "shadow_update_accepted": "‚úÖ SHADOW ÏóÖÎç∞Ïù¥Ìä∏ ÏäπÏù∏Îê®",
        "shadow_update_rejected": "‚ùå SHADOW ÏóÖÎç∞Ïù¥Ìä∏ Í±∞Î∂ÄÎê®",
        "shadow_delta_received": "üîÑ SHADOW Îç∏ÌÉÄ ÏàòÏã†Îê®",
        "operation_cancelled": "üõë ÏûëÏóÖÏù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§",
        "no_things_found": "‚ùå ThingsÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. Î®ºÏ†Ä setup_sample_data.pyÎ•º Ïã§ÌñâÌïòÏÑ∏Ïöî",
        "available_devices": "üì± ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÎîîÎ∞îÏù¥Ïä§ ({} Í∞ú Î∞úÍ≤¨):",
        "selected_device": "‚úÖ ÏÑ†ÌÉùÎêú ÎîîÎ∞îÏù¥Ïä§:",
        "using_certificate": "‚úÖ Ïù∏Ï¶ùÏÑú ÏÇ¨Ïö©:",
        "certificate_files_found": "‚úÖ Ïù∏Ï¶ùÏÑú ÌååÏùº Î∞úÍ≤¨:",
        "certificate": "Ïù∏Ï¶ùÏÑú",
        "private_key": "Í∞úÏù∏ ÌÇ§",
        "connecting_to_iot": "üîÑ AWS IoT CoreÏóê Ïó∞Í≤∞ Ï§ë...",
        "shadow_connection_params": "üîó Shadow Ïó∞Í≤∞ Îß§Í∞úÎ≥ÄÏàò:",
        "client_id": "ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ID",
        "thing_name": "Thing Ïù¥Î¶Ñ",
        "endpoint": "ÏóîÎìúÌè¨Ïù∏Ìä∏",
        "port": "Ìè¨Ìä∏",
        "protocol": "ÌîÑÎ°úÌÜ†ÏΩú",
        "authentication": "Ïù∏Ï¶ù",
        "shadow_type": "Shadow Ïú†Ìòï",
        "shadow_type_classic": "ÌÅ¥ÎûòÏãù",
        "requesting_shadow_document": "üì• Shadow Î¨∏ÏÑú ÏöîÏ≤≠",
        "topic": "Ï£ºÏ†ú",
        "thing": "Thing",
        "shadow_get_request_sent": "‚úÖ Shadow GET ÏöîÏ≤≠ Ï†ÑÏÜ°Îê®",
        "qos": "QoS",
        "packet_id": "Ìå®ÌÇ∑ ID",
        "waiting_for_response": "‚è≥ get/accepted ÎòêÎäî get/rejectedÏóêÏÑú ÏùëÎãµ ÎåÄÍ∏∞ Ï§ë...",
        "shadow_message_received": "üåü SHADOW Î©îÏãúÏßÄ ÏàòÏã†Îê®",
        "direction": "Î∞©Ìñ•",
        "received": "ÏàòÏã†Îê®",
        "payload_size": "ÌéòÏù¥Î°úÎìú ÌÅ¨Í∏∞",
        "timestamp": "ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ",
        "shadow_data": "Shadow Îç∞Ïù¥ÌÑ∞",
        "shadow_document_retrieved": "üìã Shadow Î¨∏ÏÑú Í≤ÄÏÉâÎê®:",
        "version": "Î≤ÑÏ†Ñ",
        "desired_state": "ÏõêÌïòÎäî ÏÉÅÌÉú",
        "reported_state": "Î≥¥Í≥†Îêú ÏÉÅÌÉú",
        "none": "ÏóÜÏùå",
        "error_code": "Ïò§Î•ò ÏΩîÎìú",
        "message": "Î©îÏãúÏßÄ",
        "shadow_doesnt_exist": "ShadowÍ∞Ä ÏïÑÏßÅ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§ - Îã§Ïùå ÏóÖÎç∞Ïù¥Ìä∏ÏóêÏÑú ÏÉùÏÑ±Îê©ÎãàÎã§",
        "new_version": "ÏÉà Î≤ÑÏ†Ñ",
        "updated_desired": "ÏóÖÎç∞Ïù¥Ìä∏Îêú ÏõêÌïòÎäî ÏÉÅÌÉú",
        "updated_reported": "ÏóÖÎç∞Ïù¥Ìä∏Îêú Î≥¥Í≥†Îêú ÏÉÅÌÉú",
        "description": "ÏÑ§Î™Ö",
        "desired_differs_reported": "ÏõêÌïòÎäî ÏÉÅÌÉúÍ∞Ä Î≥¥Í≥†Îêú ÏÉÅÌÉúÏôÄ Îã§Î¶ÖÎãàÎã§",
        "changes_needed": "ÌïÑÏöîÌïú Î≥ÄÍ≤ΩÏÇ¨Ìï≠",
        "state_comparison": "üîç ÏÉÅÌÉú ÎπÑÍµê:",
        "local_state": "Î°úÏª¨ ÏÉÅÌÉú",
        "delta": "Îç∏ÌÉÄ",
        "desired": "ÏõêÌïòÎäî ÏÉÅÌÉú",
        "differences_found": "‚ö†Ô∏è  Ï∞®Ïù¥Ï†ê Î∞úÍ≤¨:",
        "apply_changes_prompt": "Ïù¥Îü¨Ìïú Î≥ÄÍ≤ΩÏÇ¨Ìï≠ÏùÑ Î°úÏª¨ ÎîîÎ∞îÏù¥Ïä§Ïóê Ï†ÅÏö©ÌïòÏãúÍ≤†ÏäµÎãàÍπå? (y/N): ",
        "local_state_updated": "‚úÖ Î°úÏª¨ ÏÉÅÌÉúÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§",
        "failed_update_local": "‚ùå Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®",
        "changes_not_applied": "‚è≠Ô∏è  Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ Î°úÏª¨ ÎîîÎ∞îÏù¥Ïä§Ïóê Ï†ÅÏö©ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§",
        "local_matches_desired": "‚úÖ Î°úÏª¨ ÏÉÅÌÉúÍ∞Ä ÏõêÌïòÎäî ÏÉÅÌÉúÏôÄ ÏùºÏπòÌï©ÎãàÎã§ - Î≥ÄÍ≤ΩÏù¥ ÌïÑÏöîÌïòÏßÄ ÏïäÏäµÎãàÎã§",
        "automatically_reporting": "üì° ÏóÖÎç∞Ïù¥Ìä∏Îêú ÏÉÅÌÉúÎ•º ShadowÏóê ÏûêÎèôÏúºÎ°ú Î≥¥Í≥† Ï§ë...",
        "local_state_saved": "üíæ Î°úÏª¨ ÏÉÅÌÉú Ï†ÄÏû•Îê®:",
        "created_default_state": "üìÑ Í∏∞Î≥∏ Î°úÏª¨ ÏÉÅÌÉú ÌååÏùº ÏÉùÏÑ±Îê®:",
        "default_state": "üìä Í∏∞Î≥∏ ÏÉÅÌÉú:",
        "using_existing_state": "üìÑ Í∏∞Ï°¥ Î°úÏª¨ ÏÉÅÌÉú ÌååÏùº ÏÇ¨Ïö©:",
        "current_local_state": "üìä ÌòÑÏû¨ Î°úÏª¨ ÏÉÅÌÉú:",
        "thank_you_message": "AWS IoT Device ShadowsÎ•º ÌÉêÏÉâÌï¥ Ï£ºÏÖîÏÑú Í∞êÏÇ¨Ìï©ÎãàÎã§!",
        "shadow_command_prompt": "üåü Shadow> ",
        "unknown_command": "‚ùå Ïïå Ïàò ÏóÜÎäî Î™ÖÎ†π: {}. ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Î™ÖÎ†πÏùÑ Î≥¥Î†§Î©¥ 'help'Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî.",
        "client_id_prompt": "ÏÇ¨Ïö©Ïûê Ï†ïÏùò ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ID ÏûÖÎ†• (ÎòêÎäî ÏûêÎèô ÏÉùÏÑ±ÌïòÎ†§Î©¥ Enter ÎàÑÎ¶Ñ): ",
        "client_id_auto_generated": "ÏûêÎèô ÏÉùÏÑ±Îêú ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ID",
        "client_id_custom": "ÏÇ¨Ïö©Ïûê Ï†ïÏùò ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ID",
        "client_id_invalid": "‚ùå ÏûòÎ™ªÎêú ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ IDÏûÖÎãàÎã§. 1-128Ïûê, ÏòÅÏà´Ïûê, ÌïòÏù¥Ìîà, Ïñ∏ÎçîÏä§ÏΩîÏñ¥Îßå ÏÇ¨Ïö© Í∞ÄÎä•Ìï©ÎãàÎã§.",
        "client_id_guidelines": "üí° ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ID Í∞ÄÏù¥ÎìúÎùºÏù∏:",
        "client_id_rules": [
            "‚Ä¢ Ïó∞Í≤∞ÎßàÎã§ Í≥†Ïú†Ìï¥Ïïº Ìï©ÎãàÎã§",
            "‚Ä¢ 1-128ÏûêÍ∞Ä ÌóàÏö©Îê©ÎãàÎã§",
            "‚Ä¢ ÏòÅÏà´Ïûê, ÌïòÏù¥Ìîà(-), Ïñ∏ÎçîÏä§ÏΩîÏñ¥(_) ÏÇ¨Ïö©",
            "‚Ä¢ Í≥µÎ∞±Í≥º ÌäπÏàò Î¨∏Ïûê ÌîºÌïòÍ∏∞",
            "‚Ä¢ ÏòàÏãú: my-device-001, sensor_temp_01",
        ],
    },
}

# Global variable for user's language preference
USER_LANG = "en"

# Global debug mode flag
DEBUG_MODE = False


def get_language():
    """Get user's preferred language"""
    # Check environment variable first
    env_lang = os.getenv("AWS_IOT_LANG", "").lower()
    if env_lang in ["es", "spanish", "espa√±ol"]:
        return "es"
    elif env_lang in ["en", "english"]:
        return "en"
    elif env_lang in ["ja", "japanese", "Êó•Êú¨Ë™û", "jp"]:
        return "ja"
    elif env_lang in ["zh-cn", "chinese", "‰∏≠Êñá", "zh"]:
        return "zh-CN"
    elif env_lang in ["pt-br", "portuguese", "portugu√™s", "pt"]:
        return "pt-BR"
    elif env_lang in ["ko", "korean", "ÌïúÍµ≠Ïñ¥", "kr"]:
        return "ko"

    # If no environment variable, ask user
    print("üåç Language Selection / Selecci√≥n de Idioma / Ë®ÄË™ûÈÅ∏Êäû / ËØ≠Ë®ÄÈÄâÊã© / Sele√ß√£o de Idioma / Ïñ∏Ïñ¥ ÏÑ†ÌÉù")
    print("=" * 80)
    print("1. English")
    print("2. Espa√±ol (Spanish)")
    print("3. Êó•Êú¨Ë™û (Japanese)")
    print("4. ‰∏≠Êñá (Chinese)")
    print("5. Portugu√™s (Portuguese)")
    print("6. ÌïúÍµ≠Ïñ¥ (Korean)")

    while True:
        try:
            choice = input(
                "Select language / Seleccionar idioma / Ë®ÄË™û„ÇíÈÅ∏Êäû / ÈÄâÊã©ËØ≠Ë®Ä / Selecionar idioma / Ïñ∏Ïñ¥ ÏÑ†ÌÉù (1-6): "
            ).strip()
            if choice == "1":
                return "en"
            elif choice == "2":
                return "es"
            elif choice == "3":
                return "ja"
            elif choice == "4":
                return "zh-CN"
            elif choice == "5":
                return "pt-BR"
            elif choice == "6":
                return "ko"
            else:
                print("Invalid choice. Please select 1-6.")
                print("Selecci√≥n inv√°lida. Por favor selecciona 1-6.")
                print("ÁÑ°Âäπ„Å™ÈÅ∏Êäû„Åß„Åô„ÄÇ1-6„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
                print("Êó†ÊïàÈÄâÊã©„ÄÇËØ∑ÈÄâÊã© 1-6„ÄÇ")
                print("Escolha inv√°lida. Por favor selecione 1-6.")
                print("ÏûòÎ™ªÎêú ÏÑ†ÌÉùÏûÖÎãàÎã§. 1-6ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.")
        except KeyboardInterrupt:
            print("Goodbye! / ¬°Adi√≥s! / „Åï„Çà„ÅÜ„Å™„ÇâÔºÅ / ÂÜçËßÅÔºÅ / Tchau! / ÏïàÎÖïÌûà Í∞ÄÏÑ∏Ïöî!")
            sys.exit(0)


def get_message(key, lang="en", category=None):
    """Get localized message"""
    # Check debug messages first
    debug_msg = MESSAGES.get("debug_messages", {}).get(lang, {}).get(key)
    if debug_msg:
        return debug_msg

    # Handle nested categories like workflow_titles
    if category:
        return MESSAGES.get(lang, MESSAGES["en"]).get(category, {}).get(key, key)

    return MESSAGES.get(lang, MESSAGES["en"]).get(key, key)


def get_learning_moment(moment_key, lang="en"):
    """Get localized learning moment"""
    return MESSAGES.get(lang, MESSAGES["en"]).get("learning_moments", {}).get(moment_key, {})


def print_learning_moment(moment_key, lang="en"):
    """Print a formatted learning moment"""
    moment = get_learning_moment(moment_key, lang)
    if moment:
        print(f"\n{moment.get('title', '')}")
        print(moment.get("content", ""))
        print(f"\nüîÑ NEXT: {moment.get('next', '')}")
        print(f"\n{get_message('press_enter', lang)}")
        try:
            input()
        except KeyboardInterrupt:
            print(f"\n{get_message('goodbye', lang)}")
            sys.exit(0)


def display_aws_context():
    """Display current AWS account and region information"""
    try:
        sts = boto3.client("sts")
        iot = boto3.client("iot")
        identity = sts.get_caller_identity()

        print(f"\n{get_message('aws_context_info', USER_LANG)}")
        print(f"   {get_message('account_id', USER_LANG)}: {identity['Account']}")
        print(f"   {get_message('region', USER_LANG)}: {iot.meta.region_name}")
    except Exception as e:
        print(f"\n{get_message('aws_context_error', USER_LANG)} {str(e)}")
        print(get_message("aws_credentials_reminder", USER_LANG))
    print()


class DeviceShadowExplorer:
    def __init__(self):
        self.connection = None
        self.connected = False
        self.thing_name = None
        self.shadow_name = None  # Classic shadow uses None
        self.local_state_file = None
        self.received_messages = []
        self.message_lock = threading.Lock()
        self.debug_mode = DEBUG_MODE
        self.last_shadow_response = None

    def print_header(self, title):
        """Print formatted header"""
        print(f"\nüåü {title}")
        print("=" * 60)

    def print_step(self, step, description):
        """Print step with formatting"""
        print(f"\nüîß Step {step}: {description}")
        print("-" * 50)

    def print_shadow_details(self, message_type, details):
        """Print detailed Shadow protocol information"""
        timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
        print(f"\nüìä Shadow {message_type} [{timestamp}]")
        print("-" * 40)

        for key, value in details.items():
            if isinstance(value, dict):
                print(f"   {key}:")
                for sub_key, sub_value in value.items():
                    print(f"      {sub_key}: {sub_value}")
            else:
                print(f"   {key}: {value}")

    def get_iot_endpoint(self, debug=False):
        """Get AWS IoT endpoint for the account"""
        try:
            iot = boto3.client("iot")

            if debug:
                print(get_message("debug_calling_describe_endpoint", USER_LANG))
                print(get_message("debug_input_parameters", USER_LANG))

            response = iot.describe_endpoint(endpointType="iot:Data-ATS")
            endpoint = response["endpointAddress"]

            if debug:
                print(get_message("debug_api_response", USER_LANG).format(json.dumps(response, indent=2, default=str)))

            print(get_message("iot_endpoint_discovery", USER_LANG))
            print(f"   {get_message('endpoint_type', USER_LANG)}: {get_message('endpoint_type_ats', USER_LANG)}")
            print(f"   {get_message('endpoint_url', USER_LANG)}: {endpoint}")
            print(f"   {get_message('port_mqtt_tls', USER_LANG)}")
            print(f"   {get_message('protocol_mqtt', USER_LANG)}")

            return endpoint
        except Exception as e:
            print(f"{get_message('error_getting_endpoint', USER_LANG)} {str(e)}")
            if debug:
                import traceback

                print(get_message("debug_full_traceback", USER_LANG))
                traceback.print_exc()
            return None

    def select_device_and_certificate(self, debug=False):
        """Select a device and its certificate for Shadow operations"""
        try:
            iot = boto3.client("iot")

            # Get all Things
            if debug:
                print(get_message("debug_calling_list_things", USER_LANG))
                print(get_message("debug_input_params_none", USER_LANG))

            things_response = iot.list_things()
            things = things_response.get("things", [])

            if debug:
                print(get_message("debug_found_things", USER_LANG).format(len(things)))
                print(get_message("debug_thing_names", USER_LANG).format([t["thingName"] for t in things]))

            if not things:
                print(get_message("no_things_found", USER_LANG))
                return None, None, None

            print(f"\n{get_message('available_devices', USER_LANG).format(len(things))}")
            for i, thing in enumerate(things, 1):
                print(
                    f"   {i}. {thing['thingName']} ({get_message('type', USER_LANG)}: {thing.get('thingTypeName', get_message('none', USER_LANG))})"
                )

            while True:
                try:
                    choice = (
                        int(input(f"\n{get_message('select_option', USER_LANG).replace('(1-6)', f'(1-{len(things)})')}: ")) - 1
                    )
                    if 0 <= choice < len(things):
                        selected_thing = things[choice]["thingName"]
                        break
                    else:
                        print(get_message("invalid_selection", USER_LANG).format(len(things)))
                except ValueError:
                    print(get_message("enter_valid_number", USER_LANG))
                except KeyboardInterrupt:
                    print(f"\n{get_message('operation_cancelled', USER_LANG)}")
                    return None, None, None

            print(f"{get_message('selected_device', USER_LANG)} {selected_thing}")

            # Get certificates for the selected Thing
            if debug:
                print(get_message("debug_calling_list_principals", USER_LANG))
                print(get_message("debug_input_thing_name", USER_LANG).format(selected_thing))

            principals_response = iot.list_thing_principals(thingName=selected_thing)
            principals = principals_response.get("principals", [])
            cert_arns = [p for p in principals if "cert/" in p]

            if debug:
                print(get_message("debug_found_principals", USER_LANG).format(len(principals), len(cert_arns)))
                print(get_message("debug_cert_arns", USER_LANG).format(cert_arns))

            if not cert_arns:
                print(get_message("no_certificates_found", USER_LANG).format(selected_thing))
                print(get_message("run_certificate_manager", USER_LANG))
                return None, None, None

            # Select certificate if multiple
            if len(cert_arns) == 1:
                selected_cert_arn = cert_arns[0]
                cert_id = selected_cert_arn.split("/")[-1]
                print(f"{get_message('using_certificate', USER_LANG)} {cert_id}")
            else:
                print(f"\n{get_message('multiple_certificates_found', USER_LANG)}")
                for i, cert_arn in enumerate(cert_arns, 1):
                    cert_id = cert_arn.split("/")[-1]
                    print(f"   {i}. {cert_id}")

                while True:
                    try:
                        choice = int(input(get_message("select_certificate", USER_LANG).format(len(cert_arns)))) - 1
                        if 0 <= choice < len(cert_arns):
                            selected_cert_arn = cert_arns[choice]
                            cert_id = selected_cert_arn.split("/")[-1]
                            break
                        else:
                            print(get_message("invalid_selection_cert", USER_LANG))
                    except ValueError:
                        print(get_message("enter_valid_number", USER_LANG))

            # Find certificate files
            cert_dir = os.path.join(os.getcwd(), "certificates", selected_thing)
            if not os.path.exists(cert_dir):
                print(f"{get_message('cert_dir_not_found', USER_LANG)} {cert_dir}")
                print(get_message("run_cert_manager_files", USER_LANG))
                return None, None, None

            cert_file = None
            key_file = None

            for file in os.listdir(cert_dir):
                if cert_id in file:
                    if file.endswith(".crt"):
                        cert_file = os.path.join(cert_dir, file)
                    elif file.endswith(".key"):
                        key_file = os.path.join(cert_dir, file)

            if not cert_file or not key_file:
                print(get_message("cert_files_not_found", USER_LANG).format(cert_dir))
                print(f"   {get_message('looking_for_files', USER_LANG).format(cert_id)}")
                return None, None, None

            print(get_message("certificate_files_found", USER_LANG))
            print(f"   {get_message('certificate', USER_LANG)}: {cert_file}")
            print(f"   {get_message('private_key', USER_LANG)}: {key_file}")

            return selected_thing, cert_file, key_file

        except Exception as e:
            print(f"{get_message('error_selecting_device', USER_LANG)} {str(e)}")
            return None, None, None

    def setup_local_state_file(self, thing_name, debug=False):
        """Setup local state file for device shadow simulation"""
        # Validate thing_name to prevent path traversal
        if not re.match(r"^[a-zA-Z0-9_-]+$", thing_name):
            print(f"{get_message('invalid_thing_name', USER_LANG)} {thing_name}")
            return None

        cert_dir = os.path.join(os.getcwd(), "certificates", thing_name)
        # Validate the constructed path stays within certificates directory
        if not os.path.abspath(cert_dir).startswith(os.path.abspath(os.path.join(os.getcwd(), "certificates"))):
            print(f"{get_message('unsafe_path_detected', USER_LANG)} {thing_name}")
            return None

        state_file = os.path.join(cert_dir, "device_state.json")

        if debug:
            print(get_message("debug_setting_up_state", USER_LANG).format(state_file))
            print(get_message("debug_cert_directory", USER_LANG).format(cert_dir))
            print(get_message("debug_file_exists", USER_LANG).format(os.path.exists(state_file)))

        # Create default state if file doesn't exist
        if not os.path.exists(state_file):
            default_state = {
                "temperature": 22.5,
                "humidity": 45.0,
                "status": "online",
                "firmware_version": "1.0.0",
                "last_updated": datetime.now().isoformat(),
            }

            with open(state_file, "w", encoding="utf-8") as f:
                json.dump(default_state, f, indent=2)

            print(f"{get_message('created_default_state', USER_LANG)} {state_file}")
            print(f"{get_message('default_state', USER_LANG)} {json.dumps(default_state, indent=2)}")
            if debug:
                print(get_message("debug_created_new_state", USER_LANG).format(len(default_state)))
        else:
            print(f"{get_message('using_existing_state', USER_LANG)} {state_file}")
            with open(state_file, "r", encoding="utf-8") as f:
                current_state = json.load(f)
            print(f"{get_message('current_local_state', USER_LANG)} {json.dumps(current_state, indent=2)}")
            if debug:
                print(get_message("debug_loaded_existing_state", USER_LANG).format(len(current_state)))
                print(get_message("debug_file_size", USER_LANG).format(os.path.getsize(state_file)))

        self.local_state_file = state_file
        return state_file

    def load_local_state(self):
        """Load current local device state"""
        try:
            with open(self.local_state_file, "r", encoding="utf-8") as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"{get_message('local_state_not_found', USER_LANG)} {self.local_state_file}")
            return {}
        except json.JSONDecodeError as e:
            print(f"{get_message('invalid_json_state', USER_LANG)} {str(e)}")
            return {}
        except PermissionError:
            print(f"{get_message('permission_denied_state', USER_LANG)} {self.local_state_file}")
            return {}
        except Exception as e:
            print(f"{get_message('unexpected_error_loading', USER_LANG)} {str(e)}")
            return {}

    def save_local_state(self, state):
        """Save device state to local file"""
        try:
            state["last_updated"] = datetime.now().isoformat()
            with open(self.local_state_file, "w", encoding="utf-8") as f:
                json.dump(state, f, indent=2)
            print(f"{get_message('local_state_saved', USER_LANG)} {self.local_state_file}")
            return True
        except PermissionError:
            print(f"{get_message('permission_denied_writing', USER_LANG)} {self.local_state_file}")
            return False
        except OSError as e:
            print(f"{get_message('filesystem_error_saving', USER_LANG)} {str(e)}")
            return False
        except TypeError as e:
            print(f"{get_message('invalid_state_data', USER_LANG)} {str(e)}")
            return False
        except Exception as e:
            print(f"{get_message('unexpected_error_saving', USER_LANG)} {str(e)}")
            return False

    def on_connection_interrupted(self, connection, error, **kwargs):
        """Callback for connection interruption"""
        self.print_shadow_details(
            get_message("connection_interrupted", USER_LANG),
            {
                get_message("error", USER_LANG): str(error),
                get_message("timestamp", USER_LANG): datetime.now().isoformat(),
                get_message("auto_reconnect", USER_LANG): get_message("sdk_will_reconnect", USER_LANG),
            },
        )
        self.connected = False

    def on_connection_resumed(self, connection, return_code, session_present, **kwargs):
        """Callback for connection resumption"""
        self.print_shadow_details(
            get_message("connection_resumed", USER_LANG),
            {
                get_message("return_code", USER_LANG): return_code,
                get_message("session_present", USER_LANG): session_present,
                get_message("timestamp", USER_LANG): datetime.now().isoformat(),
                get_message("status", USER_LANG): get_message("connection_restored", USER_LANG),
            },
        )
        self.connected = True

    def on_shadow_message_received(self, topic, payload, dup, qos, retain, **kwargs):
        """Callback for Shadow messages with comprehensive analysis"""
        try:
            # Parse shadow message
            try:
                shadow_data = json.loads(payload.decode("utf-8"))
                payload_display = json.dumps(shadow_data, indent=2)
            except (json.JSONDecodeError, UnicodeDecodeError):
                payload_display = payload.decode("utf-8")
                shadow_data = {}

            message_info = {
                get_message("direction", USER_LANG): get_message("received", USER_LANG),
                get_message("topic", USER_LANG): topic,
                get_message("qos", USER_LANG): qos,
                get_message("payload_size", USER_LANG): f"{len(payload)} bytes",
                get_message("timestamp", USER_LANG): datetime.now().isoformat(),
                get_message("shadow_data", USER_LANG): shadow_data,
            }

            with self.message_lock:
                self.received_messages.append(message_info)
                # Store last response for shadow existence checking
                self.last_shadow_response = shadow_data

            # Immediate visual notification
            timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
            print("\n" + "=" * 70)
            print(f"{get_message('shadow_message_received', USER_LANG)} [{timestamp}]")
            print("=" * 70)

            if self.debug_mode:
                print(get_message("debug_raw_topic", USER_LANG).format(topic))
                print(get_message("debug_qos_duplicate", USER_LANG).format(qos, dup, retain))
                print(get_message("debug_payload_size", USER_LANG).format(len(payload)))
                print(get_message("debug_message_count", USER_LANG).format(len(self.received_messages)))

            # Analyze topic to determine message type
            if "get" in topic and "accepted" in topic:
                self.handle_shadow_get_accepted(shadow_data)
            elif "get" in topic and "rejected" in topic:
                self.handle_shadow_get_rejected(shadow_data)
            elif "update" in topic and "accepted" in topic:
                self.handle_shadow_update_accepted(shadow_data)
            elif "update" in topic and "rejected" in topic:
                self.handle_shadow_update_rejected(shadow_data)
            elif "update" in topic and "delta" in topic:
                self.handle_shadow_delta(shadow_data)
            else:
                print(f"üì• {get_message('topic', USER_LANG)}: {topic}")
                print(f"üè∑Ô∏è  {get_message('qos', USER_LANG)}: {qos}")
                print(f"üìä Payload: {payload_display}")
                if self.debug_mode:
                    print(get_message("debug_unrecognized_topic", USER_LANG))

            print("=" * 70)

        except Exception as e:
            print(f"\n{get_message('error_processing_message', USER_LANG)} {str(e)}")

    def handle_shadow_get_accepted(self, shadow_data):
        """Handle shadow get accepted response"""
        print(get_message("shadow_get_accepted", USER_LANG))
        if self.debug_mode:
            print(f"   üìù {get_message('topic', USER_LANG)}: $aws/things/{self.thing_name}/shadow/get/accepted")
        print(get_message("shadow_document_retrieved", USER_LANG))

        state = shadow_data.get("state", {})
        desired = state.get("desired", {})
        reported = state.get("reported", {})
        version = shadow_data.get("version", "Unknown")

        print(f"   üìä {get_message('version', USER_LANG)}: {version}")
        print(
            f"   üéØ {get_message('desired_state', USER_LANG)}: {json.dumps(desired, indent=6) if desired else get_message('none', USER_LANG)}"
        )
        print(
            f"   üì° {get_message('reported_state', USER_LANG)}: {json.dumps(reported, indent=6) if reported else get_message('none', USER_LANG)}"
        )

        # Compare with local state
        if desired:
            if self.debug_mode:
                print(get_message("debug_comparing_desired", USER_LANG))
                print(get_message("debug_desired_keys", USER_LANG).format(list(desired.keys())))
            self.compare_and_prompt_update(desired)
        elif self.debug_mode:
            print(get_message("debug_no_desired_state", USER_LANG))

    def handle_shadow_get_rejected(self, shadow_data):
        """Handle shadow get rejected response"""
        print(get_message("shadow_get_rejected", USER_LANG))
        if self.debug_mode:
            print(f"   üìù {get_message('topic', USER_LANG)}: $aws/things/{self.thing_name}/shadow/get/rejected")
        error_code = shadow_data.get("code", "Unknown")
        error_message = shadow_data.get("message", "No message")
        print(f"   üö´ {get_message('error_code', USER_LANG)}: {error_code}")
        print(f"   üìù {get_message('message', USER_LANG)}: {error_message}")

        # Store error code for shadow existence checking
        with self.message_lock:
            self.last_shadow_response = {"error_code": error_code, "error_message": error_message}

        if error_code == 404:
            print(f"   üí° {get_message('shadow_doesnt_exist', USER_LANG)}")
            if self.debug_mode:
                print(get_message("debug_normal_for_new", USER_LANG))
        elif self.debug_mode:
            print(get_message("debug_error_code_indicates", USER_LANG).format(error_code, error_message))

    def handle_shadow_update_accepted(self, shadow_data):
        """Handle shadow update accepted response"""
        print(get_message("shadow_update_accepted", USER_LANG))
        if self.debug_mode:
            print(f"   üìù {get_message('topic', USER_LANG)}: $aws/things/{self.thing_name}/shadow/update/accepted")
        state = shadow_data.get("state", {})
        version = shadow_data.get("version", "Unknown")
        timestamp = shadow_data.get("timestamp", "Unknown")

        print(f"   üìä {get_message('new_version', USER_LANG)}: {version}")
        print(f"   ‚è∞ {get_message('timestamp', USER_LANG)}: {timestamp}")
        if "desired" in state:
            print(f"   üéØ {get_message('updated_desired', USER_LANG)}: {json.dumps(state['desired'], indent=6)}")
        if "reported" in state:
            print(f"   üì° {get_message('updated_reported', USER_LANG)}: {json.dumps(state['reported'], indent=6)}")

    def handle_shadow_update_rejected(self, shadow_data):
        """Handle shadow update rejected response"""
        print(get_message("shadow_update_rejected", USER_LANG))
        if self.debug_mode:
            print(f"   üìù {get_message('topic', USER_LANG)}: $aws/things/{self.thing_name}/shadow/update/rejected")
        error_code = shadow_data.get("code", "Unknown")
        error_message = shadow_data.get("message", "No message")
        print(f"   üö´ {get_message('error_code', USER_LANG)}: {error_code}")
        print(f"   üìù {get_message('message', USER_LANG)}: {error_message}")

    def handle_shadow_delta(self, shadow_data):
        """Handle shadow delta message (desired != reported)"""
        print(get_message("shadow_delta_received", USER_LANG))
        if self.debug_mode:
            print(f"   üìù {get_message('topic', USER_LANG)}: $aws/things/{self.thing_name}/shadow/update/delta")
        print(f"   üìù {get_message('description', USER_LANG)}: {get_message('desired_differs_reported', USER_LANG)}")

        state = shadow_data.get("state", {})
        version = shadow_data.get("version", "Unknown")
        timestamp = shadow_data.get("timestamp", "Unknown")

        print(f"   üìä {get_message('version', USER_LANG)}: {version}")
        print(f"   ‚è∞ {get_message('timestamp', USER_LANG)}: {timestamp}")
        print(f"   üîÑ {get_message('changes_needed', USER_LANG)}: {json.dumps(state, indent=6)}")

        # Prompt user to apply changes
        if self.debug_mode:
            print(get_message("debug_processing_delta", USER_LANG).format(len(state)))
            print(get_message("debug_delta_keys", USER_LANG).format(list(state.keys())))
        self.compare_and_prompt_update(state, is_delta=True)

    def compare_and_prompt_update(self, desired_state, is_delta=False):
        """Compare desired state with local state and prompt for updates"""
        local_state = self.load_local_state()

        if self.debug_mode:
            print(get_message("debug_loaded_local_state", USER_LANG).format(len(local_state)))
            print(get_message("debug_comparing_properties", USER_LANG).format(len(desired_state)))

        print(f"\n{get_message('state_comparison', USER_LANG)}")
        print(f"   üì± {get_message('local_state', USER_LANG)}: {json.dumps(local_state, indent=6)}")
        print(
            f"   {get_message('delta', USER_LANG) if is_delta else get_message('desired', USER_LANG)}: {json.dumps(desired_state, indent=6)}"
        )

        # Find differences
        differences = {}
        for key, desired_value in desired_state.items():
            local_value = local_state.get(key)
            if local_value != desired_value:
                differences[key] = {"local": local_value, "desired": desired_value}

        if differences:
            if self.debug_mode:
                print(get_message("debug_differences_found", USER_LANG).format(len(differences), len(desired_state)))
            print(f"\n{get_message('differences_found', USER_LANG)}")
            for key, diff in differences.items():
                print(f"   ‚Ä¢ {key}: {diff['local']} ‚Üí {diff['desired']}")
                if self.debug_mode:
                    print(
                        get_message("debug_type_change", USER_LANG).format(
                            type(diff["local"]).__name__, type(diff["desired"]).__name__
                        )
                    )

            apply_changes = input(f"\n{get_message('apply_changes_prompt', USER_LANG)}").strip().lower()
            if apply_changes == "y":
                time.sleep(0.1)  # nosemgrep: arbitrary-sleep
                # Update local state
                for key, desired_value in desired_state.items():
                    local_state[key] = desired_value

                if self.save_local_state(local_state):
                    if self.debug_mode:
                        print(get_message("debug_updated_properties", USER_LANG).format(len(desired_state)))
                        print(get_message("debug_new_state_size", USER_LANG).format(len(local_state)))
                    print(get_message("local_state_updated", USER_LANG))

                    # Automatically report back to shadow (required for proper synchronization)
                    print(get_message("automatically_reporting", USER_LANG))
                    self.update_shadow_reported(local_state)
                    time.sleep(1.5)  # nosemgrep: arbitrary-sleep
                else:
                    print(get_message("failed_update_local", USER_LANG))
            else:
                print(get_message("changes_not_applied", USER_LANG))
        else:
            if self.debug_mode:
                print(get_message("debug_all_match", USER_LANG).format(len(desired_state)))
            print(get_message("local_matches_desired", USER_LANG))

    def validate_client_id(self, client_id):
        """Validate MQTT Client ID according to AWS IoT requirements"""
        if not client_id:
            return False

        # Length check: 1-128 characters
        if len(client_id) < 1 or len(client_id) > 128:
            return False

        # Character check: alphanumeric, hyphens, and underscores only
        import re

        if not re.match(r"^[a-zA-Z0-9_-]+$", client_id):
            return False

        return True

    def get_client_id(self, thing_name):
        """Get client ID from user input or generate automatically"""
        print(f"\n{get_message('client_id_guidelines', USER_LANG)}")
        for rule in get_message("client_id_rules", USER_LANG):
            print(f"   {rule}")

        while True:
            try:
                custom_id = input(f"\n{get_message('client_id_prompt', USER_LANG)}").strip()

                if not custom_id:
                    # Auto-generate client ID
                    client_id = f"{thing_name}-shadow-{uuid.uuid4().hex[:8]}"
                    print(f"   {get_message('client_id_auto_generated', USER_LANG)}: {client_id}")
                    return client_id
                else:
                    # Validate custom client ID
                    if self.validate_client_id(custom_id):
                        print(f"   {get_message('client_id_custom', USER_LANG)}: {custom_id}")
                        return custom_id
                    else:
                        print(f"   {get_message('client_id_invalid', USER_LANG)}")
                        continue

            except KeyboardInterrupt:
                print(f"\n{get_message('operation_cancelled', USER_LANG)}")
                return None

    def connect_to_aws_iot(self, thing_name, cert_file, key_file, endpoint, debug=False):
        """Establish MQTT connection to AWS IoT Core for Shadow operations"""
        self.print_step(1, get_message("step_establishing_connection", USER_LANG))

        if debug:
            print(get_message("debug_shadow_connection_setup", USER_LANG))
            print(get_message("debug_thing_name", USER_LANG).format(thing_name))
            print(get_message("debug_cert_file", USER_LANG).format(cert_file))
            print(get_message("debug_private_key_file", USER_LANG).format(key_file))
            print(get_message("debug_endpoint", USER_LANG).format(endpoint))

        try:
            # Get client ID from user or auto-generate
            client_id = self.get_client_id(thing_name)
            if not client_id:
                return False

            print(get_message("shadow_connection_params", USER_LANG))
            print(f"   {get_message('client_id', USER_LANG)}: {client_id}")
            print(f"   {get_message('thing_name', USER_LANG)}: {thing_name}")
            print(f"   {get_message('endpoint', USER_LANG)}: {endpoint}")
            print(f"   {get_message('port', USER_LANG)}: 8883")
            print(f"   {get_message('protocol', USER_LANG)}: MQTT 3.1.1 over TLS")
            print(f"   {get_message('authentication', USER_LANG)}: X.509 Certificate")
            print(f"   {get_message('shadow_type', USER_LANG)}: {get_message('shadow_type_classic', USER_LANG)}")

            # Build MQTT connection
            self.connection = mqtt_connection_builder.mtls_from_path(
                endpoint=endpoint,
                port=8883,
                cert_filepath=cert_file,
                pri_key_filepath=key_file,
                client_id=client_id,
                clean_session=True,
                keep_alive_secs=30,
                on_connection_interrupted=self.on_connection_interrupted,
                on_connection_resumed=self.on_connection_resumed,
            )

            print(f"\n{get_message('connecting_to_iot', USER_LANG)}")
            connect_future = self.connection.connect()
            connection_result = connect_future.result()

            if debug:
                print(get_message("debug_connection_result", USER_LANG).format(connection_result))

            self.connected = True
            self.thing_name = thing_name

            self.print_shadow_details(
                get_message("connection_established", USER_LANG),
                {
                    get_message("status", USER_LANG): get_message("connection_status", USER_LANG),
                    get_message("client_id", USER_LANG): client_id,
                    get_message("thing_name", USER_LANG): thing_name,
                    get_message("endpoint", USER_LANG): endpoint,
                    get_message("shadow_type", USER_LANG): get_message("shadow_type_classic", USER_LANG),
                    get_message("clean_session", USER_LANG): True,
                    get_message("keep_alive", USER_LANG): "30 seconds",
                    get_message("tls_version", USER_LANG): "1.2",
                    get_message("certificate_auth", USER_LANG): "X.509 mutual TLS",
                },
            )

            return True

        except Exception as e:
            print(f"{get_message('shadow_connection_failed', USER_LANG)} {str(e)}")
            return False

    def subscribe_to_shadow_topics(self, debug=False):
        """Subscribe to all relevant shadow topics"""
        self.print_step(2, get_message("step_subscribing_topics", USER_LANG))

        if not self.connected:
            print(get_message("not_connected", USER_LANG))
            return False

        # Shadow topic patterns for classic shadow
        shadow_topics = [
            f"$aws/things/{self.thing_name}/shadow/get/accepted",
            f"$aws/things/{self.thing_name}/shadow/get/rejected",
            f"$aws/things/{self.thing_name}/shadow/update/accepted",
            f"$aws/things/{self.thing_name}/shadow/update/rejected",
            f"$aws/things/{self.thing_name}/shadow/update/delta",
        ]

        print(f"{get_message('shadow_topics_for_thing', USER_LANG)} {self.thing_name}")
        print(get_message("classic_shadow_topics", USER_LANG))

        success_count = 0
        for topic in shadow_topics:
            try:
                if debug:
                    print(get_message("debug_subscribing_topic", USER_LANG).format(topic))

                subscribe_future, packet_id = self.connection.subscribe(
                    topic=topic, qos=mqtt.QoS.AT_LEAST_ONCE, callback=self.on_shadow_message_received
                )

                subscribe_future.result()

                print(f"   ‚úÖ {topic}")
                success_count += 1

                if debug:
                    print(get_message("debug_subscription_successful", USER_LANG).format(packet_id))

            except Exception as e:
                print(f"   ‚ùå {topic} - Error: {str(e)}")

        if success_count == len(shadow_topics):
            print(f"\n{get_message('subscription_successful', USER_LANG).format(success_count)}")

            print(f"\n{get_message('shadow_topic_explanations', USER_LANG)}")
            print(f"   {get_message('topic_get_accepted', USER_LANG)}")
            print(f"   {get_message('topic_get_rejected', USER_LANG)}")
            print(f"   {get_message('topic_update_accepted', USER_LANG)}")
            print(f"   {get_message('topic_update_rejected', USER_LANG)}")
            print(f"   {get_message('topic_update_delta', USER_LANG)}")

            return True
        else:
            print(get_message("subscription_partial", USER_LANG).format(success_count, len(shadow_topics)))
            return False

    def get_shadow_document(self, debug=False, wait_for_response=False):
        """Request the current shadow document"""
        if not self.connected:
            print(get_message("not_connected", USER_LANG))
            return False

        try:
            get_topic = f"$aws/things/{self.thing_name}/shadow/get"

            print(f"\n{get_message('requesting_shadow_document', USER_LANG)}")
            print(f"   {get_message('topic', USER_LANG)}: {get_topic}")
            print(f"   {get_message('thing', USER_LANG)}: {self.thing_name}")
            print(f"   {get_message('shadow_type', USER_LANG)}: {get_message('shadow_type_classic', USER_LANG)}")

            if debug:
                print(get_message("debug_publishing_shadow_get", USER_LANG))
                print(get_message("debug_topic", USER_LANG).format(get_topic))
                print(get_message("debug_payload_empty", USER_LANG))

            # Shadow get requests have empty payload
            publish_future, packet_id = self.connection.publish(topic=get_topic, payload="", qos=mqtt.QoS.AT_LEAST_ONCE)

            # Non-blocking publish - don't wait for result
            timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
            print(f"{get_message('shadow_get_request_sent', USER_LANG)} [{timestamp}]")
            print(f"   üì§ {get_message('topic', USER_LANG)}: {get_topic}")
            print(f"   üè∑Ô∏è  {get_message('qos', USER_LANG)}: 1 | {get_message('packet_id', USER_LANG)}: {packet_id}")
            print(f"   {get_message('waiting_for_response', USER_LANG)}")

            return True

        except Exception as e:
            print(f"{get_message('failed_request_shadow', USER_LANG)} {str(e)}")
            return False

    def update_shadow_reported(self, reported_state, debug=False):
        """Update the reported state in the shadow"""
        if not self.connected:
            print(get_message("not_connected", USER_LANG))
            return False

        try:
            update_topic = f"$aws/things/{self.thing_name}/shadow/update"

            print(f"\n{get_message('updating_shadow_reported', USER_LANG)}")
            print(f"\n{get_message('reported_state_update', USER_LANG)}")
            print(f"   {get_message('current_local_state_label', USER_LANG)}: {json.dumps(reported_state, indent=2)}")

            # Create shadow update payload
            shadow_update = {"state": {"reported": reported_state}}

            print(f"   {get_message('shadow_update_payload', USER_LANG)}: {json.dumps(shadow_update, indent=2)}")

            payload = json.dumps(shadow_update)

            if debug:
                print(get_message("debug_publishing_shadow_update", USER_LANG))
                print(get_message("debug_topic", USER_LANG).format(update_topic))
                print(get_message("debug_payload_json", USER_LANG).format(json.dumps(shadow_update, indent=2)))
                print(get_message("debug_update_type", USER_LANG).format("reported"))

            publish_future, packet_id = self.connection.publish(
                topic=update_topic, payload=payload, qos=mqtt.QoS.AT_LEAST_ONCE
            )

            # Non-blocking publish - don't wait for result
            timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
            print(f"{get_message('shadow_update_sent', USER_LANG)} [{timestamp}]")
            print(f"   üì§ {get_message('topic', USER_LANG)}: {update_topic}")
            print(f"   üè∑Ô∏è  {get_message('qos', USER_LANG)}: 1 | {get_message('packet_id', USER_LANG)}: {packet_id}")
            print(f"   {get_message('waiting_for_response', USER_LANG)}")

            return True

        except Exception as e:
            print(f"{get_message('failed_update_reported', USER_LANG)} {str(e)}")
            return False

    def update_shadow_desired(self, desired_state, debug=False):
        """Update the desired state in the shadow (simulates cloud/app request)"""
        if not self.connected:
            print(get_message("not_connected", USER_LANG))
            return False

        try:
            update_topic = f"$aws/things/{self.thing_name}/shadow/update"

            print(f"\n{get_message('updating_shadow_desired', USER_LANG)}")
            print(f"\n{get_message('desired_state_update', USER_LANG)}")
            print(f"   {get_message('desired_state_to_set', USER_LANG)}: {json.dumps(desired_state, indent=2)}")

            # Create shadow update payload
            shadow_update = {"state": {"desired": desired_state}}

            payload = json.dumps(shadow_update)

            print(f"   {get_message('shadow_update_payload', USER_LANG)}: {json.dumps(shadow_update, indent=2)}")
            print(f"   {get_message('topic', USER_LANG)}: {update_topic}")
            print(f"   {get_message('thing', USER_LANG)}: {self.thing_name}")
            if debug:
                print(get_message("debug_publishing_shadow_update", USER_LANG))
                print(get_message("debug_topic", USER_LANG).format(update_topic))
                print(get_message("debug_payload_json", USER_LANG).format(json.dumps(shadow_update, indent=2)))
                print(get_message("debug_update_type", USER_LANG).format("desired"))

            publish_future, packet_id = self.connection.publish(
                topic=update_topic, payload=payload, qos=mqtt.QoS.AT_LEAST_ONCE
            )

            # Non-blocking publish - don't wait for result
            timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
            print(f"{get_message('shadow_update_desired_sent', USER_LANG)} [{timestamp}]")
            print(f"   üì§ {get_message('topic', USER_LANG)}: {update_topic}")
            print(f"   üè∑Ô∏è  {get_message('qos', USER_LANG)}: 1 | {get_message('packet_id', USER_LANG)}: {packet_id}")
            print(f"   {get_message('waiting_for_response', USER_LANG)}")

            return True

        except Exception as e:
            print(f"{get_message('failed_update_desired', USER_LANG)} {str(e)}")
            return False

    def run_interactive_menu(self):
        """Run the interactive menu system"""
        connected = False
        start_time = time.time()

        while True:
            try:
                print(f"\n{get_message('main_menu', USER_LANG)}")
                for option in get_message("menu_options", USER_LANG):
                    print(f"   {option}")

                choice = input(f"\n{get_message('select_option', USER_LANG)}")

                if choice == "1":
                    if not connected:
                        print_learning_moment("shadow_connection", USER_LANG)

                        # Get IoT endpoint
                        endpoint = self.get_iot_endpoint(debug=self.debug_mode)
                        if not endpoint:
                            continue

                        # Select device and certificate
                        thing_name, cert_file, key_file = self.select_device_and_certificate(debug=self.debug_mode)
                        if not thing_name:
                            continue

                        # Setup local state file
                        self.setup_local_state_file(thing_name, debug=self.debug_mode)

                        # Connect to AWS IoT
                        if self.connect_to_aws_iot(thing_name, cert_file, key_file, endpoint, debug=self.debug_mode):
                            # Subscribe to shadow topics
                            if self.subscribe_to_shadow_topics(debug=self.debug_mode):
                                connected = True
                                start_time = time.time()
                                print(f"\n‚úÖ {get_message('connection_established', USER_LANG)}")
                            else:
                                print("\n‚ùå Failed to subscribe to shadow topics")
                        else:
                            print("\n‚ùå Failed to connect to AWS IoT")
                    else:
                        print("\n‚úÖ Already connected to AWS IoT Core")

                elif choice == "2":
                    if not connected:
                        print(f"\n‚ùå {get_message('not_connected', USER_LANG)}")
                        print("üí° Please connect first (option 1)")
                        continue

                    print_learning_moment("shadow_document", USER_LANG)
                    self.get_shadow_document(debug=self.debug_mode)

                elif choice == "3":
                    if not connected:
                        print(f"\n‚ùå {get_message('not_connected', USER_LANG)}")
                        print("üí° Please connect first (option 1)")
                        continue

                    print_learning_moment("reported_state", USER_LANG)
                    local_state = self.load_local_state()
                    self.update_shadow_reported(local_state, debug=self.debug_mode)

                elif choice == "4":
                    if not connected:
                        print(f"\n‚ùå {get_message('not_connected', USER_LANG)}")
                        print("üí° Please connect first (option 1)")
                        continue

                    print_learning_moment("desired_state", USER_LANG)
                    self.update_shadow_desired_interactive()

                elif choice == "5":
                    if not connected:
                        print(f"\n‚ùå {get_message('not_connected', USER_LANG)}")
                        print("üí° Please connect first (option 1)")
                        continue

                    print_learning_moment("state_simulation", USER_LANG)
                    self.simulate_device_state_changes()

                elif choice == "6":
                    if not connected:
                        print(f"\n‚ùå {get_message('not_connected', USER_LANG)}")
                        print("üí° Please connect first (option 1)")
                        continue

                    self.view_shadow_message_history()

                elif choice == "7":
                    if connected:
                        self.disconnect_and_summarize(start_time)
                    print(f"\n{get_message('goodbye', USER_LANG)}")
                    break

                else:
                    print(get_message("invalid_choice", USER_LANG))

            except KeyboardInterrupt:
                print(f"\n\n{get_message('operation_cancelled', USER_LANG)}")
                if connected:
                    self.disconnect_and_summarize(start_time)
                break
            except Exception as e:
                print(f"\n‚ùå Error: {str(e)}")
                if self.debug_mode:
                    import traceback

                    traceback.print_exc()

    def run_auto_connect_and_interactive(self):
        """Auto-connect and run interactive shadow management"""
        print_learning_moment("shadow_connection", USER_LANG)

        # Get IoT endpoint
        endpoint = self.get_iot_endpoint(debug=self.debug_mode)
        if not endpoint:
            print("‚ùå Failed to get IoT endpoint")
            return

        # Select device and certificate
        thing_name, cert_file, key_file = self.select_device_and_certificate(debug=self.debug_mode)
        if not thing_name:
            print("‚ùå Failed to select device and certificate")
            return

        # Setup local state file
        self.setup_local_state_file(thing_name, debug=self.debug_mode)

        # Connect to AWS IoT
        if not self.connect_to_aws_iot(thing_name, cert_file, key_file, endpoint, debug=self.debug_mode):
            print("‚ùå Failed to connect to AWS IoT")
            return

        # Subscribe to shadow topics
        if not self.subscribe_to_shadow_topics(debug=self.debug_mode):
            print("‚ùå Failed to subscribe to shadow topics")
            return

        print(f"\n‚úÖ {get_message('connection_established', USER_LANG)}")

        # Check if shadow exists, create if it doesn't
        self.ensure_shadow_exists()

        # Go directly into interactive shadow management
        self.interactive_shadow_management()

    def ensure_shadow_exists(self):
        """Ensure shadow exists by creating it if necessary"""
        print(f"\nüîç {get_message('checking_shadow_exists', USER_LANG).format(self.thing_name)}")

        # Try to get the shadow first
        shadow_exists = False

        try:
            # Send get request and wait for response
            self.get_shadow_document(debug=self.debug_mode, wait_for_response=True)

            # Wait a moment for the response
            time.sleep(2)  # nosemgrep: arbitrary-sleep

            # Check if we got a successful response
            if hasattr(self, "last_shadow_response") and self.last_shadow_response:
                if "error_code" not in self.last_shadow_response or self.last_shadow_response.get("error_code") != 404:
                    shadow_exists = True

        except Exception as e:
            print(f"‚ö†Ô∏è Error checking shadow existence: {str(e)}")

        if not shadow_exists:
            print(f"üìù {get_message('creating_initial_shadow', USER_LANG)}")
            print(f"üí° {get_message('shadow_creation_normal', USER_LANG)}")

            # Report current local state to create the shadow
            try:
                # Load local state and report it to create the shadow
                local_state = self.load_local_state()
                if local_state:
                    self.update_shadow_reported(local_state, debug=self.debug_mode)
                else:
                    # Create a basic initial state if no local state exists
                    initial_state = {"temperature": 22.5, "humidity": 45.0, "status": "online", "firmware_version": "1.0.0"}
                    self.update_shadow_reported(initial_state, debug=self.debug_mode)
                print(f"‚úÖ {get_message('initial_shadow_created', USER_LANG)}")

                # Wait a moment for the shadow to be created
                time.sleep(3)  # nosemgrep: arbitrary-sleep

                # Now get the shadow to confirm it exists
                print(f"üîÑ {get_message('retrieving_new_shadow', USER_LANG)}")
                self.get_shadow_document(debug=self.debug_mode)

            except Exception as e:
                print(f"‚ùå Error creating initial shadow: {str(e)}")
        else:
            print(f"‚úÖ {get_message('shadow_already_exists', USER_LANG)}")

    def update_shadow_desired_interactive(self):
        """Interactive desired state update"""
        print(f"\n{get_message('updating_shadow_desired', USER_LANG)}")

        property_name = input(get_message("enter_property_name", USER_LANG)).strip()
        if not property_name:
            print(get_message("property_name_required", USER_LANG))
            return

        property_value = input(get_message("enter_property_value", USER_LANG)).strip()
        if not property_value:
            print(get_message("property_value_required", USER_LANG))
            return

        # Try to convert to appropriate type
        try:
            if property_value.lower() in ["true", "false"]:
                property_value = property_value.lower() == "true"
            elif property_value.isdigit():
                property_value = int(property_value)
            elif "." in property_value and property_value.replace(".", "").isdigit():
                property_value = float(property_value)
        except (ValueError, TypeError):
            pass  # Keep as string

        desired_state = {property_name: property_value}

        print(f"\n{get_message('desired_state_to_set', USER_LANG)}:")
        print(f"   {get_message('property', USER_LANG)}: {property_name}")
        print(f"   {get_message('value', USER_LANG)}: {property_value}")

        self.update_shadow_desired(desired_state, debug=self.debug_mode)

    def simulate_device_state_changes(self):
        """Simulate device state changes"""
        print(f"\n{get_message('simulating_device_changes', USER_LANG)}")
        print(f"\n{get_message('simulation_options', USER_LANG)}")

        options = [
            get_message("temperature_change", USER_LANG),
            get_message("humidity_change", USER_LANG),
            get_message("status_toggle", USER_LANG),
            get_message("firmware_update", USER_LANG),
            get_message("custom_property", USER_LANG),
        ]

        for option in options:
            print(f"   {option}")

        while True:
            try:
                choice = int(input(f"\n{get_message('select_simulation', USER_LANG)}"))
                if 1 <= choice <= 5:
                    break
                else:
                    print(get_message("invalid_simulation", USER_LANG))
            except ValueError:
                print(get_message("enter_valid_number", USER_LANG))
            except KeyboardInterrupt:
                print(f"\n{get_message('operation_cancelled', USER_LANG)}")
                return

        local_state = self.load_local_state()
        old_state = local_state.copy()

        if choice == 1:  # Temperature change
            import random

            old_temp = local_state.get("temperature", 22.5)
            new_temp = round(old_temp + random.uniform(-5, 5), 1)
            local_state["temperature"] = new_temp
            print(get_message("temperature_changed", USER_LANG).format(old_temp, new_temp))

        elif choice == 2:  # Humidity change
            import random

            old_humidity = local_state.get("humidity", 45.0)
            new_humidity = round(max(0, min(100, old_humidity + random.uniform(-10, 10))), 1)
            local_state["humidity"] = new_humidity
            print(get_message("humidity_changed", USER_LANG).format(old_humidity, new_humidity))

        elif choice == 3:  # Status toggle
            old_status = local_state.get("status", "online")
            new_status = "offline" if old_status == "online" else "online"
            local_state["status"] = new_status
            print(get_message("status_changed", USER_LANG).format(old_status, new_status))

        elif choice == 4:  # Firmware update
            old_version = local_state.get("firmware_version", "1.0.0")
            version_parts = old_version.split(".")
            if len(version_parts) >= 3:
                patch = int(version_parts[2]) + 1
                new_version = f"{version_parts[0]}.{version_parts[1]}.{patch}"
            else:
                new_version = "1.0.1"
            local_state["firmware_version"] = new_version
            print(get_message("firmware_updated", USER_LANG).format(old_version, new_version))

        elif choice == 5:  # Custom property
            prop_name = input(get_message("enter_property_name", USER_LANG)).strip()
            if not prop_name:
                print(get_message("property_name_required", USER_LANG))
                return

            prop_value = input(get_message("enter_property_value", USER_LANG)).strip()
            if not prop_value:
                print(get_message("property_value_required", USER_LANG))
                return

            old_value = local_state.get(prop_name, "None")
            local_state[prop_name] = prop_value
            print(get_message("custom_property_changed", USER_LANG).format(prop_name, old_value, prop_value))

        # Show summary
        print(f"\n{get_message('state_change_summary', USER_LANG)}")
        for key in local_state:
            if key in old_state and old_state[key] != local_state[key]:
                print(f"   ‚Ä¢ {key}: {old_state[key]} ‚Üí {local_state[key]}")

        # Save and report
        if self.save_local_state(local_state):
            print(get_message("local_state_updated_sim", USER_LANG))
            print(get_message("reporting_to_shadow", USER_LANG))
            self.update_shadow_reported(local_state, debug=self.debug_mode)
            print(get_message("simulation_complete", USER_LANG))

    def view_shadow_message_history(self):
        """View shadow message history"""
        print(f"\n{get_message('viewing_message_history', USER_LANG)}")

        with self.message_lock:
            if not self.received_messages:
                print(get_message("no_messages_received", USER_LANG))
                print(get_message("try_other_operations", USER_LANG))
                return

            print(f"\n{get_message('message_history', USER_LANG).format(len(self.received_messages))}")

            for i, msg in enumerate(self.received_messages[-10:], 1):  # Show last 10
                timestamp = msg.get("Timestamp", "").split("T")[1][:8] if "T" in msg.get("Timestamp", "") else "Unknown"
                topic = msg.get("Topic", "Unknown")
                topic_type = topic.split("/")[-1] if "/" in topic else topic

                print(f"\n   {i}. [{timestamp}] {topic_type}")
                print(f"      {get_message('topic', USER_LANG)}: {topic}")
                print(f"      {get_message('direction', USER_LANG)}: {msg.get('Direction', 'Unknown')}")

                if msg.get("Shadow Data"):
                    shadow_data = str(msg["Shadow Data"])
                    if len(shadow_data) > 100:
                        shadow_data = shadow_data[:100] + "..."
                    print(f"      {get_message('shadow_data', USER_LANG)}: {shadow_data}")

        # Ask if user wants to clear history
        clear_choice = input(f"\n{get_message('clear_history_prompt', USER_LANG)}").strip().lower()
        if clear_choice == "y":
            with self.message_lock:
                self.received_messages.clear()
            print(get_message("history_cleared", USER_LANG))
        else:
            print(get_message("history_not_cleared", USER_LANG))

    def disconnect_and_summarize(self, start_time):
        """Disconnect and show session summary"""
        print(f"\n{get_message('disconnecting_from_iot', USER_LANG)}")

        if self.connection and self.connected:
            try:
                disconnect_future = self.connection.disconnect()
                disconnect_future.result()
                self.connected = False
            except Exception as e:
                print(f"‚ùå Error during disconnect: {str(e)}")

        print(get_message("disconnection_complete", USER_LANG))

        # Show session summary
        duration = int(time.time() - start_time)
        minutes = duration // 60
        seconds = duration % 60

        print(f"\n{get_message('session_summary', USER_LANG)}")
        print(f"   {get_message('total_messages', USER_LANG)}: {len(self.received_messages)}")
        print(f"   {get_message('connection_duration', USER_LANG)}: {minutes}m {seconds}s")
        print(f"   {get_message('shadow_operations', USER_LANG)}: Multiple")

        print(f"\n{get_message('thank_you_message', USER_LANG)}")
        print(f"\n{get_message('next_steps_suggestions', USER_LANG)}")
        for suggestion in [
            get_message("explore_iot_rules", USER_LANG),
            get_message("try_mqtt_client", USER_LANG),
            get_message("check_registry", USER_LANG),
        ]:
            print(f"   {suggestion}")

    def interactive_shadow_management(self):
        """Interactive shadow management interface"""
        self.print_step(3, get_message("step_simulating_changes", USER_LANG))

        print(f"üí° {get_message('shadow_concepts', USER_LANG)[0].replace('‚Ä¢', '').strip()}:")
        print(f"   ‚Ä¢ {get_message('desired_state', USER_LANG)} represents what the device should be")
        print(f"   ‚Ä¢ {get_message('reported_state', USER_LANG)} represents what the device currently is")
        print(
            f"   ‚Ä¢ {get_message('topic_update_delta', USER_LANG).replace('‚Ä¢ update/delta - ', '').replace(' (action needed)', '')} occur when desired ‚â† reported"
        )
        print("   ‚Ä¢ Local file simulates actual device state")

        # Initial shadow get
        print("\nüîÑ Getting initial shadow state...")
        self.get_shadow_document(debug=self.debug_mode)

        # Interactive loop
        print("\nüéÆ Interactive Shadow Management Mode")
        print("üí° Shadow messages will appear immediately when received!")

        print("\nCommands:")
        print("   ‚Ä¢ 'get' - Request current shadow document")
        print("   ‚Ä¢ 'local' - Show current local device state")
        print("   ‚Ä¢ 'edit' - Edit local device state")
        print("   ‚Ä¢ 'report' - Report current local state to shadow")
        print("   ‚Ä¢ 'desire <key=value> [key=value...]' - Set desired state (simulate cloud)")
        print("   ‚Ä¢ 'status' - Show connection and shadow status")
        print("   ‚Ä¢ 'messages' - Show shadow message history")
        print("   ‚Ä¢ 'debug' - Show connection diagnostics")
        print("   ‚Ä¢ 'help' - Show this help")
        print("   ‚Ä¢ 'quit' - Exit")
        print("\n" + "=" * 60)

        while True:
            try:
                command = input(f"\n{get_message('shadow_command_prompt', USER_LANG)}").strip()

                if not command:
                    continue

                parts = command.split(" ", 1)
                cmd = parts[0].lower()

                if cmd == "quit":
                    break

                elif cmd == "help":
                    print(f"\n{get_message('available_commands', USER_LANG)}")
                    print(get_message("get_command", USER_LANG))
                    print(get_message("local_command", USER_LANG))
                    print(get_message("edit_command", USER_LANG))
                    print(get_message("report_command", USER_LANG))
                    print(get_message("desire_command", USER_LANG))
                    print(get_message("status_command", USER_LANG))
                    print(get_message("messages_command", USER_LANG))
                    print(get_message("debug_command", USER_LANG))
                    print(get_message("quit_command", USER_LANG))
                    print(f"\n{get_message('example_desire', USER_LANG)}")

                elif cmd == "get":
                    print("\nüìö LEARNING MOMENT: Shadow Document Retrieval")
                    print(
                        "Getting the shadow document retrieves the complete JSON state including desired, reported, and metadata. This shows the current synchronization status between your application's intentions (desired) and the device's actual state (reported). The version number helps track changes."
                    )
                    print("\nüîÑ NEXT: Retrieving the current shadow document...")
                    time.sleep(1)  # Brief pause instead of blocking input  # nosemgrep: arbitrary-sleep

                    self.get_shadow_document(debug=self.debug_mode)
                    time.sleep(0.5)  # nosemgrep: arbitrary-sleep

                elif cmd == "local":
                    local_state = self.load_local_state()
                    print(f"\n{get_message('current_local_device_state', USER_LANG)}")
                    print(f"{json.dumps(local_state, indent=2)}")

                elif cmd == "edit":
                    self.edit_local_state()

                elif cmd == "report":
                    print("\nüìö LEARNING MOMENT: Device State Reporting")
                    print(
                        "Reporting state updates the shadow's 'reported' section with the device's current status. This is how devices communicate their actual state to applications. The shadow service automatically calculates deltas when reported state differs from desired state."
                    )
                    print("\nüîÑ NEXT: Reporting local device state to the shadow...")
                    time.sleep(1)  # Brief pause instead of blocking input  # nosemgrep: arbitrary-sleep

                    local_state = self.load_local_state()
                    print("\nüì° Reporting local state to shadow...")
                    self.update_shadow_reported(local_state, debug=self.debug_mode)
                    time.sleep(0.5)  # nosemgrep: arbitrary-sleep

                elif cmd == "desire":
                    if len(parts) < 2:
                        print(f"   {get_message('usage_desire', USER_LANG)}")
                        print(f"   {get_message('example_desire_usage', USER_LANG)}")
                    else:
                        print("\nüìö LEARNING MOMENT: Desired State Management")
                        print(
                            "Setting desired state simulates how applications or cloud services request changes to device configuration. The shadow service stores these requests and notifies devices through delta messages when desired state differs from reported state. This enables remote device control."
                        )
                        print("\nüîÑ NEXT: Setting desired state to trigger device changes...")
                        time.sleep(1)  # Brief pause instead of blocking input  # nosemgrep: arbitrary-sleep

                    # Parse key=value pairs
                    desired_updates = {}
                    for pair in parts[1].split():
                        if "=" in pair:
                            key, value = pair.split("=", 1)
                            # Try to convert to appropriate type
                            try:
                                if value.lower() in ["true", "false"]:
                                    desired_updates[key] = value.lower() == "true"
                                elif value.isdigit():
                                    desired_updates[key] = int(value)
                                elif "." in value and value.replace(".", "").isdigit():
                                    desired_updates[key] = float(value)
                                else:
                                    desired_updates[key] = value
                            except (ValueError, TypeError):
                                desired_updates[key] = value

                    if desired_updates:
                        print(get_message("setting_desired_state", USER_LANG).format(json.dumps(desired_updates, indent=2)))
                        self.update_shadow_desired(desired_updates, debug=self.debug_mode)
                        time.sleep(0.5)  # nosemgrep: arbitrary-sleep
                    else:
                        print(f"   {get_message('no_valid_pairs', USER_LANG)}")

                elif cmd == "status":
                    print(f"\n{get_message('shadow_connection_status', USER_LANG)}")
                    print(
                        f"   {get_message('connected', USER_LANG)}: {get_message('yes', USER_LANG) if self.connected else get_message('no', USER_LANG)}"
                    )
                    print(f"   {get_message('thing_name', USER_LANG)}: {self.thing_name}")
                    print(f"   {get_message('shadow_type', USER_LANG)}: {get_message('shadow_type_classic', USER_LANG)}")
                    print(f"   Local State File: {self.local_state_file}")
                    print(f"   Messages Received: {len(self.received_messages)}")

                elif cmd == "messages":
                    print(f"\n{get_message('shadow_message_history', USER_LANG)}")
                    with self.message_lock:
                        for msg in self.received_messages[-10:]:  # Show last 10 messages
                            timestamp = msg["Timestamp"].split("T")[1][:8]
                            topic_type = msg["Topic"].split("/")[-1]
                            print(f"   üì• [{timestamp}] {topic_type}")
                            if msg.get("Shadow Data"):
                                shadow_summary = str(msg["Shadow Data"])[:100]
                                print(f"      {shadow_summary}{'...' if len(str(msg['Shadow Data'])) > 100 else ''}")

                elif cmd == "debug":
                    self.show_shadow_diagnostics()

                else:
                    print(get_message("unknown_command", USER_LANG).format(cmd))

            except KeyboardInterrupt:
                print("\n\nüõë Interrupted by user")
                break
            except Exception as e:
                print(f"   ‚ùå Error: {str(e)}")

    def edit_local_state(self):
        """Interactive local state editor"""
        local_state = self.load_local_state()

        print(f"\n{get_message('edit_local_state_title', USER_LANG)}")
        print(f"{get_message('current_state', USER_LANG)} {json.dumps(local_state, indent=2)}")
        print(f"\n{get_message('options', USER_LANG)}")
        print(get_message("edit_individual_values", USER_LANG))
        print(get_message("replace_entire_state", USER_LANG))
        print(get_message("cancel", USER_LANG))

        while True:
            choice = input(f"\n{get_message('select_option_1_3', USER_LANG)}").strip()

            if choice == "1":
                # Edit individual values
                print(f"\n{get_message('current_values', USER_LANG)}")
                keys = list(local_state.keys())
                for i, key in enumerate(keys, 1):
                    print(f"   {i}. {key}: {local_state[key]}")

                print(f"   {len(keys) + 1}. {get_message('add_new_key', USER_LANG)}")
                print(f"   {len(keys) + 2}. {get_message('done_editing', USER_LANG)}")

                while True:
                    try:
                        edit_choice = int(input(f"\n{get_message('select_item_to_edit', USER_LANG).format(len(keys) + 2)}"))

                        if 1 <= edit_choice <= len(keys):
                            # Edit existing key
                            key = keys[edit_choice - 1]
                            current_value = local_state[key]
                            print(f"\n{get_message('editing_key', USER_LANG).format(key, current_value)}")
                            new_value = input(get_message("new_value_prompt", USER_LANG)).strip()

                            if new_value:
                                # Try to convert to appropriate type
                                try:
                                    if new_value.lower() in ["true", "false"]:
                                        local_state[key] = new_value.lower() == "true"
                                    elif new_value.isdigit():
                                        local_state[key] = int(new_value)
                                    elif "." in new_value and new_value.replace(".", "").isdigit():
                                        local_state[key] = float(new_value)
                                    else:
                                        local_state[key] = new_value
                                    print(get_message("updated_key", USER_LANG).format(key, local_state[key]))
                                except (ValueError, TypeError):
                                    local_state[key] = new_value
                                    print(get_message("updated_key", USER_LANG).format(key, local_state[key]))

                        elif edit_choice == len(keys) + 1:
                            # Add new key
                            new_key = input(get_message("new_key_name", USER_LANG)).strip()
                            if new_key:
                                new_value = input(get_message("value_for_key", USER_LANG).format(new_key)).strip()
                                # Try to convert to appropriate type
                                try:
                                    if new_value.lower() in ["true", "false"]:
                                        local_state[new_key] = new_value.lower() == "true"
                                    elif new_value.isdigit():
                                        local_state[new_key] = int(new_value)
                                    elif "." in new_value and new_value.replace(".", "").isdigit():
                                        local_state[new_key] = float(new_value)
                                    else:
                                        local_state[new_key] = new_value
                                    print(get_message("added_new_key", USER_LANG).format(new_key, local_state[new_key]))
                                    keys.append(new_key)  # Update keys list
                                except (ValueError, TypeError):
                                    local_state[new_key] = new_value
                                    print(get_message("added_new_key", USER_LANG).format(new_key, local_state[new_key]))
                                    keys.append(new_key)

                        elif edit_choice == len(keys) + 2:
                            # Done editing
                            break

                        else:
                            print(get_message("invalid_selection_cert", USER_LANG))

                    except ValueError:
                        print(get_message("enter_valid_number", USER_LANG))

                break

            elif choice == "2":
                # Replace with JSON
                print(f"\n{get_message('enter_json_prompt', USER_LANG)}")
                json_lines = []
                while True:
                    line = input()
                    if line == "" and json_lines and json_lines[-1] == "":
                        break
                    json_lines.append(line)

                try:
                    json_text = "\n".join(json_lines[:-1])  # Remove last empty line
                    new_state = json.loads(json_text)
                    local_state = new_state
                    print(get_message("state_updated_from_json", USER_LANG))
                    break
                except json.JSONDecodeError as e:
                    print(get_message("invalid_json", USER_LANG).format(str(e)))
                    continue

            elif choice == "3":
                print(f"‚ùå {get_message('operation_cancelled', USER_LANG)}")
                return

            else:
                print(get_message("invalid_choice", USER_LANG))

        # Save updated state
        if self.save_local_state(local_state):
            print(f"\n{get_message('local_state_updated_sim', USER_LANG)}")
            print(f"üìä {get_message('current_state', USER_LANG)} {json.dumps(local_state, indent=2)}")

            # Ask if user wants to report to shadow
            report = input(f"\n{get_message('report_updated_state', USER_LANG)}").strip().lower()
            if report == "y":
                self.update_shadow_reported(local_state, debug=self.debug_mode)
        else:
            print(get_message("failed_update_local", USER_LANG))

    def show_shadow_diagnostics(self):
        """Show detailed shadow connection and state diagnostics"""
        print("\nüîç Shadow Connection Diagnostics")
        print("=" * 60)

        print("üì° Connection Status:")
        print(f"   ‚Ä¢ Connected: {'‚úÖ Yes' if self.connected else '‚ùå No'}")
        print(f"   ‚Ä¢ Thing Name: {self.thing_name}")
        print("   ‚Ä¢ Shadow Type: Classic Shadow")
        print(f"   ‚Ä¢ Messages Received: {len(self.received_messages)}")

        if self.local_state_file:
            print("\nüì± Local Device State:")
            print(f"   ‚Ä¢ State File: {self.local_state_file}")
            print(f"   ‚Ä¢ File Exists: {'‚úÖ Yes' if os.path.exists(self.local_state_file) else '‚ùå No'}")

            if os.path.exists(self.local_state_file):
                try:
                    local_state = self.load_local_state()
                    print(f"   ‚Ä¢ Current State: {json.dumps(local_state, indent=6)}")
                except Exception as e:
                    print(f"   ‚Ä¢ Error reading state: {str(e)}")

        print("\nüåü Shadow Topics:")
        shadow_topics = [
            f"$aws/things/{self.thing_name}/shadow/get",
            f"$aws/things/{self.thing_name}/shadow/get/accepted",
            f"$aws/things/{self.thing_name}/shadow/get/rejected",
            f"$aws/things/{self.thing_name}/shadow/update",
            f"$aws/things/{self.thing_name}/shadow/update/accepted",
            f"$aws/things/{self.thing_name}/shadow/update/rejected",
            f"$aws/things/{self.thing_name}/shadow/update/delta",
        ]

        for topic in shadow_topics:
            if "get" in topic and topic.endswith("/get"):
                print(f"   üì§ {topic} (publish to request shadow)")
            elif "update" in topic and topic.endswith("/update"):
                print(f"   üì§ {topic} (publish to update shadow)")
            else:
                print(f"   üì• {topic} (subscribed)")

        print("\nüîß Troubleshooting:")
        print("1. Verify certificate is ACTIVE and attached to Thing")
        print("2. Check policy allows shadow operations (iot:GetThingShadow, iot:UpdateThingShadow)")
        print("3. Ensure Thing name matches exactly")
        print("4. Check AWS IoT logs in CloudWatch (if enabled)")

    def disconnect(self):
        """Disconnect from AWS IoT Core"""
        if self.connection and self.connected:
            print(f"\n{get_message('disconnecting_from_iot', USER_LANG)}")

            try:
                disconnect_future = self.connection.disconnect()
                disconnect_future.result()

                self.print_shadow_details(
                    "SHADOW DISCONNECTION",
                    {
                        get_message("status", USER_LANG): get_message("disconnection_complete", USER_LANG),
                        get_message("thing_name", USER_LANG): self.thing_name,
                        get_message("total_messages", USER_LANG): len(self.received_messages),
                        "Session Duration": "Connection closed cleanly",
                    },
                )

            except Exception as e:
                print(f"   ‚ùå Error during disconnect: {str(e)}")

            self.connected = False


def main():
    global USER_LANG, DEBUG_MODE

    try:
        # Get user's preferred language
        USER_LANG = get_language()

        # Check for debug flag
        debug_mode = "--debug" in sys.argv or "-d" in sys.argv
        DEBUG_MODE = debug_mode

        print(get_message("title", USER_LANG))
        print(get_message("separator", USER_LANG))

        # Display AWS context first
        display_aws_context()

        print(get_message("description_intro", USER_LANG))
        for concept in get_message("shadow_concepts", USER_LANG):
            print(concept)

        # Show learning moment
        print_learning_moment("shadow_foundation", USER_LANG)

        if debug_mode:
            print(f"\n{get_message('debug_enabled', USER_LANG)}")
            for feature in get_message("debug_features", USER_LANG):
                print(feature)
        else:
            print(f"\n{get_message('tip', USER_LANG)}")

        print(get_message("separator", USER_LANG))

        explorer = DeviceShadowExplorer()
        explorer.debug_mode = debug_mode

        try:
            # Auto-connect and go into interactive mode
            explorer.run_auto_connect_and_interactive()

        except KeyboardInterrupt:
            print(f"\n\n{get_message('operation_cancelled', USER_LANG)}")
        except (ConnectionError, TimeoutError) as e:
            print(f"\n‚ùå Connection error: {str(e)}")
            if debug_mode:
                import traceback

                traceback.print_exc()
        except (FileNotFoundError, PermissionError) as e:
            print(f"\n‚ùå File access error: {str(e)}")
            if debug_mode:
                import traceback

                traceback.print_exc()
        except (json.JSONDecodeError, UnicodeDecodeError) as e:
            print(f"\n‚ùå Data format error: {str(e)}")
            if debug_mode:
                import traceback

                traceback.print_exc()
        except Exception as e:
            print(f"\n‚ùå Unexpected error: {str(e)}")
            if debug_mode:
                import traceback

                traceback.print_exc()
        finally:
            # Always disconnect cleanly
            explorer.disconnect()
            print(f"\n{get_message('thank_you_message', USER_LANG)}")

    except KeyboardInterrupt:
        print(f"\n\n{get_message('operation_cancelled', USER_LANG)}")
        print(get_message("goodbye", USER_LANG))


if __name__ == "__main__":
    main()
